import { ReactNode } from 'react';
import type { ActiveLedgerTransactionType, MultiSignTransactionType } from 'types';
import type { WithClassnameType } from '../../types';
export interface SignStepInnerClassesType {
    buttonsWrapperClassName?: string;
    inputGroupClassName?: string;
    inputLabelClassName?: string;
    inputValueClassName?: string;
    errorClassName?: string;
    scamAlertClassName?: string;
    buttonClassName?: string;
    progressClassName?: string;
}
export interface SignStepType extends WithClassnameType {
    onSignTransaction: () => void;
    onPrev: () => void;
    handleClose: () => void;
    waitingForDevice: boolean;
    error: string | null;
    callbackRoute?: string;
    title?: ReactNode;
    currentStep: number;
    currentTransaction: ActiveLedgerTransactionType | null;
    allTransactions: MultiSignTransactionType[];
    isLastTransaction: boolean;
    signStepInnerClasses?: SignStepInnerClassesType;
}
export declare const SignStep: ({ onSignTransaction, handleClose, onPrev, title, waitingForDevice, currentTransaction, error, allTransactions, isLastTransaction, currentStep, className, signStepInnerClasses }: SignStepType) => JSX.Element | null;
//# sourceMappingURL=SignStep.d.ts.map