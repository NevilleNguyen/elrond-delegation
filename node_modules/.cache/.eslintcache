[{"/Users/neville/Documents/Github/elrond-delegation/src/index.tsx":"1","/Users/neville/Documents/Github/elrond-delegation/src/App.tsx":"2","/Users/neville/Documents/Github/elrond-delegation/src/config.ts":"3","/Users/neville/Documents/Github/elrond-delegation/src/routes.ts":"4","/Users/neville/Documents/Github/elrond-delegation/src/components/Layout/index.ts":"5","/Users/neville/Documents/Github/elrond-delegation/src/pages/PageNotFound/index.ts":"6","/Users/neville/Documents/Github/elrond-delegation/src/pages/Unlock/index.ts":"7","/Users/neville/Documents/Github/elrond-delegation/src/context/index.tsx":"8","/Users/neville/Documents/Github/elrond-delegation/src/pages/Dashboard/index.ts":"9","/Users/neville/Documents/Github/elrond-delegation/src/pages/Admin/index.ts":"10","/Users/neville/Documents/Github/elrond-delegation/src/pages/Home/index.ts":"11","/Users/neville/Documents/Github/elrond-delegation/src/components/PageTitle/index.tsx":"12","/Users/neville/Documents/Github/elrond-delegation/src/components/Layout/Layout.tsx":"13","/Users/neville/Documents/Github/elrond-delegation/src/pages/PageNotFound/PageNotFound.tsx":"14","/Users/neville/Documents/Github/elrond-delegation/src/pages/Unlock/Unlock.tsx":"15","/Users/neville/Documents/Github/elrond-delegation/src/context/state.tsx":"16","/Users/neville/Documents/Github/elrond-delegation/src/context/reducer.tsx":"17","/Users/neville/Documents/Github/elrond-delegation/src/pages/Dashboard/Dashboard.tsx":"18","/Users/neville/Documents/Github/elrond-delegation/src/pages/Admin/Admin.tsx":"19","/Users/neville/Documents/Github/elrond-delegation/src/pages/Home/Home.tsx":"20","/Users/neville/Documents/Github/elrond-delegation/src/hooks/useGlobalData.ts":"21","/Users/neville/Documents/Github/elrond-delegation/src/components/Layout/components/Navbar/index.ts":"22","/Users/neville/Documents/Github/elrond-delegation/src/assets/xPortal.tsx":"23","/Users/neville/Documents/Github/elrond-delegation/src/assets/Wallet.tsx":"24","/Users/neville/Documents/Github/elrond-delegation/src/assets/MultiversX.tsx":"25","/Users/neville/Documents/Github/elrond-delegation/src/assets/Extension.tsx":"26","/Users/neville/Documents/Github/elrond-delegation/src/assets/Ledger.tsx":"27","/Users/neville/Documents/Github/elrond-delegation/src/components/Layout/components/Navbar/Navbar.tsx":"28","/Users/neville/Documents/Github/elrond-delegation/src/components/Toggles/index.ts":"29","/Users/neville/Documents/Github/elrond-delegation/src/components/Heading/index.ts":"30","/Users/neville/Documents/Github/elrond-delegation/src/components/Cards/index.ts":"31","/Users/neville/Documents/Github/elrond-delegation/src/components/Stake/index.ts":"32","/Users/neville/Documents/Github/elrond-delegation/src/components/Nodes/index.ts":"33","/Users/neville/Documents/Github/elrond-delegation/src/components/Withdrawals/index.ts":"34","/Users/neville/Documents/Github/elrond-delegation/src/helpers/denominate.ts":"35","/Users/neville/Documents/Github/elrond-delegation/src/components/Toggles/Toggles.tsx":"36","/Users/neville/Documents/Github/elrond-delegation/src/components/Cards/Cards.tsx":"37","/Users/neville/Documents/Github/elrond-delegation/src/components/Heading/Heading.tsx":"38","/Users/neville/Documents/Github/elrond-delegation/src/components/Withdrawals/Withdrawals.tsx":"39","/Users/neville/Documents/Github/elrond-delegation/src/components/Nodes/Nodes.tsx":"40","/Users/neville/Documents/Github/elrond-delegation/src/components/Stake/Stake.tsx":"41","/Users/neville/Documents/Github/elrond-delegation/src/components/Cards/helpers/calculateAnnualPercentage.ts":"42","/Users/neville/Documents/Github/elrond-delegation/src/components/Stake/hooks/index.ts":"43","/Users/neville/Documents/Github/elrond-delegation/src/components/Stake/components/Undelegate/index.ts":"44","/Users/neville/Documents/Github/elrond-delegation/src/components/Stake/components/Delegate/index.ts":"45","/Users/neville/Documents/Github/elrond-delegation/src/helpers/useTransaction.ts":"46","/Users/neville/Documents/Github/elrond-delegation/src/components/Nodes/components/Add/index.ts":"47","/Users/neville/Documents/Github/elrond-delegation/src/components/Withdrawals/components/Withdrawal/index.ts":"48","/Users/neville/Documents/Github/elrond-delegation/src/components/Heading/components/Identity/index.ts":"49","/Users/neville/Documents/Github/elrond-delegation/src/helpers/getPercentage.ts":"50","/Users/neville/Documents/Github/elrond-delegation/src/components/Cards/components/ChangeDelegationCap/index.ts":"51","/Users/neville/Documents/Github/elrond-delegation/src/components/Cards/components/ChangeServiceFee/index.ts":"52","/Users/neville/Documents/Github/elrond-delegation/src/components/Toggles/components/Switch/index.ts":"53","/Users/neville/Documents/Github/elrond-delegation/src/components/Action/index.ts":"54","/Users/neville/Documents/Github/elrond-delegation/src/components/Stake/components/Undelegate/Undelegate.tsx":"55","/Users/neville/Documents/Github/elrond-delegation/src/components/Stake/components/Delegate/Delegate.tsx":"56","/Users/neville/Documents/Github/elrond-delegation/src/components/Nodes/components/Add/Add.tsx":"57","/Users/neville/Documents/Github/elrond-delegation/src/components/Withdrawals/components/Withdrawal/Withdrawal.tsx":"58","/Users/neville/Documents/Github/elrond-delegation/src/components/Heading/components/Identity/Identity.tsx":"59","/Users/neville/Documents/Github/elrond-delegation/src/components/Cards/components/ChangeDelegationCap/ChangeDelegationCap.tsx":"60","/Users/neville/Documents/Github/elrond-delegation/src/components/Cards/components/ChangeServiceFee/ChangeServiceFee.tsx":"61","/Users/neville/Documents/Github/elrond-delegation/src/components/Toggles/components/Switch/Switch.tsx":"62","/Users/neville/Documents/Github/elrond-delegation/src/helpers/nominate.ts":"63","/Users/neville/Documents/Github/elrond-delegation/src/components/Action/Action.tsx":"64","/Users/neville/Documents/Github/elrond-delegation/src/components/Stake/helpers/delegationValidators.ts":"65","/Users/neville/Documents/Github/elrond-delegation/src/components/Nodes/components/Dropzone/index.ts":"66","/Users/neville/Documents/Github/elrond-delegation/src/components/Action/context/index.tsx":"67","/Users/neville/Documents/Github/elrond-delegation/src/components/Nodes/components/Dropzone/Dropzone.tsx":"68","/Users/neville/Documents/Github/elrond-delegation/src/components/Nodes/components/Dropzone/helpers.ts":"69"},{"size":308,"mtime":1681264626410,"results":"70","hashOfConfig":"71"},{"size":1563,"mtime":1681264626410,"results":"72","hashOfConfig":"71"},{"size":3552,"mtime":1681266114891,"results":"73","hashOfConfig":"71"},{"size":1303,"mtime":1681264626410,"results":"74","hashOfConfig":"71"},{"size":26,"mtime":1681264626440,"results":"75","hashOfConfig":"71"},{"size":32,"mtime":1681264626467,"results":"76","hashOfConfig":"71"},{"size":26,"mtime":1681264626471,"results":"77","hashOfConfig":"71"},{"size":1197,"mtime":1681264626412,"results":"78","hashOfConfig":"71"},{"size":29,"mtime":1681264626469,"results":"79","hashOfConfig":"71"},{"size":25,"mtime":1681264626468,"results":"80","hashOfConfig":"71"},{"size":24,"mtime":1681264626465,"results":"81","hashOfConfig":"71"},{"size":328,"mtime":1681264626418,"results":"82","hashOfConfig":"71"},{"size":890,"mtime":1681264626440,"results":"83","hashOfConfig":"71"},{"size":1053,"mtime":1681264626466,"results":"84","hashOfConfig":"71"},{"size":4673,"mtime":1681264626471,"results":"85","hashOfConfig":"71"},{"size":2579,"mtime":1681264626412,"results":"86","hashOfConfig":"71"},{"size":3013,"mtime":1681264626412,"results":"87","hashOfConfig":"71"},{"size":1413,"mtime":1681264626469,"results":"88","hashOfConfig":"71"},{"size":1737,"mtime":1681264626468,"results":"89","hashOfConfig":"71"},{"size":436,"mtime":1681264626465,"results":"90","hashOfConfig":"71"},{"size":7063,"mtime":1681264626459,"results":"91","hashOfConfig":"71"},{"size":26,"mtime":1681264626440,"results":"92","hashOfConfig":"71"},{"size":1138,"mtime":1681264626461,"results":"93","hashOfConfig":"71"},{"size":1100,"mtime":1681264626461,"results":"94","hashOfConfig":"71"},{"size":509,"mtime":1681264626461,"results":"95","hashOfConfig":"71"},{"size":1206,"mtime":1681264626464,"results":"96","hashOfConfig":"71"},{"size":1147,"mtime":1681264626463,"results":"97","hashOfConfig":"71"},{"size":1973,"mtime":1681265457771,"results":"98","hashOfConfig":"71"},{"size":27,"mtime":1681264626456,"results":"99","hashOfConfig":"71"},{"size":27,"mtime":1681264626444,"results":"100","hashOfConfig":"71"},{"size":25,"mtime":1681264626450,"results":"101","hashOfConfig":"71"},{"size":25,"mtime":1681264626424,"results":"102","hashOfConfig":"71"},{"size":25,"mtime":1681264626432,"results":"103","hashOfConfig":"71"},{"size":31,"mtime":1681264626459,"results":"104","hashOfConfig":"71"},{"size":2925,"mtime":1681264626473,"results":"105","hashOfConfig":"71"},{"size":1381,"mtime":1681264626456,"results":"106","hashOfConfig":"71"},{"size":11290,"mtime":1681264626449,"results":"107","hashOfConfig":"71"},{"size":2680,"mtime":1681264626442,"results":"108","hashOfConfig":"71"},{"size":5240,"mtime":1681264626457,"results":"109","hashOfConfig":"71"},{"size":10705,"mtime":1681264626434,"results":"110","hashOfConfig":"71"},{"size":5163,"mtime":1681264626425,"results":"111","hashOfConfig":"71"},{"size":3231,"mtime":1681264626450,"results":"112","hashOfConfig":"71"},{"size":6123,"mtime":1681264626424,"results":"113","hashOfConfig":"71"},{"size":30,"mtime":1681264626423,"results":"114","hashOfConfig":"71"},{"size":28,"mtime":1681264626421,"results":"115","hashOfConfig":"71"},{"size":1550,"mtime":1681264626472,"results":"116","hashOfConfig":"71"},{"size":23,"mtime":1681264626429,"results":"117","hashOfConfig":"71"},{"size":30,"mtime":1681264626459,"results":"118","hashOfConfig":"71"},{"size":28,"mtime":1681264626444,"results":"119","hashOfConfig":"71"},{"size":379,"mtime":1681264626473,"results":"120","hashOfConfig":"71"},{"size":39,"mtime":1681264626447,"results":"121","hashOfConfig":"71"},{"size":36,"mtime":1681264626449,"results":"122","hashOfConfig":"71"},{"size":26,"mtime":1681264626455,"results":"123","hashOfConfig":"71"},{"size":26,"mtime":1681264626453,"results":"124","hashOfConfig":"71"},{"size":4464,"mtime":1681264626422,"results":"125","hashOfConfig":"71"},{"size":4465,"mtime":1681264626421,"results":"126","hashOfConfig":"71"},{"size":2251,"mtime":1681264626428,"results":"127","hashOfConfig":"71"},{"size":4127,"mtime":1681264626458,"results":"128","hashOfConfig":"71"},{"size":5214,"mtime":1681264626444,"results":"129","hashOfConfig":"71"},{"size":2908,"mtime":1681264626447,"results":"130","hashOfConfig":"71"},{"size":2396,"mtime":1681264626448,"results":"131","hashOfConfig":"71"},{"size":2164,"mtime":1681264626455,"results":"132","hashOfConfig":"71"},{"size":1218,"mtime":1681264626473,"results":"133","hashOfConfig":"71"},{"size":1804,"mtime":1681264626451,"results":"134","hashOfConfig":"71"},{"size":2341,"mtime":1681264626426,"results":"135","hashOfConfig":"71"},{"size":28,"mtime":1681264626431,"results":"136","hashOfConfig":"71"},{"size":927,"mtime":1681264626452,"results":"137","hashOfConfig":"71"},{"size":4692,"mtime":1681264626430,"results":"138","hashOfConfig":"71"},{"size":1188,"mtime":1681264626430,"results":"139","hashOfConfig":"71"},{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"sdtvk2",{"filePath":"142","messages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"164","messages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170"},{"filePath":"171","messages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"175","messages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177"},{"filePath":"178","messages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180"},{"filePath":"181","messages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183"},{"filePath":"184","messages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186"},{"filePath":"187","messages":"188","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"189","messages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"191","messages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"193","messages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"195","messages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"197","messages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"199","messages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"201","messages":"202","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"203","messages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"205","messages":"206","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"207","messages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"209","messages":"210","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"211","messages":"212","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"213","messages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"215","messages":"216","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"217","messages":"218","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219"},{"filePath":"220","messages":"221","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"222","messages":"223","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224"},{"filePath":"225","messages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227"},{"filePath":"228","messages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"230","messages":"231","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"232","messages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234"},{"filePath":"235","messages":"236","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"237","messages":"238","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"239","messages":"240","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"241","messages":"242","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"243","messages":"244","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"245","messages":"246","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"247","messages":"248","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"249","messages":"250","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"251","messages":"252","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"253","messages":"254","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"255","messages":"256","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"257","messages":"258","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"259","messages":"260","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"261","messages":"262","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"263","messages":"264","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265"},{"filePath":"266","messages":"267","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268"},{"filePath":"269","messages":"270","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"271","messages":"272","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"273","messages":"274","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275"},{"filePath":"276","messages":"277","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"278","messages":"279","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"280","messages":"281","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"282","messages":"283","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"284","messages":"285","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"286","messages":"287","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"288"},{"filePath":"289","messages":"290","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/neville/Documents/Github/elrond-delegation/src/index.tsx",[],"/Users/neville/Documents/Github/elrond-delegation/src/App.tsx",[],"/Users/neville/Documents/Github/elrond-delegation/src/config.ts",[],"/Users/neville/Documents/Github/elrond-delegation/src/routes.ts",[],"/Users/neville/Documents/Github/elrond-delegation/src/components/Layout/index.ts",[],"/Users/neville/Documents/Github/elrond-delegation/src/pages/PageNotFound/index.ts",[],"/Users/neville/Documents/Github/elrond-delegation/src/pages/Unlock/index.ts",[],"/Users/neville/Documents/Github/elrond-delegation/src/context/index.tsx",[],"/Users/neville/Documents/Github/elrond-delegation/src/pages/Dashboard/index.ts",[],"/Users/neville/Documents/Github/elrond-delegation/src/pages/Admin/index.ts",[],"/Users/neville/Documents/Github/elrond-delegation/src/pages/Home/index.ts",[],"/Users/neville/Documents/Github/elrond-delegation/src/components/PageTitle/index.tsx",[],"/Users/neville/Documents/Github/elrond-delegation/src/components/Layout/Layout.tsx",[],"/Users/neville/Documents/Github/elrond-delegation/src/pages/PageNotFound/PageNotFound.tsx",[],"/Users/neville/Documents/Github/elrond-delegation/src/pages/Unlock/Unlock.tsx",["291"],"import React, { useEffect } from 'react';\nimport { useGetAccountInfo } from '@multiversx/sdk-dapp/hooks/account/useGetAccountInfo';\nimport { ExtensionLoginButton } from '@multiversx/sdk-dapp/UI/extension/ExtensionLoginButton';\nimport { LedgerLoginButton } from '@multiversx/sdk-dapp/UI/ledger/LedgerLoginButton';\nimport { WalletConnectLoginButton } from '@multiversx/sdk-dapp/UI/walletConnect/WalletConnectLoginButton';\nimport { WebWalletLoginButton } from '@multiversx/sdk-dapp/UI/webWallet/WebWalletLoginButton';\nimport { useNavigate } from 'react-router-dom';\n\nimport { Extension } from 'assets/Extension';\nimport { Ledger } from 'assets/Ledger';\nimport { MultiversX } from 'assets/MultiversX';\nimport { Wallet } from 'assets/Wallet';\nimport { xPortal } from 'assets/xPortal';\n\nimport { network } from 'config';\n\nimport styles from './styles.module.scss';\n\nimport type { ConnectionType } from './types';\n\nexport const Unlock = () => {\n  const { address } = useGetAccountInfo();\n\n  const navigate = useNavigate();\n  const connects: ConnectionType[] = [\n    {\n      title: 'Desktop',\n      name: 'MultiversX Web Wallet',\n      background: '#000000',\n      icon: Wallet,\n      component: WebWalletLoginButton\n    },\n    {\n      title: 'Hardware',\n      name: 'Ledger',\n      background: '#000000',\n      icon: Ledger,\n      component: LedgerLoginButton,\n      innerLedgerComponentsClasses: {\n        ledgerScamPhishingAlertClassName: styles.phishing,\n        ledgerProgressBarClassNames: {},\n        ledgerConnectClassNames: {\n          ledgerModalTitleClassName: styles.title,\n          ledgerModalSubtitleClassName: styles.subtitle,\n          ledgerModalIconClassName: styles.icon\n        },\n        confirmAddressClassNames: {\n          ledgerModalTitleClassName: styles.title,\n          ledgerModalConfirmDescriptionClassName: styles.description,\n          ledgerModalConfirmFooterClassName: styles.footer\n        },\n        addressTableClassNames: {\n          ledgerModalTitleClassName: styles.title,\n          ledgerModalSubtitleClassName: styles.subtitle,\n          ledgerModalTableHeadClassName: styles.head,\n          ledgerModalTableNavigationButtonClassName: styles.navigation,\n          ledgerModalTableSelectedItemClassName: styles.selected\n        },\n        ledgerLoadingClassNames: {\n          ledgerModalTitleClassName: styles.title,\n          ledgerModalSubtitleClassName: styles.subtitle\n        }\n      }\n    },\n    {\n      title: 'Mobile',\n      name: 'xPortal Mobile Wallet',\n      background: 'linear-gradient(225deg, #2C58DA 0%, #1A2ABA 100%)',\n      icon: xPortal,\n      isWalletConnectV2: true,\n      component: WalletConnectLoginButton,\n      innerWalletConnectComponentsClasses: {\n        containerContentClassName: styles.content,\n        containerTitleClassName: styles.title,\n        containerButtonClassName: styles.button,\n        containerSubtitleClassName: styles.subtitle,\n        containerScamPhishingAlertClassName: styles.phishing,\n        walletConnectPairingListClassNames: {\n          leadClassName: styles.lead,\n          buttonClassName: styles.pairing\n        }\n      }\n    },\n    {\n      title: 'Browser',\n      name: 'MultiversX DeFi Wallet',\n      background: 'linear-gradient(225deg, #2C58DA 0%, #1A2ABA 100%)',\n      icon: Extension,\n      component: ExtensionLoginButton\n    }\n  ];\n\n  const redirectConditionally = () => {\n    if (Boolean(address)) {\n      navigate('/dashboard');\n    }\n  };\n\n  useEffect(redirectConditionally, [address]);\n\n  return (\n    <div className={styles.unlock}>\n      <div className={styles.wrapper}>\n        <div className={styles.logo}>\n          <MultiversX />\n        </div>\n\n        <strong className={styles.heading}>\n          MultiversX Delegation Dashboard\n        </strong>\n\n        <div className={styles.description}>\n          {`Delegate MultiversX (${network.egldLabel}) and earn up to 25% APY!`}\n        </div>\n\n        <div className={styles.connects}>\n          {connects.map((connect) => (\n            <connect.component\n              key={connect.name}\n              callbackRoute='/dashboard'\n              logoutRoute='/unlock'\n              {...connect}\n            >\n              <span className={styles.connect}>\n                <span className={styles.title}>{connect.title}</span>\n\n                <span\n                  className={styles.icon}\n                  style={{ background: connect.background }}\n                >\n                  <connect.icon />\n                </span>\n\n                <span className={styles.name}>{connect.name}</span>\n              </span>\n            </connect.component>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","/Users/neville/Documents/Github/elrond-delegation/src/context/state.tsx",[],"/Users/neville/Documents/Github/elrond-delegation/src/context/reducer.tsx",[],"/Users/neville/Documents/Github/elrond-delegation/src/pages/Dashboard/Dashboard.tsx",["292"],"import React, { useEffect, useState } from 'react';\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { useGetAccountInfo } from '@multiversx/sdk-dapp/hooks/account/useGetAccountInfo';\nimport { useNavigate } from 'react-router-dom';\n\nimport { Cards } from 'components/Cards';\nimport { Heading } from 'components/Heading';\nimport { Stake } from 'components/Stake';\nimport { Withdrawals } from 'components/Withdrawals';\n\nimport useGlobalData from '../../hooks/useGlobalData';\n\nimport styles from './styles.module.scss';\n\nexport const Dashboard = () => {\n  const { address } = useGetAccountInfo();\n  const [loading, setLoading] = useState(true);\n\n  const navigate = useNavigate();\n  const handleRedirect = () =>\n    Boolean(address) ? setLoading(false) : navigate('/unlock');\n\n  useEffect(handleRedirect, [address]);\n  useGlobalData();\n\n  if (loading) {\n    return (\n      <div\n        style={{ fontSize: '30px' }}\n        className='d-flex align-items-center justify-content-center text-white flex-fill'\n      >\n        <FontAwesomeIcon\n          icon={faSpinner}\n          size='2x'\n          spin={true}\n          className='mr-3'\n        />\n        Loading...\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.dashboard}>\n      <Heading />\n      <Cards />\n      <Stake />\n      <Withdrawals />\n    </div>\n  );\n};\n","/Users/neville/Documents/Github/elrond-delegation/src/pages/Admin/Admin.tsx",["293"],"import React, { useEffect, useState } from 'react';\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { useGetAccountInfo } from '@multiversx/sdk-dapp/hooks/account/useGetAccountInfo';\nimport { useNavigate } from 'react-router-dom';\n\nimport { Cards } from 'components/Cards';\nimport { Heading } from 'components/Heading';\nimport { Nodes } from 'components/Nodes';\nimport { Toggles } from 'components/Toggles';\n\nimport { useGlobalContext } from 'context';\n\nimport useGlobalData from '../../hooks/useGlobalData';\nimport styles from './styles.module.scss';\n\nexport const Admin = () => {\n  const { address } = useGetAccountInfo();\n  const { contractDetails } = useGlobalContext();\n  const [loading, setLoading] = useState<boolean>(true);\n\n  const navigate = useNavigate();\n  const handleRedirect = () => {\n    if (!Boolean(address)) {\n      navigate('/unlock');\n      return;\n    }\n\n    if (contractDetails.status === 'loaded') {\n      if (contractDetails.data && contractDetails.data.owner) {\n        setLoading(false);\n      } else {\n        navigate('/dashboard');\n      }\n    }\n  };\n\n  useEffect(handleRedirect, [address, contractDetails.data]);\n  useGlobalData();\n\n  if (loading) {\n    return (\n      <div\n        style={{ fontSize: '30px' }}\n        className='d-flex align-items-center justify-content-center text-white flex-fill'\n      >\n        <FontAwesomeIcon\n          icon={faSpinner}\n          size='2x'\n          spin={true}\n          className='mr-3'\n        />\n        Loading...\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.admin}>\n      <Heading />\n      <Cards />\n      <Toggles />\n      <Nodes />\n    </div>\n  );\n};\n","/Users/neville/Documents/Github/elrond-delegation/src/pages/Home/Home.tsx",["294"],"import { useEffect } from 'react';\nimport { useGetAccountInfo } from '@multiversx/sdk-dapp/hooks/account/useGetAccountInfo';\nimport { useNavigate } from 'react-router-dom';\n\nexport const Home = () => {\n  const { address } = useGetAccountInfo();\n  const navigate = useNavigate();\n  const handleRedirect = () => {\n    navigate(Boolean(address) ? '/dashboard' : '/unlock');\n  };\n\n  useEffect(handleRedirect, [address]);\n\n  return null;\n};\n","/Users/neville/Documents/Github/elrond-delegation/src/hooks/useGlobalData.ts",["295","296"],"import { useEffect } from 'react';\n\nimport {\n  Query,\n  ContractFunction,\n  Address,\n  decodeBigNumber,\n  decodeUnsignedNumber,\n  decodeString,\n  AddressValue\n} from '@multiversx/sdk-core';\n\nimport { useGetAccountInfo } from '@multiversx/sdk-dapp/hooks/account/useGetAccountInfo';\nimport { useGetSuccessfulTransactions } from '@multiversx/sdk-dapp/hooks/transactions/useGetSuccessfulTransactions';\nimport { ProxyNetworkProvider } from '@multiversx/sdk-network-providers';\n\nimport { network, auctionContract } from 'config';\nimport { useDispatch } from 'context';\n\ninterface ContractDetailsType {\n  automaticActivation: string;\n  redelegationCap: string;\n  serviceFee: string;\n  delegationCap: string;\n  owner: boolean;\n  withDelegationCap: string;\n}\n\ninterface globalFetchesType {\n  [key: string]: any;\n  getContractDetails: {\n    key: string;\n    handler: () => Promise<ContractDetailsType | string>;\n  };\n  getNodesNumber: {\n    key: string;\n    handler: () => Promise<Buffer[] | string>;\n  };\n  getNodesStates: {\n    key: string;\n    handler: () => Promise<Buffer[] | string>;\n  };\n  getTotalActiveStake: {\n    key: string;\n    handler: () => Promise<string>;\n  };\n  getUserActiveStake: {\n    key: string;\n    handler: () => Promise<string>;\n  };\n  getNetworkConfig: {\n    key: string;\n    handler: () => Promise<any>;\n  };\n}\n\nconst useGlobalData = () => {\n  const { address } = useGetAccountInfo();\n  const { hasSuccessfulTransactions, successfulTransactionsArray } =\n    useGetSuccessfulTransactions();\n\n  const dispatch = useDispatch();\n  const provider = new ProxyNetworkProvider(network.gatewayAddress);\n  const criticalFetches: globalFetchesType = {\n    getContractDetails: {\n      key: 'contractDetails',\n      handler: async (): Promise<ContractDetailsType | string> => {\n        try {\n          const query = new Query({\n            address: new Address(network.delegationContract),\n            func: new ContractFunction('getContractConfig')\n          });\n\n          const data = await provider.queryContract(query);\n          const response = data.getReturnDataParts();\n\n          const ownerAddressIndex = 0;\n          const serviceFeeIndex = 1;\n          const delegationCapIndex = 2;\n          const automaticActivationIndex = 4;\n          const withDelegationCapIndex = 5;\n          const redelegationCapIndex = 7;\n\n          const ownerAddress = response[ownerAddressIndex];\n          const serviceFee = response[serviceFeeIndex];\n          const delegationCap = response[delegationCapIndex];\n          const activationStatus = response[automaticActivationIndex];\n          const withDelegationCap = response[withDelegationCapIndex];\n          const redelegationCap = response[redelegationCapIndex];\n\n          return {\n            withDelegationCap: String(withDelegationCap),\n            owner: new Address(address).hex() === ownerAddress.toString('hex'),\n            delegationCap: decodeBigNumber(delegationCap).toFixed(),\n            redelegationCap:\n              decodeString(redelegationCap) === 'true' ? 'ON' : 'OFF',\n            serviceFee:\n              (decodeUnsignedNumber(serviceFee) / 100).toString() + '%',\n            automaticActivation:\n              decodeString(activationStatus) === 'true' ? 'ON' : 'OFF'\n          };\n        } catch (error) {\n          return Promise.reject(error);\n        }\n      }\n    },\n    getNodesNumber: {\n      key: 'nodesNumber',\n      handler: async (): Promise<Buffer[] | string> => {\n        try {\n          const query = new Query({\n            address: new Address(auctionContract),\n            func: new ContractFunction('getBlsKeysStatus'),\n            args: [new AddressValue(new Address(network.delegationContract))]\n          });\n\n          const data = await provider.queryContract(query);\n          const response = data.getReturnDataParts();\n\n          return response;\n        } catch (error) {\n          return Promise.reject(error);\n        }\n      }\n    },\n    getNodesStates: {\n      key: 'nodesStates',\n      handler: async (): Promise<Buffer[] | string> => {\n        try {\n          const query = new Query({\n            address: new Address(network.delegationContract),\n            func: new ContractFunction('getAllNodeStates')\n          });\n\n          const data = await provider.queryContract(query);\n          const response = data.getReturnDataParts();\n\n          return response;\n        } catch (error) {\n          return Promise.reject(error);\n        }\n      }\n    },\n    getTotalActiveStake: {\n      key: 'totalActiveStake',\n      handler: async (): Promise<string> => {\n        try {\n          const query = new Query({\n            address: new Address(network.delegationContract),\n            func: new ContractFunction('getTotalActiveStake')\n          });\n\n          const data = await provider.queryContract(query);\n          const [totalNodes] = data.getReturnDataParts();\n\n          return decodeBigNumber(totalNodes).toFixed();\n        } catch (error) {\n          return Promise.reject(error);\n        }\n      }\n    },\n    getUserActiveStake: {\n      key: 'userActiveStake',\n      handler: async (): Promise<string> => {\n        try {\n          const query = new Query({\n            address: new Address(network.delegationContract),\n            func: new ContractFunction('getUserActiveStake'),\n            args: [new AddressValue(new Address(address))]\n          });\n\n          const data = await provider.queryContract(query);\n          const [userStake] = data.getReturnDataParts();\n\n          if (!userStake) {\n            return '0';\n          }\n\n          return decodeBigNumber(userStake).toFixed();\n        } catch (error) {\n          return Promise.reject(error);\n        }\n      }\n    },\n    getNetworkConfig: {\n      key: 'networkConfig',\n      handler: async (): Promise<any> => {\n        try {\n          return await provider.getNetworkConfig();\n        } catch (error) {\n          return Promise.reject(error);\n        }\n      }\n    }\n  };\n\n  const fetchCriticalData = (): void => {\n    const fetchData = async () => {\n      const keys = Object.keys(criticalFetches);\n\n      keys.forEach((key) => {\n        dispatch({\n          type: key,\n          [criticalFetches[key].key]: {\n            status: 'loading',\n            data: null,\n            error: null\n          }\n        });\n      });\n\n      const data = await Promise.allSettled(\n        keys.map((key: string) => criticalFetches[key].handler())\n      );\n\n      data.forEach((item: any, index: any) => {\n        dispatch({\n          type: keys[index],\n          [criticalFetches[keys[index]].key]: {\n            status: item.status === 'rejected' ? 'error' : 'loaded',\n            error: item.reason || null,\n            data: item.value || null\n          }\n        });\n      });\n    };\n\n    fetchData();\n  };\n\n  useEffect(fetchCriticalData, []);\n  useEffect(() => {\n    if (hasSuccessfulTransactions && successfulTransactionsArray.length > 0) {\n      fetchCriticalData();\n    }\n  }, [hasSuccessfulTransactions, successfulTransactionsArray.length]);\n};\n\nexport default useGlobalData;\n","/Users/neville/Documents/Github/elrond-delegation/src/components/Layout/components/Navbar/index.ts",[],"/Users/neville/Documents/Github/elrond-delegation/src/assets/xPortal.tsx",[],"/Users/neville/Documents/Github/elrond-delegation/src/assets/Wallet.tsx",[],"/Users/neville/Documents/Github/elrond-delegation/src/assets/MultiversX.tsx",[],"/Users/neville/Documents/Github/elrond-delegation/src/assets/Extension.tsx",[],"/Users/neville/Documents/Github/elrond-delegation/src/assets/Ledger.tsx",[],"/Users/neville/Documents/Github/elrond-delegation/src/components/Layout/components/Navbar/Navbar.tsx",[],"/Users/neville/Documents/Github/elrond-delegation/src/components/Toggles/index.ts",[],"/Users/neville/Documents/Github/elrond-delegation/src/components/Heading/index.ts",[],"/Users/neville/Documents/Github/elrond-delegation/src/components/Cards/index.ts",[],"/Users/neville/Documents/Github/elrond-delegation/src/components/Stake/index.ts",[],"/Users/neville/Documents/Github/elrond-delegation/src/components/Nodes/index.ts",[],"/Users/neville/Documents/Github/elrond-delegation/src/components/Withdrawals/index.ts",[],"/Users/neville/Documents/Github/elrond-delegation/src/helpers/denominate.ts",[],"/Users/neville/Documents/Github/elrond-delegation/src/components/Toggles/Toggles.tsx",[],"/Users/neville/Documents/Github/elrond-delegation/src/components/Cards/Cards.tsx",["297","298","299","300","301"],"import React, { useCallback, useEffect, ReactNode } from 'react';\nimport {\n  faUsers,\n  faServer,\n  faLeaf,\n  faReceipt,\n  faArrowUp,\n  faCog\n} from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  decodeUnsignedNumber,\n  ContractFunction,\n  Address,\n  Query,\n  decodeString\n} from '@multiversx/sdk-core';\nimport { useGetActiveTransactionsStatus } from '@multiversx/sdk-dapp/hooks/transactions/useGetActiveTransactionsStatus';\nimport {\n  ApiNetworkProvider,\n  ProxyNetworkProvider\n} from '@multiversx/sdk-network-providers';\nimport axios from 'axios';\nimport classNames from 'classnames';\nimport { useLocation } from 'react-router-dom';\n\nimport { MultiversX } from 'assets/MultiversX';\nimport { Action } from 'components/Action';\nimport { network, auctionContract } from 'config';\nimport { useGlobalContext, useDispatch } from 'context';\nimport { denominated } from 'helpers/denominate';\nimport getPercentage from 'helpers/getPercentage';\n\nimport { ChangeDelegationCap } from './components/ChangeDelegationCap';\nimport { ChangeServiceFee } from './components/ChangeServiceFee';\n\nimport calculateAnnualPercentage from './helpers/calculateAnnualPercentage';\n\nimport styles from './styles.module.scss';\n\ninterface CardType {\n  label: string;\n  colors: string[];\n  data: {\n    value?: string | null;\n    percentage?: string | undefined;\n  };\n  title?: string;\n  description?: string;\n  modal?: ReactNode;\n  icon: ReactNode;\n}\n\nexport const Cards = () => {\n  const {\n    totalActiveStake,\n    totalNetworkStake,\n    usersNumber,\n    nodesNumber,\n    networkStatus,\n    contractDetails,\n    networkConfig\n  } = useGlobalContext();\n  const { pending } = useGetActiveTransactionsStatus();\n\n  const dispatch = useDispatch();\n  const location = useLocation();\n\n  const getNetworkStatus = async (): Promise<void> => {\n    dispatch({\n      type: 'getNetworkStatus',\n      networkStatus: {\n        status: 'loading',\n        data: null,\n        error: null\n      }\n    });\n\n    try {\n      const [status, balance] = await Promise.all([\n        new ProxyNetworkProvider(network.gatewayAddress).getNetworkStatus(),\n        axios.get(`${network.apiAddress}/accounts/${auctionContract}`)\n      ]);\n\n      dispatch({\n        type: 'getNetworkStatus',\n        networkStatus: {\n          status: 'loaded',\n          error: null,\n          data: {\n            ...status,\n            Balance: balance.data.balance\n          }\n        }\n      });\n    } catch (error) {\n      dispatch({\n        type: 'getNetworkStatus',\n        networkStatus: {\n          status: 'error',\n          data: null,\n          error\n        }\n      });\n    }\n  };\n\n  const getUsersNumber = async (): Promise<void> => {\n    dispatch({\n      type: 'getUsersNumber',\n      usersNumber: {\n        status: 'loading',\n        data: null,\n        error: null\n      }\n    });\n\n    try {\n      const provider = new ProxyNetworkProvider(network.apiAddress);\n      const query = new Query({\n        address: new Address(network.delegationContract),\n        func: new ContractFunction('getNumUsers')\n      });\n\n      const data = await provider.queryContract(query);\n      const [userNumber] = data.getReturnDataParts();\n\n      dispatch({\n        type: 'getUsersNumber',\n        usersNumber: {\n          status: 'loaded',\n          data: decodeUnsignedNumber(userNumber).toString(),\n          error: null\n        }\n      });\n    } catch (error) {\n      dispatch({\n        type: 'getUsersNumber',\n        usersNumber: {\n          status: 'error',\n          data: null,\n          error\n        }\n      });\n    }\n  };\n\n  const getTotalNetworkStake = async (): Promise<void> => {\n    dispatch({\n      type: 'getTotalNetworkStake',\n      totalNetworkStake: {\n        data: null,\n        error: null,\n        status: 'loading'\n      }\n    });\n\n    try {\n      const query = new ApiNetworkProvider(network.apiAddress, {\n        timeout: 4000\n      });\n\n      const data = await query.getNetworkStakeStatistics();\n\n      dispatch({\n        type: 'getTotalNetworkStake',\n        totalNetworkStake: {\n          status: 'loaded',\n          error: null,\n          data\n        }\n      });\n    } catch (error) {\n      dispatch({\n        type: 'getTotalNetworkStake',\n        totalNetworkStake: {\n          status: 'error',\n          data: null,\n          error\n        }\n      });\n    }\n  };\n\n  const getContractStakeData = useCallback(() => {\n    if (!totalNetworkStake.data || !totalActiveStake.data) {\n      const loading =\n        totalNetworkStake.status === 'loading' ||\n        totalActiveStake.status === 'loading';\n\n      return {\n        value: loading ? `... ${network.egldLabel}` : 'Stake Unknown',\n        percentage: loading ? '...%' : 'Data Unavailable'\n      };\n    }\n\n    const formatted = {\n      stake: denominated(totalNetworkStake.data.TotalStaked.toFixed()),\n      nodes: denominated(totalActiveStake.data)\n    };\n\n    return {\n      value: `${formatted.nodes} ${network.egldLabel}`,\n      percentage: `${getPercentage(\n        formatted.nodes,\n        formatted.stake\n      )}% of total stake`\n    };\n  }, [totalNetworkStake, totalActiveStake.data]);\n\n  const getNodesNumber = useCallback(() => {\n    if (!totalNetworkStake.data || !nodesNumber.data) {\n      const loading =\n        totalNetworkStake.status === 'loading' ||\n        nodesNumber.status === 'loading';\n\n      return {\n        value: loading ? '...' : 'Nodes Unknown',\n        percentage: loading ? '...% of total nodes' : 'Data Unavailable'\n      };\n    }\n\n    const formatted = {\n      stake: totalNetworkStake.data.TotalValidators.toString(),\n      nodes: nodesNumber.data\n        .filter((key: any) => decodeString(key) === 'staked')\n        .length.toString()\n    };\n\n    return {\n      value: formatted.nodes,\n      percentage: `${getPercentage(\n        formatted.nodes,\n        formatted.stake\n      )}% of total nodes`\n    };\n  }, [totalNetworkStake, nodesNumber]);\n\n  const getDelegationCap = useCallback(() => {\n    if (!contractDetails.data || !totalActiveStake.data) {\n      const loading =\n        totalActiveStake.status === 'loading' ||\n        contractDetails.status === 'loading';\n\n      return {\n        value: loading ? `... ${network.egldLabel}` : 'Cap Unknown',\n        percentage: loading ? '...%' : 'Data Unavailable'\n      };\n    }\n\n    const formatted = {\n      stake: denominated(totalActiveStake.data),\n      value: denominated(contractDetails.data.delegationCap)\n    };\n\n    return {\n      value: `${formatted.value} ${network.egldLabel}`,\n      percentage: `${getPercentage(formatted.stake, formatted.value)}% filled`\n    };\n  }, [totalActiveStake.data, contractDetails.data]);\n\n  const getAnnualPercentage = () => {\n    const dependencies = [\n      totalActiveStake,\n      nodesNumber,\n      networkStatus,\n      totalNetworkStake,\n      networkConfig,\n      contractDetails\n    ];\n\n    if (dependencies.some((dependency) => dependency.status === 'loading')) {\n      return '...%';\n    }\n\n    if (dependencies.every((dependency) => dependency.data)) {\n      const percentage = calculateAnnualPercentage({\n        activeStake: totalActiveStake.data,\n        blsKeys: nodesNumber.data,\n        networkStatus: networkStatus.data,\n        networkStake: totalNetworkStake.data,\n        networkConfig: networkConfig.data,\n        serviceFee: parseFloat(\n          contractDetails.data\n            ? contractDetails.data.serviceFee.replace('%', '')\n            : '0'\n        )\n      });\n\n      return `${percentage}%`;\n    }\n\n    return 'Unknown APR';\n  };\n\n  const cards: CardType[] = [\n    {\n      label: 'Contract Stake',\n      data: getContractStakeData(),\n      colors: ['#2044F5', '#1B37C0'],\n      icon: <MultiversX />\n    },\n    {\n      label: 'Number of Users',\n      colors: ['#6CADEF', '#5B96D2'],\n      icon: <FontAwesomeIcon icon={faUsers} />,\n      data: {\n        value:\n          usersNumber.status !== 'loaded'\n            ? usersNumber.error\n              ? 'Data Unavailable'\n              : '...'\n            : usersNumber.data\n      }\n    },\n    {\n      label: 'Number of Nodes',\n      icon: <FontAwesomeIcon icon={faServer} />,\n      colors: ['#36CA8C', '#2BA572'],\n      data: getNodesNumber()\n    },\n    {\n      label: 'Computed APR',\n      colors: ['#FBC34C', '#D49712'],\n      icon: <FontAwesomeIcon icon={faLeaf} />,\n      data: {\n        value: getAnnualPercentage(),\n        percentage: 'Including Service Fee'\n      }\n    },\n    {\n      label: 'Service Fee',\n      modal: <ChangeServiceFee />,\n      icon: <FontAwesomeIcon icon={faReceipt} />,\n      title: 'Change service fee',\n      colors: ['#F3BF89', '#B68350'],\n      data: {\n        value: contractDetails.data\n          ? contractDetails.data.serviceFee\n          : contractDetails.error\n          ? 'Service Fee Unknown'\n          : '...%'\n      }\n    },\n    {\n      label: 'Delegation Cap',\n      modal: <ChangeDelegationCap />,\n      description: `The delegation cap is the maximum amount of ${network.egldLabel} your agency can stake from delegators.`,\n      title: 'Delegation Cap',\n      icon: <FontAwesomeIcon icon={faArrowUp} />,\n      colors: ['#E48570', '#C25C45'],\n      data: getDelegationCap()\n    }\n  ];\n\n  const fetchNetworkStatus = () => {\n    if (!networkStatus.data) {\n      getNetworkStatus();\n    }\n  };\n\n  const fetchUsersNumber = () => {\n    if (!usersNumber.data) {\n      getUsersNumber();\n    }\n  };\n\n  const fetchTotalNetworkStake = () => {\n    if (!totalNetworkStake.data) {\n      getTotalNetworkStake();\n    }\n  };\n\n  useEffect(fetchUsersNumber, [usersNumber.data]);\n  useEffect(fetchNetworkStatus, [networkStatus.data]);\n  useEffect(fetchTotalNetworkStake, [totalNetworkStake.data]);\n\n  return (\n    <div className={`${styles.cards} cards`}>\n      {cards.map((card) => {\n        const [alpha, beta] = card.colors;\n        const background = `linear-gradient(180deg, ${alpha} 0%, ${beta} 100%)`;\n        const interactive = card.modal && location.pathname === '/admin';\n\n        return (\n          <div key={card.label} className={styles.card} style={{ background }}>\n            <div className={styles.heading}>\n              <span>{card.label}</span>\n              <div\n                style={{ fill: interactive && !pending ? beta : 'white' }}\n                className={classNames(styles.icon, {\n                  [styles.fill]: interactive && !pending\n                })}\n              >\n                {interactive && !pending ? (\n                  <Action\n                    render={() => card.modal}\n                    title={card.title}\n                    description={card.description}\n                    trigger={\n                      <span\n                        className={classNames(styles.trigger, {\n                          [styles.disabled]: true\n                        })}\n                      >\n                        <FontAwesomeIcon icon={faCog} size='lg' />\n                      </span>\n                    }\n                  />\n                ) : (\n                  card.icon\n                )}\n              </div>\n            </div>\n\n            <div className={styles.value}>{card.data.value}</div>\n\n            {card.data.percentage && <span>{card.data.percentage}</span>}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n","/Users/neville/Documents/Github/elrond-delegation/src/components/Heading/Heading.tsx",[],"/Users/neville/Documents/Github/elrond-delegation/src/components/Withdrawals/Withdrawals.tsx",["302","303","304"],"import React, { useEffect } from 'react';\nimport {\n  decodeUnsignedNumber,\n  ContractFunction,\n  AddressValue,\n  Address,\n  Query,\n  decodeString,\n  decodeBigNumber\n} from '@multiversx/sdk-core';\n\nimport { useGetAccountInfo } from '@multiversx/sdk-dapp/hooks/account/useGetAccountInfo';\nimport { useGetSuccessfulTransactions } from '@multiversx/sdk-dapp/hooks/transactions/useGetSuccessfulTransactions';\nimport { ProxyNetworkProvider } from '@multiversx/sdk-network-providers';\n\nimport moment from 'moment';\nimport { network, decimals, denomination } from 'config';\nimport { useGlobalContext, useDispatch } from 'context';\nimport { UndelegateStakeListType } from 'context/state';\nimport denominate from 'helpers/denominate';\n\nimport { Withdrawal } from './components/Withdrawal';\nimport styles from './styles.module.scss';\n\nexport const Withdrawals = () => {\n  const dispatch = useDispatch();\n\n  const { account } = useGetAccountInfo();\n  const { undelegatedStakeList } = useGlobalContext();\n  const { hasSuccessfulTransactions, successfulTransactionsArray } =\n    useGetSuccessfulTransactions();\n\n  const getUndelegatedStakeList = async (): Promise<void> => {\n    dispatch({\n      type: 'getUndelegatedStakeList',\n      undelegatedStakeList: {\n        status: 'loading',\n        data: null,\n        error: null\n      }\n    });\n\n    try {\n      const provider = new ProxyNetworkProvider(network.gatewayAddress);\n      const query = new Query({\n        address: new Address(network.delegationContract),\n        func: new ContractFunction('getUserUnDelegatedList'),\n        args: [new AddressValue(new Address(account.address))]\n      });\n\n      const [data, config, status] = await Promise.all([\n        provider.queryContract(query),\n        provider.getNetworkConfig(),\n        provider.getNetworkStatus()\n      ]);\n\n      const payload = data\n        .getReturnDataParts()\n        .reduce((total: any, item, index, array) => {\n          if (index % 2 !== 0) {\n            return total;\n          } else {\n            const next: Buffer = array[index + 1];\n            const getTime = (): number => {\n              const epochsChangesRemaining = decodeUnsignedNumber(next);\n              const roundsRemainingInEpoch =\n                config.RoundsPerEpoch - status.RoundsPassedInCurrentEpoch;\n              const roundEpochComplete =\n                epochsChangesRemaining > 1\n                  ? (epochsChangesRemaining - 1) * config.RoundsPerEpoch\n                  : 0;\n\n              return (\n                moment().unix() +\n                ((roundsRemainingInEpoch + roundEpochComplete) *\n                  config.RoundDuration) /\n                  1000\n              );\n            };\n\n            const current = {\n              timeLeft: decodeString(next) === '' ? 0 : getTime(),\n              value: denominate({\n                input: decodeBigNumber(item).toFixed(),\n                decimals,\n                denomination\n              })\n            };\n\n            const exists = total.find(\n              (withdrawal: UndelegateStakeListType) =>\n                withdrawal.timeLeft === withdrawal.timeLeft\n            );\n\n            const value = exists\n              ? (parseInt(exists.value) + parseInt(current.value)).toFixed()\n              : 0;\n\n            if (exists && current.timeLeft === exists.timeLeft) {\n              return [\n                ...(total.length > 1 ? total : []),\n                {\n                  ...exists,\n                  value\n                }\n              ];\n            } else {\n              return [...total, current];\n            }\n          }\n        }, []);\n\n      dispatch({\n        type: 'getUndelegatedStakeList',\n        undelegatedStakeList: {\n          status: 'loaded',\n          error: null,\n          data: payload.sort(\n            (alpha: UndelegateStakeListType, beta: UndelegateStakeListType) =>\n              alpha.timeLeft - beta.timeLeft\n          )\n        }\n      });\n    } catch (error) {\n      dispatch({\n        type: 'getUndelegatedStakeList',\n        undelegatedStakeList: {\n          status: 'error',\n          data: null,\n          error\n        }\n      });\n    }\n  };\n\n  const fetchUndelegatedStakeList = () => {\n    if (!undelegatedStakeList.data) {\n      getUndelegatedStakeList();\n    }\n  };\n\n  const refetchUndelegatedStakeList = () => {\n    if (\n      hasSuccessfulTransactions &&\n      undelegatedStakeList.data &&\n      successfulTransactionsArray.length > 0\n    ) {\n      getUndelegatedStakeList();\n    }\n  };\n\n  useEffect(fetchUndelegatedStakeList, [undelegatedStakeList.data]);\n  useEffect(refetchUndelegatedStakeList, [\n    hasSuccessfulTransactions,\n    successfulTransactionsArray.length\n  ]);\n\n  if (!undelegatedStakeList.data || undelegatedStakeList.data.length === 0) {\n    return null;\n  }\n\n  return (\n    <div className={`${styles.withdrawals} withdrawals`}>\n      <div className={styles.heading}>\n        <span className={styles.title}>Pending Withdrawals</span>\n      </div>\n\n      <div className={styles.body}>\n        {undelegatedStakeList.data.map(\n          (withdrawal: UndelegateStakeListType) => (\n            <Withdrawal key={withdrawal.timeLeft} {...withdrawal} />\n          )\n        )}\n      </div>\n    </div>\n  );\n};\n","/Users/neville/Documents/Github/elrond-delegation/src/components/Nodes/Nodes.tsx",["305","306","307","308"],"import React, { useEffect, useState, Fragment, useCallback } from 'react';\nimport {\n  faPlus,\n  faServer,\n  faTimes,\n  faCheck,\n  faExternalLinkAlt,\n  faAngleDown\n} from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  ContractFunction,\n  Address,\n  Query,\n  BytesValue\n} from '@multiversx/sdk-core';\nimport { useGetActiveTransactionsStatus } from '@multiversx/sdk-dapp/hooks/transactions/useGetActiveTransactionsStatus';\nimport { useGetSuccessfulTransactions } from '@multiversx/sdk-dapp/hooks/transactions/useGetSuccessfulTransactions';\nimport { ProxyNetworkProvider } from '@multiversx/sdk-network-providers';\nimport classNames from 'classnames';\nimport { Dropdown } from 'react-bootstrap';\n\nimport { Action } from 'components/Action';\nimport { network, auctionContract, stakingContract } from 'config';\nimport { useGlobalContext } from 'context';\nimport useTransaction from 'helpers/useTransaction';\n\nimport { Add } from './components/Add';\n\nimport styles from './styles.module.scss';\n\nimport variants from './variants.json';\n\ninterface NodeType {\n  code: string;\n  status: any;\n  position?: string;\n}\n\ninterface VariantsType {\n  [key: string]: any;\n}\n\ninterface ArgumentsType {\n  value: string;\n  type: string;\n  args: string;\n}\n\ninterface ActionsType {\n  key: string;\n  label: string;\n  callback: (value: string) => ArgumentsType;\n}\n\nconst actions: ActionsType[] = [\n  {\n    key: 'unStake',\n    label: 'Unstake',\n    callback: (value: string) => ({\n      value: '0',\n      type: 'unStakeNodes',\n      args: value\n    })\n  },\n  {\n    key: 'reStake',\n    label: 'ReStake',\n    callback: (value: string) => ({\n      value: '0',\n      type: 'reStakeUnStakedNodes',\n      args: value\n    })\n  },\n  {\n    key: 'unJail',\n    label: 'Unjail',\n    callback: (value: string) => ({\n      value: '2.5',\n      type: 'unJailNodes',\n      args: value\n    })\n  },\n  {\n    key: 'unBond',\n    label: 'Unbond',\n    callback: (value: string) => ({\n      value: '0',\n      type: 'unBondNodes',\n      args: value\n    })\n  },\n  {\n    key: 'stake',\n    label: 'Stake',\n    callback: (value: string) => ({\n      value: '0',\n      type: 'stakeNodes',\n      args: `${value}`\n    })\n  },\n  {\n    key: 'remove',\n    label: 'Remove',\n    callback: (value: string) => ({\n      value: '0',\n      type: 'removeNodes',\n      args: `${value}`\n    })\n  }\n];\n\nexport const Nodes = () => {\n  const { nodesNumber, nodesStates } = useGlobalContext();\n  const { sendTransaction } = useTransaction();\n  const { pending } = useGetActiveTransactionsStatus();\n  const { hasSuccessfulTransactions, successfulTransactionsArray } =\n    useGetSuccessfulTransactions();\n\n  const [data, setData] = useState<NodeType[]>([]);\n  const isLoading = nodesNumber.status === 'loading';\n\n  const onAct = useCallback(\n    async (parameters: ArgumentsType): Promise<void> => {\n      const { value, type, args } = parameters;\n\n      try {\n        await sendTransaction({\n          args,\n          type,\n          value\n        });\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    []\n  );\n\n  const fetchQueue = useCallback(async (key: string) => {\n    const provider = new ProxyNetworkProvider(network.apiAddress);\n    const query = new Query({\n      address: new Address(stakingContract),\n      func: new ContractFunction('getQueueIndex'),\n      caller: new Address(auctionContract),\n      args: [BytesValue.fromHex(key)]\n    });\n\n    const queue = new Query({\n      address: new Address(stakingContract),\n      func: new ContractFunction('getQueueSize')\n    });\n\n    const queryContract = async (parameters: Query) => {\n      const decode = (item: string) => Buffer.from(item, 'base64');\n      const response = await provider.queryContract(parameters);\n\n      return response.returnData.map(decode);\n    };\n\n    const payload = await Promise.all([query, queue].map(queryContract));\n    const [position, size] = payload.map(([item]) => String(item));\n\n    return `${position}/${size}`;\n  }, []);\n\n  const calculateNodes = useCallback(\n    (nodes: any[]) =>\n      nodes.reduce((result: any, value, index, array) => {\n        if (index % 2 === 0) {\n          const [code, status]: any[] = array.slice(index, index + 2);\n          const item: any = {\n            code: Buffer.from(code, 'base64').toString('hex'),\n            status: Buffer.from(status, 'base64').toString()\n          };\n\n          return [\n            ...result,\n            {\n              ...item,\n              status: (variants as VariantsType)[item.status]\n            }\n          ];\n        }\n        return result;\n      }, []),\n    []\n  );\n\n  const assignQueue = useCallback(\n    (nodes: NodeType[]) =>\n      nodes.map(async (node: NodeType) =>\n        node.status.label === 'Queued'\n          ? {\n              ...node,\n              position: await fetchQueue(node.code)\n            }\n          : node\n      ),\n    []\n  );\n\n  const getNodes = () => {\n    const fetchData = async (nodes: any[], states: any[]) => {\n      try {\n        const activeNodes = await Promise.all(\n          assignQueue(calculateNodes(nodes))\n        );\n        const inactiveNodes = states.reduce((total, item, index) => {\n          const indexes = states.reduce(\n            (statuses, status, position) =>\n              Object.keys(variants).includes(String(status))\n                ? [...statuses, { position, status: String(status) }]\n                : statuses,\n            []\n          );\n\n          const inactive = (unit: any) => unit.status === 'notStaked';\n          const position = indexes.findIndex(inactive);\n          const start = indexes.find(inactive);\n          const end = indexes[position + 1] || { position: states.length };\n\n          const node: any = {\n            code: item.toString('hex'),\n            status: variants.notStaked\n          };\n\n          if (!start || !end) {\n            return total;\n          }\n\n          return index > start.position && index < end.position\n            ? [...total, node]\n            : total;\n        }, []);\n\n        setData(activeNodes.concat(inactiveNodes));\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    if (nodesNumber.data && nodesStates.data) {\n      fetchData(nodesNumber.data, nodesStates.data);\n    }\n\n    return () => setData([]);\n  };\n\n  const refetchNodes = () => {\n    if (\n      hasSuccessfulTransactions &&\n      nodesNumber.data &&\n      successfulTransactionsArray.length > 0\n    ) {\n      getNodes();\n    }\n  };\n\n  useEffect(getNodes, [nodesNumber.data, nodesStates.data]);\n  useEffect(refetchNodes, [\n    hasSuccessfulTransactions,\n    successfulTransactionsArray.length\n  ]);\n\n  return (\n    <div className={`${styles.nodes} nodes`}>\n      <div className={styles.heading}>\n        <span className={styles.title}>My Nodes</span>\n\n        <Action\n          title='Add Nodes'\n          disabled={pending}\n          trigger={\n            <div\n              className={classNames(styles.button, {\n                [styles.disabled]: pending\n              })}\n            >\n              <div className={styles.icon}>\n                <FontAwesomeIcon icon={faPlus} />\n              </div>\n              <span>Add Nodes</span>\n            </div>\n          }\n          render={() => <Add />}\n        />\n      </div>\n\n      <div className={styles.body}>\n        {isLoading || nodesNumber.error || data.length === 0 ? (\n          <Fragment>\n            <div className={styles.server}>\n              <FontAwesomeIcon icon={faServer} size='2x' />\n            </div>\n\n            <div className={styles.message}>\n              {isLoading\n                ? 'Retrieving keys...'\n                : nodesNumber.error\n                ? 'An error occurred attempting to retrieve keys.'\n                : 'No keys found for this contract.'}\n            </div>\n          </Fragment>\n        ) : (\n          data.map((node: NodeType) => (\n            <div key={node.code} className={styles.node}>\n              <div className={styles.left}>\n                <span className={styles.icon}>\n                  <FontAwesomeIcon icon={faServer} />\n                </span>\n\n                <a\n                  href={`${network.explorerAddress}/nodes/${node.code}`}\n                  target='_blank'\n                  rel='noreferrer'\n                  className={styles.link}\n                >\n                  <span className={styles.code}>{node.code}</span>\n\n                  <FontAwesomeIcon icon={faExternalLinkAlt} />\n                </a>\n              </div>\n\n              <div className={styles.right}>\n                {node.status && (\n                  <span\n                    className={classNames(\n                      styles.status,\n                      styles[node.status.color]\n                    )}\n                  >\n                    <span className={styles.icon}>\n                      <FontAwesomeIcon\n                        icon={\n                          node.status.color === 'success' ? faCheck : faTimes\n                        }\n                        size='sm'\n                      />\n                    </span>\n\n                    {node.position\n                      ? `${node.status.label} (Position ${node.position})`\n                      : node.status.label}\n                  </span>\n                )}\n\n                <Dropdown>\n                  <Dropdown.Toggle\n                    className={classNames(styles.toggle, {\n                      [styles.disabled]: pending\n                    })}\n                  >\n                    <span>Action</span>\n\n                    <div className={styles.angle}>\n                      <FontAwesomeIcon icon={faAngleDown} />\n                    </div>\n                  </Dropdown.Toggle>\n\n                  <Dropdown.Menu className={styles.menu}>\n                    {actions.map((action) => {\n                      const disabled = !node.status.actions.includes(\n                        action.key\n                      );\n\n                      return (\n                        <Dropdown.Item\n                          key={action.key}\n                          className={classNames(styles.action, {\n                            [styles.disabled]: disabled\n                          })}\n                          onClick={() => {\n                            onAct(action.callback(node.code));\n                          }}\n                        >\n                          {action.label}\n                        </Dropdown.Item>\n                      );\n                    })}\n                  </Dropdown.Menu>\n                </Dropdown>\n              </div>\n            </div>\n          ))\n        )}\n      </div>\n    </div>\n  );\n};\n","/Users/neville/Documents/Github/elrond-delegation/src/components/Stake/Stake.tsx",[],"/Users/neville/Documents/Github/elrond-delegation/src/components/Cards/helpers/calculateAnnualPercentage.ts",[],"/Users/neville/Documents/Github/elrond-delegation/src/components/Stake/hooks/index.ts",["309","310","311"],"import { useEffect, useState } from 'react';\n\nimport {\n  Address,\n  AddressValue,\n  Query,\n  ContractFunction,\n  decodeBigNumber\n} from '@multiversx/sdk-core';\nimport { useGetAccountInfo } from '@multiversx/sdk-dapp/hooks/account/useGetAccountInfo';\nimport { useGetActiveTransactionsStatus } from '@multiversx/sdk-dapp/hooks/transactions/useGetActiveTransactionsStatus';\nimport { useGetSuccessfulTransactions } from '@multiversx/sdk-dapp/hooks/transactions/useGetSuccessfulTransactions';\nimport { ProxyNetworkProvider } from '@multiversx/sdk-network-providers';\nimport BigNumber from 'bignumber.js';\n\nimport { network, minDust } from 'config';\nimport { useDispatch, useGlobalContext } from 'context';\nimport { denominated } from 'helpers/denominate';\nimport getPercentage from 'helpers/getPercentage';\nimport { nominateValToHex } from 'helpers/nominate';\nimport useTransaction from 'helpers/useTransaction';\n\nexport type ActionCallbackType = () => void;\nexport interface DelegationPayloadType {\n  amount: string;\n}\n\nconst useStakeData = () => {\n  const dispatch = useDispatch();\n  const [check, setCheck] = useState(false);\n\n  const { account, address } = useGetAccountInfo();\n  const { sendTransaction } = useTransaction();\n  const { pending } = useGetActiveTransactionsStatus();\n  const { hasSuccessfulTransactions, successfulTransactionsArray } =\n    useGetSuccessfulTransactions();\n  const { contractDetails, userClaimableRewards, totalActiveStake } =\n    useGlobalContext();\n\n  const onDelegate =\n    (callback: ActionCallbackType) =>\n    async (data: DelegationPayloadType): Promise<void> => {\n      try {\n        await sendTransaction({\n          value: data.amount,\n          type: 'delegate',\n          args: ''\n        });\n\n        setTimeout(callback, 250);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n  const onUndelegate =\n    (callback: ActionCallbackType) =>\n    async (data: DelegationPayloadType): Promise<void> => {\n      try {\n        await sendTransaction({\n          value: '0',\n          type: 'unDelegate',\n          args: nominateValToHex(data.amount.toString())\n        });\n\n        setTimeout(callback, 250);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n  const onRedelegate =\n    (callback: ActionCallbackType) => async (): Promise<void> => {\n      try {\n        await sendTransaction({\n          value: '0',\n          type: 'reDelegateRewards',\n          args: ''\n        });\n\n        setTimeout(callback, 250);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n  const onClaimRewards =\n    (callback: ActionCallbackType) => async (): Promise<void> => {\n      try {\n        await sendTransaction({\n          value: '0',\n          type: 'claimRewards',\n          args: ''\n        });\n\n        setTimeout(callback, 250);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n  const getStakingLimits = () => {\n    if (contractDetails.data && totalActiveStake.data) {\n      const balance = new BigNumber(account.balance);\n      const gasPrice = new BigNumber('12000000');\n      const gasLimit = new BigNumber('12000000');\n      const available = balance.minus(gasPrice.times(gasLimit));\n      const dustful = available.minus(new BigNumber(minDust)).toFixed();\n\n      if (contractDetails.data.withDelegationCap === 'true') {\n        const cap = contractDetails.data.delegationCap;\n        const stake = totalActiveStake.data;\n        const remainder = new BigNumber(cap).minus(new BigNumber(stake));\n        const maxed =\n          parseInt(getPercentage(denominated(stake), denominated(cap))) >= 100;\n\n        if (remainder.isGreaterThan(available)) {\n          return {\n            balance: available.toFixed(),\n            limit: dustful,\n            maxed\n          };\n        } else {\n          return {\n            balance: available.toFixed(),\n            limit: remainder.gt(0) ? remainder.toFixed() : '0',\n            maxed\n          };\n        }\n      } else {\n        return {\n          balance: available.toFixed(),\n          limit: dustful,\n          maxed: false\n        };\n      }\n    }\n\n    return {\n      balance: '',\n      limit: ''\n    };\n  };\n\n  const getUserClaimableRewards = async (): Promise<void> => {\n    dispatch({\n      type: 'getUserClaimableRewards',\n      userClaimableRewards: {\n        status: 'loading',\n        data: null,\n        error: null\n      }\n    });\n\n    try {\n      const provider = new ProxyNetworkProvider(network.gatewayAddress);\n      const query = new Query({\n        address: new Address(network.delegationContract),\n        func: new ContractFunction('getClaimableRewards'),\n        args: [new AddressValue(new Address(address))]\n      });\n\n      const data = await provider.queryContract(query);\n      const [claimableRewards] = data.getReturnDataParts();\n\n      dispatch({\n        type: 'getUserClaimableRewards',\n        userClaimableRewards: {\n          status: 'loaded',\n          error: null,\n          data: claimableRewards\n            ? denominated(decodeBigNumber(claimableRewards).toFixed(), {\n                decimals: 4\n              })\n            : '0'\n        }\n      });\n    } catch (error) {\n      dispatch({\n        type: 'getUserClaimableRewards',\n        userClaimableRewards: {\n          status: 'error',\n          data: null,\n          error\n        }\n      });\n    }\n  };\n\n  const fetchClaimableRewards = () => {\n    if (!userClaimableRewards.data) {\n      getUserClaimableRewards();\n    }\n  };\n\n  const reFetchClaimableRewards = () => {\n    if (hasSuccessfulTransactions && successfulTransactionsArray.length > 0) {\n      getUserClaimableRewards();\n    }\n  };\n\n  useEffect(fetchClaimableRewards, [userClaimableRewards.data]);\n  useEffect(reFetchClaimableRewards, [\n    hasSuccessfulTransactions,\n    successfulTransactionsArray.length\n  ]);\n\n  useEffect(() => {\n    if (pending && !check) {\n      setCheck(true);\n\n      return () => {\n        setCheck(false);\n      };\n    }\n  }, [pending]);\n\n  return {\n    onDelegate,\n    onUndelegate,\n    onRedelegate,\n    onClaimRewards,\n    getStakingLimits\n  };\n};\n\nexport default useStakeData;\n","/Users/neville/Documents/Github/elrond-delegation/src/components/Stake/components/Undelegate/index.ts",[],"/Users/neville/Documents/Github/elrond-delegation/src/components/Stake/components/Delegate/index.ts",[],"/Users/neville/Documents/Github/elrond-delegation/src/helpers/useTransaction.ts",[],"/Users/neville/Documents/Github/elrond-delegation/src/components/Nodes/components/Add/index.ts",[],"/Users/neville/Documents/Github/elrond-delegation/src/components/Withdrawals/components/Withdrawal/index.ts",[],"/Users/neville/Documents/Github/elrond-delegation/src/components/Heading/components/Identity/index.ts",[],"/Users/neville/Documents/Github/elrond-delegation/src/helpers/getPercentage.ts",[],"/Users/neville/Documents/Github/elrond-delegation/src/components/Cards/components/ChangeDelegationCap/index.ts",[],"/Users/neville/Documents/Github/elrond-delegation/src/components/Cards/components/ChangeServiceFee/index.ts",[],"/Users/neville/Documents/Github/elrond-delegation/src/components/Toggles/components/Switch/index.ts",[],"/Users/neville/Documents/Github/elrond-delegation/src/components/Action/index.ts",[],"/Users/neville/Documents/Github/elrond-delegation/src/components/Stake/components/Undelegate/Undelegate.tsx",[],"/Users/neville/Documents/Github/elrond-delegation/src/components/Stake/components/Delegate/Delegate.tsx",[],"/Users/neville/Documents/Github/elrond-delegation/src/components/Nodes/components/Add/Add.tsx",[],"/Users/neville/Documents/Github/elrond-delegation/src/components/Withdrawals/components/Withdrawal/Withdrawal.tsx",["312","313"],"import React, { useState, useEffect } from 'react';\n\nimport { faMinus } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { useGetActiveTransactionsStatus } from '@multiversx/sdk-dapp/hooks/transactions/useGetActiveTransactionsStatus';\nimport axios from 'axios';\nimport classNames from 'classnames';\nimport moment from 'moment';\n\nimport { MultiversX } from 'assets/MultiversX';\nimport { network } from 'config';\nimport { UndelegateStakeListType } from 'context/state';\nimport useTransaction from 'helpers/useTransaction';\n\nimport styles from './styles.module.scss';\n\ninterface FormattersType {\n  [key: string]: any;\n  d: (string | number)[];\n  h: (string | number)[];\n  m: (string | number)[];\n  s: (string | number)[];\n}\n\nexport const Withdrawal = (props: UndelegateStakeListType) => {\n  const { value, timeLeft } = props;\n  const { pending } = useGetActiveTransactionsStatus();\n  const { sendTransaction } = useTransaction();\n\n  const [counter, setCounter] = useState<number>(timeLeft - moment().unix());\n  const [fiat, setFiat] = useState('');\n\n  const getTimeLeft = (): string => {\n    const duration = moment.duration(counter, 'seconds');\n    const formatters: FormattersType = {\n      d: [duration.asDays(), Math.floor(duration.asDays())],\n      h: [duration.asHours(), 'H'],\n      m: [duration.asMinutes(), 'm'],\n      s: [duration.asSeconds(), 's']\n    };\n\n    const format = Object.keys(formatters).reduce((total, key) => {\n      const [time, label] = formatters[key];\n\n      if (Math.floor(time) > 0) {\n        return total === ''\n          ? `${label}[${key}]`\n          : `${total} : ${label}[${key}]`;\n      }\n\n      return total;\n    }, '');\n\n    return moment\n      .utc(moment.duration(counter, 'seconds').asMilliseconds())\n      .format(format);\n  };\n\n  const onWithdraw = async (): Promise<void> => {\n    try {\n      await sendTransaction({\n        args: '',\n        type: 'withdraw',\n        value: '0'\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const fetchFiat = () => {\n    const source = axios.CancelToken.source();\n\n    const fetchData = async () => {\n      try {\n        const { data } = await axios.get(`${network.apiAddress}/economics`, {\n          cancelToken: source.token\n        });\n\n        const amount = parseFloat(value.replace(',', '')) * data.price;\n\n        setFiat(Number(amount.toFixed(2)).toLocaleString());\n      } catch (error) {\n        if (axios.isCancel(error)) {\n          return;\n        }\n      }\n    };\n\n    fetchData();\n\n    return () => {\n      setFiat('');\n      source.cancel();\n    };\n  };\n\n  const handleCounter = () => {\n    const interval = setInterval(() => setCounter((timer) => timer - 1), 1000);\n\n    return () => {\n      clearInterval(interval);\n      setCounter(timeLeft - moment().unix());\n    };\n  };\n\n  useEffect(handleCounter, []);\n  useEffect(fetchFiat, []);\n\n  return (\n    <div className={`${styles.withdrawal} withdrawal`}>\n      <div className={styles.left}>\n        <span className={styles.icon}>\n          <MultiversX />\n        </span>\n\n        <div className={styles.data}>\n          <span className={styles.value}>\n            {value} {network.egldLabel}\n          </span>\n\n          <span className={styles.amount}>${fiat}</span>\n        </div>\n      </div>\n      <div className={styles.right}>\n        {counter > 0 && (\n          <div className={styles.time}>\n            <span className={styles.date}>{getTimeLeft()}</span>\n            <span className={styles.label}>Wait Time Left</span>\n          </div>\n        )}\n\n        <button\n          onClick={onWithdraw}\n          className={classNames(styles.withdraw, {\n            [styles.disabled]: counter > 0 || pending\n          })}\n        >\n          <FontAwesomeIcon icon={faMinus} /> <span>Withdraw</span>\n        </button>\n      </div>\n\n      {counter > 0 && (\n        <div className={classNames(styles.time, styles.mobile)}>\n          <span className={styles.date}>{getTimeLeft()}</span>\n          <span className={styles.label}>Wait Time Left</span>\n        </div>\n      )}\n    </div>\n  );\n};\n","/Users/neville/Documents/Github/elrond-delegation/src/components/Heading/components/Identity/Identity.tsx",["314","315"],"import React, { useEffect } from 'react';\nimport {\n  ContractFunction,\n  Address,\n  Query,\n  decodeString\n} from '@multiversx/sdk-core';\nimport { useGetSuccessfulTransactions } from '@multiversx/sdk-dapp/hooks/transactions/useGetSuccessfulTransactions';\nimport { ProxyNetworkProvider } from '@multiversx/sdk-network-providers';\n\nimport classNames from 'classnames';\nimport { Formik, FormikProps } from 'formik';\nimport { object, string } from 'yup';\n\nimport { Submit } from 'components/Action';\nimport { network } from 'config';\n\nimport { useDispatch, useGlobalContext } from 'context';\nimport useTransaction from 'helpers/useTransaction';\n\nimport styles from './styles.module.scss';\n\ninterface FieldType {\n  [key: string]: any;\n  label: string;\n  name: string;\n}\n\ninterface PayloadType {\n  [key: string]: any;\n  website?: string;\n  keybase?: string;\n  name?: string;\n}\n\nexport const Identity = () => {\n  const { agencyMetaData } = useGlobalContext();\n  const { sendTransaction } = useTransaction();\n  const { hasSuccessfulTransactions, successfulTransactionsArray } =\n    useGetSuccessfulTransactions();\n\n  const dispatch = useDispatch();\n  const fields: FieldType[] = [\n    {\n      name: 'name',\n      label: 'Name'\n    },\n    {\n      name: 'website',\n      label: 'Website'\n    },\n    {\n      name: 'keybase',\n      label: 'Keybase'\n    }\n  ];\n\n  const validationSchema = object().shape({\n    name: string().required('Name required.'),\n    keybase: string().required('Keybase required.'),\n    website: string()\n      .required('Website required.')\n      .test('URL', 'URL is not valid!', (value: any) => {\n        try {\n          return value && !value.includes('#') && Boolean(new URL(value || ''));\n        } catch (error) {\n          return false;\n        }\n      })\n  });\n\n  const onSubmit = async (payload: PayloadType): Promise<void> => {\n    const { website, name, keybase }: PayloadType = Object.keys(payload).reduce(\n      (data, key) => ({\n        ...data,\n        [key]: Buffer.from(payload[key]).toString('hex')\n      }),\n      {}\n    );\n\n    try {\n      await sendTransaction({\n        args: `${name}@${website}@${keybase}`,\n        type: 'setMetaData',\n        value: '0'\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const getAgencyMetaData = async (): Promise<void> => {\n    dispatch({\n      type: 'getAgencyMetaData',\n      agencyMetaData: {\n        status: 'loading',\n        data: null,\n        error: null\n      }\n    });\n\n    try {\n      const provider = new ProxyNetworkProvider(network.gatewayAddress);\n      const query = new Query({\n        address: new Address(network.delegationContract),\n        func: new ContractFunction('getMetaData')\n      });\n\n      const data = await provider.queryContract(query);\n      const [name, website, keybase] = data\n        .getReturnDataParts()\n        .map(decodeString);\n\n      dispatch({\n        type: 'getAgencyMetaData',\n        agencyMetaData: {\n          status: 'loaded',\n          error: null,\n          data: {\n            name,\n            website,\n            keybase\n          }\n        }\n      });\n    } catch (error) {\n      dispatch({\n        type: 'getAgencyMetaData',\n        agencyMetaData: {\n          status: 'error',\n          data: null,\n          error\n        }\n      });\n    }\n  };\n\n  const fetchAgencyMetaData = () => {\n    if (!agencyMetaData.data) {\n      getAgencyMetaData();\n    }\n  };\n\n  const refetchAgencyMetaData = () => {\n    if (\n      hasSuccessfulTransactions &&\n      agencyMetaData.data &&\n      successfulTransactionsArray.length > 0\n    ) {\n      getAgencyMetaData();\n    }\n  };\n\n  useEffect(fetchAgencyMetaData, [agencyMetaData.data]);\n  useEffect(refetchAgencyMetaData, [\n    hasSuccessfulTransactions,\n    successfulTransactionsArray.length\n  ]);\n\n  return (\n    <Formik\n      validationSchema={validationSchema}\n      onSubmit={onSubmit}\n      enableReinitialize={true}\n      initialValues={\n        agencyMetaData.data || { name: '', website: '', keybase: '' }\n      }\n    >\n      {({\n        errors,\n        values,\n        touched,\n        handleChange,\n        handleBlur,\n        handleSubmit\n      }: FormikProps<PayloadType>) => (\n        <form onSubmit={handleSubmit} className={`${styles.identity} identity`}>\n          {fields.map((field: FieldType) => (\n            <div key={field.name} className={styles.field}>\n              <label htmlFor={field.name}>{field.label}</label>\n              <div className='input-group'>\n                <input\n                  type='text'\n                  name={field.name}\n                  value={values[field.name]}\n                  autoComplete='off'\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  className={classNames(styles.input, {\n                    [styles.invalid]: errors[field.name] && touched[field.name]\n                  })}\n                />\n\n                {errors[field.name] && touched[field.name] && (\n                  <span className={styles.error}>{errors[field.name]}</span>\n                )}\n              </div>\n            </div>\n          ))}\n\n          <Submit close='Cancel' submit='Save' />\n        </form>\n      )}\n    </Formik>\n  );\n};\n","/Users/neville/Documents/Github/elrond-delegation/src/components/Cards/components/ChangeDelegationCap/ChangeDelegationCap.tsx",[],"/Users/neville/Documents/Github/elrond-delegation/src/components/Cards/components/ChangeServiceFee/ChangeServiceFee.tsx",[],"/Users/neville/Documents/Github/elrond-delegation/src/components/Toggles/components/Switch/Switch.tsx",["316"],"import React, { useState, useEffect } from 'react';\nimport { useGetActiveTransactionsStatus } from '@multiversx/sdk-dapp/hooks/transactions/useGetActiveTransactionsStatus';\nimport classNames from 'classnames';\n\nimport { useGlobalContext } from 'context';\nimport useTransaction from 'helpers/useTransaction';\n\nimport styles from './styles.module.scss';\n\nexport interface SwitchPropsType {\n  transaction: string;\n  name: string;\n}\n\nexport const Switch = (props: SwitchPropsType) => {\n  const { transaction, name } = props;\n  const { contractDetails } = useGlobalContext();\n  const { sendTransaction } = useTransaction();\n  const { pending } = useGetActiveTransactionsStatus();\n\n  const [disabled, setDisabled] = useState(false);\n  const [checked, setChecked] = useState(\n    contractDetails.data ? contractDetails.data[name] === 'ON' : false\n  );\n\n  const onChange = (type: string): void => {\n    setDisabled(true);\n\n    try {\n      setTimeout(async (): Promise<void> => {\n        await sendTransaction({\n          args: Buffer.from(`${!checked}`).toString('hex'),\n          value: '0',\n          type\n        });\n\n        setDisabled(false);\n      }, 200);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const trackContractDetails = () => {\n    if (contractDetails.data) {\n      setChecked(contractDetails.data[name] === 'ON');\n    }\n  };\n\n  useEffect(trackContractDetails, [contractDetails.data]);\n\n  return (\n    <label\n      className={classNames(\n        styles.switch,\n        { [styles.disabled]: disabled || pending },\n        'switch'\n      )}\n    >\n      <input\n        onChange={() => onChange(transaction)}\n        type='checkbox'\n        name={name}\n        className={styles.input}\n        defaultChecked={checked}\n      />\n\n      <span\n        className={classNames(styles.slider, {\n          [styles.right]: checked,\n          [styles.disabled]: pending\n        })}\n      >\n        {['OFF', 'ON'].map((toggle) => (\n          <span\n            key={toggle}\n            className={classNames(styles.label, { [styles.active]: checked })}\n          >\n            {toggle}\n          </span>\n        ))}\n      </span>\n    </label>\n  );\n};\n","/Users/neville/Documents/Github/elrond-delegation/src/helpers/nominate.ts",[],"/Users/neville/Documents/Github/elrond-delegation/src/components/Action/Action.tsx",[],"/Users/neville/Documents/Github/elrond-delegation/src/components/Stake/helpers/delegationValidators.ts",[],"/Users/neville/Documents/Github/elrond-delegation/src/components/Nodes/components/Dropzone/index.ts",[],"/Users/neville/Documents/Github/elrond-delegation/src/components/Action/context/index.tsx",[],"/Users/neville/Documents/Github/elrond-delegation/src/components/Nodes/components/Dropzone/Dropzone.tsx",["317"],"import React, { useState, useEffect } from 'react';\n\nimport { faKey, faTimes } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { BLS } from '@multiversx/sdk-wallet';\nimport axios from 'axios';\nimport classNames from 'classnames';\nimport { useFormikContext, FormikProps } from 'formik';\nimport moment from 'moment';\nimport { useDropzone } from 'react-dropzone';\n\nimport { network } from 'config';\n\nimport decodeFile from './helpers';\n\nimport styles from './styles.module.scss';\nexport interface DropzoneFormType {\n  files: any[];\n}\n\nexport interface DropzonePayloadType {\n  key: string;\n  name: string;\n  signature: string;\n  pubKey: string;\n  value: Uint8Array[];\n  errors?: string[];\n}\n\nexport const Dropzone = () => {\n  const [data, setData] = useState<DropzonePayloadType[]>([]);\n  const { setFieldValue, values }: FormikProps<DropzoneFormType> =\n    useFormikContext();\n\n  const readFile = (file: any) =>\n    new Promise((resolve) => {\n      const fileReader: any = new FileReader();\n      const defaults = {\n        name: file.name,\n        key: `${file.name}-${moment().unix()}`\n      };\n\n      fileReader.onload = () => {\n        try {\n          const result = fileReader.result;\n          const contract = network.delegationContract;\n          const decoded = decodeFile(result, contract);\n\n          resolve({\n            ...decoded,\n            ...defaults\n          });\n        } catch (error) {\n          resolve(defaults);\n        }\n      };\n\n      fileReader.onError = () => {\n        resolve(defaults);\n      };\n\n      fileReader.readAsText(file);\n    });\n\n  const dropzone = useDropzone({\n    multiple: true,\n    accept: '.pem',\n    onDrop: async (files: any) => {\n      try {\n        await BLS.initIfNecessary();\n\n        const readers = files.map(readFile);\n        const items = await Promise.all(readers);\n\n        setData((previous: any) => [...previous, ...items]);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n  });\n\n  const properties = {\n    input: dropzone.getInputProps(),\n    root: dropzone.getRootProps({\n      className: classNames(\n        styles.dropzone,\n        { [styles.fileld]: values.files.length > 0 },\n        'dropzone'\n      ),\n      style: {\n        cursor: 'pointer'\n      }\n    })\n  };\n\n  const onRemove = (key: string) => {\n    const filter = (item: DropzonePayloadType) => item.key !== key;\n\n    setData((current: DropzonePayloadType[]) => current.filter(filter));\n    setFieldValue('files', values.files.filter(filter));\n  };\n\n  const setValue = () => {\n    const fetchNodes = async () => {\n      const value = await Promise.all(\n        data.map(async (file: DropzonePayloadType, fileIndex: number) => {\n          const errors: string[] = [];\n          const duplicate = (item: DropzonePayloadType, itemIndex: number) =>\n            file.pubKey === item.pubKey && fileIndex > itemIndex;\n\n          if (!file.pubKey || file.pubKey.length !== 192) {\n            errors.push('length');\n          }\n\n          if (data.find(duplicate)) {\n            errors.push('unique');\n          }\n\n          try {\n            const existing = await axios.get(\n              `${network.apiAddress}/nodes/${file.pubKey}`\n            );\n\n            if (existing) {\n              errors.push('existing');\n            }\n          } catch (error) {\n            return {\n              ...file,\n              errors\n            };\n          }\n\n          return {\n            ...file,\n            errors\n          };\n        })\n      );\n\n      setFieldValue('files', value);\n    };\n\n    fetchNodes();\n\n    return () => setFieldValue('files', []);\n  };\n\n  useEffect(setValue, [data]);\n\n  return (\n    <div {...properties.root}>\n      <input {...properties.input} />\n\n      {values.files.length > 0 ? (\n        values.files.map((file: DropzonePayloadType) => (\n          <div\n            key={file.key}\n            className={classNames(styles.file, {\n              [styles.error]: file.errors && file.errors.length > 0\n            })}\n          >\n            <div className={styles.meta}>\n              <FontAwesomeIcon icon={faKey} />\n\n              <span className={styles.name}>{file.name}</span>\n            </div>\n\n            <span\n              onClick={(event) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onRemove(file.key);\n              }}\n            >\n              <FontAwesomeIcon icon={faTimes} />\n            </span>\n          </div>\n        ))\n      ) : (\n        <span className={styles.message}>\n          Drag and drop your PEM Files here, or Select Files\n        </span>\n      )}\n    </div>\n  );\n};\n","/Users/neville/Documents/Github/elrond-delegation/src/components/Nodes/components/Dropzone/helpers.ts",[],{"ruleId":"318","severity":1,"message":"319","line":99,"column":36,"nodeType":"320","endLine":99,"endColumn":45,"suggestions":"321"},{"ruleId":"318","severity":1,"message":"319","line":24,"column":29,"nodeType":"320","endLine":24,"endColumn":38,"suggestions":"322"},{"ruleId":"318","severity":1,"message":"323","line":38,"column":29,"nodeType":"320","endLine":38,"endColumn":60,"suggestions":"324"},{"ruleId":"318","severity":1,"message":"319","line":12,"column":29,"nodeType":"320","endLine":12,"endColumn":38,"suggestions":"325"},{"ruleId":"318","severity":1,"message":"326","line":231,"column":32,"nodeType":"320","endLine":231,"endColumn":34,"suggestions":"327"},{"ruleId":"318","severity":1,"message":"328","line":236,"column":6,"nodeType":"320","endLine":236,"endColumn":69,"suggestions":"329"},{"ruleId":"318","severity":1,"message":"330","line":209,"column":6,"nodeType":"320","endLine":209,"endColumn":48,"suggestions":"331"},{"ruleId":"318","severity":1,"message":"332","line":260,"column":6,"nodeType":"320","endLine":260,"endColumn":51,"suggestions":"333"},{"ruleId":"318","severity":1,"message":"334","line":374,"column":31,"nodeType":"320","endLine":374,"endColumn":49,"suggestions":"335"},{"ruleId":"318","severity":1,"message":"336","line":375,"column":33,"nodeType":"320","endLine":375,"endColumn":53,"suggestions":"337"},{"ruleId":"318","severity":1,"message":"338","line":376,"column":37,"nodeType":"320","endLine":376,"endColumn":61,"suggestions":"339"},{"ruleId":"340","severity":1,"message":"341","line":92,"column":17,"nodeType":"342","messageId":"343","endLine":92,"endColumn":60},{"ruleId":"318","severity":1,"message":"344","line":152,"column":40,"nodeType":"320","endLine":152,"endColumn":67,"suggestions":"345"},{"ruleId":"318","severity":1,"message":"346","line":153,"column":42,"nodeType":"320","endLine":156,"endColumn":4,"suggestions":"347"},{"ruleId":"318","severity":1,"message":"348","line":137,"column":5,"nodeType":"320","endLine":137,"endColumn":7,"suggestions":"349"},{"ruleId":"318","severity":1,"message":"350","line":200,"column":5,"nodeType":"320","endLine":200,"endColumn":7,"suggestions":"351"},{"ruleId":"318","severity":1,"message":"352","line":260,"column":23,"nodeType":"320","endLine":260,"endColumn":59,"suggestions":"353"},{"ruleId":"318","severity":1,"message":"354","line":261,"column":27,"nodeType":"320","endLine":264,"endColumn":4,"suggestions":"355"},{"ruleId":"318","severity":1,"message":"356","line":202,"column":36,"nodeType":"320","endLine":202,"endColumn":63,"suggestions":"357"},{"ruleId":"318","severity":1,"message":"356","line":203,"column":38,"nodeType":"320","endLine":206,"endColumn":4,"suggestions":"358"},{"ruleId":"318","severity":1,"message":"359","line":216,"column":6,"nodeType":"320","endLine":216,"endColumn":15,"suggestions":"360"},{"ruleId":"318","severity":1,"message":"361","line":107,"column":28,"nodeType":"320","endLine":107,"endColumn":30,"suggestions":"362"},{"ruleId":"318","severity":1,"message":"363","line":108,"column":24,"nodeType":"320","endLine":108,"endColumn":26,"suggestions":"364"},{"ruleId":"318","severity":1,"message":"365","line":154,"column":34,"nodeType":"320","endLine":154,"endColumn":55,"suggestions":"366"},{"ruleId":"318","severity":1,"message":"367","line":155,"column":36,"nodeType":"320","endLine":158,"endColumn":4,"suggestions":"368"},{"ruleId":"318","severity":1,"message":"369","line":50,"column":35,"nodeType":"320","endLine":50,"endColumn":57,"suggestions":"370"},{"ruleId":"318","severity":1,"message":"371","line":149,"column":23,"nodeType":"320","endLine":149,"endColumn":29,"suggestions":"372"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.","ArrayExpression",["373"],["374"],"React Hook useEffect has missing dependencies: 'contractDetails.status' and 'navigate'. Either include them or remove the dependency array.",["375"],["376"],"React Hook useEffect has missing dependencies: 'criticalFetches' and 'dispatch'. Either include them or remove the dependency array.",["377"],"React Hook useEffect has a missing dependency: 'fetchCriticalData'. Either include it or remove the dependency array.",["378"],"React Hook useCallback has a missing dependency: 'totalActiveStake.status'. Either include it or remove the dependency array.",["379"],"React Hook useCallback has missing dependencies: 'contractDetails.status' and 'totalActiveStake.status'. Either include them or remove the dependency array.",["380"],"React Hook useEffect has a missing dependency: 'getUsersNumber'. Either include it or remove the dependency array.",["381"],"React Hook useEffect has a missing dependency: 'getNetworkStatus'. Either include it or remove the dependency array.",["382"],"React Hook useEffect has a missing dependency: 'getTotalNetworkStake'. Either include it or remove the dependency array.",["383"],"no-self-compare","Comparing to itself is potentially pointless.","BinaryExpression","comparingToSelf","React Hook useEffect has a missing dependency: 'getUndelegatedStakeList'. Either include it or remove the dependency array.",["384"],"React Hook useEffect has missing dependencies: 'getUndelegatedStakeList' and 'undelegatedStakeList.data'. Either include them or remove the dependency array.",["385"],"React Hook useCallback has a missing dependency: 'sendTransaction'. Either include it or remove the dependency array.",["386"],"React Hook useCallback has a missing dependency: 'fetchQueue'. Either include it or remove the dependency array.",["387"],"React Hook useEffect has missing dependencies: 'assignQueue' and 'calculateNodes'. Either include them or remove the dependency array.",["388"],"React Hook useEffect has missing dependencies: 'getNodes' and 'nodesNumber.data'. Either include them or remove the dependency array.",["389"],"React Hook useEffect has a missing dependency: 'getUserClaimableRewards'. Either include it or remove the dependency array.",["390"],["391"],"React Hook useEffect has a missing dependency: 'check'. Either include it or remove the dependency array.",["392"],"React Hook useEffect has a missing dependency: 'timeLeft'. Either include it or remove the dependency array.",["393"],"React Hook useEffect has a missing dependency: 'value'. Either include it or remove the dependency array.",["394"],"React Hook useEffect has a missing dependency: 'getAgencyMetaData'. Either include it or remove the dependency array.",["395"],"React Hook useEffect has missing dependencies: 'agencyMetaData.data' and 'getAgencyMetaData'. Either include them or remove the dependency array.",["396"],"React Hook useEffect has a missing dependency: 'name'. Either include it or remove the dependency array.",["397"],"React Hook useEffect has a missing dependency: 'setFieldValue'. Either include it or remove the dependency array.",["398"],{"desc":"399","fix":"400"},{"desc":"399","fix":"401"},{"desc":"402","fix":"403"},{"desc":"399","fix":"404"},{"desc":"405","fix":"406"},{"desc":"407","fix":"408"},{"desc":"409","fix":"410"},{"desc":"411","fix":"412"},{"desc":"413","fix":"414"},{"desc":"415","fix":"416"},{"desc":"417","fix":"418"},{"desc":"419","fix":"420"},{"desc":"421","fix":"422"},{"desc":"423","fix":"424"},{"desc":"425","fix":"426"},{"desc":"427","fix":"428"},{"desc":"429","fix":"430"},{"desc":"431","fix":"432"},{"desc":"433","fix":"434"},{"desc":"435","fix":"436"},{"desc":"437","fix":"438"},{"desc":"439","fix":"440"},{"desc":"441","fix":"442"},{"desc":"443","fix":"444"},{"desc":"445","fix":"446"},{"desc":"447","fix":"448"},"Update the dependencies array to be: [address, navigate]",{"range":"449","text":"450"},{"range":"451","text":"450"},"Update the dependencies array to be: [address, contractDetails.data, contractDetails.status, navigate]",{"range":"452","text":"453"},{"range":"454","text":"450"},"Update the dependencies array to be: [criticalFetches, dispatch]",{"range":"455","text":"456"},"Update the dependencies array to be: [fetchCriticalData, hasSuccessfulTransactions, successfulTransactionsArray.length]",{"range":"457","text":"458"},"Update the dependencies array to be: [totalNetworkStake.data, totalNetworkStake.status, totalActiveStake.data, totalActiveStake.status]",{"range":"459","text":"460"},"Update the dependencies array to be: [contractDetails.data, contractDetails.status, totalActiveStake.data, totalActiveStake.status]",{"range":"461","text":"462"},"Update the dependencies array to be: [getUsersNumber, usersNumber.data]",{"range":"463","text":"464"},"Update the dependencies array to be: [getNetworkStatus, networkStatus.data]",{"range":"465","text":"466"},"Update the dependencies array to be: [getTotalNetworkStake, totalNetworkStake.data]",{"range":"467","text":"468"},"Update the dependencies array to be: [getUndelegatedStakeList, undelegatedStakeList.data]",{"range":"469","text":"470"},"Update the dependencies array to be: [getUndelegatedStakeList, hasSuccessfulTransactions, successfulTransactionsArray.length, undelegatedStakeList.data]",{"range":"471","text":"472"},"Update the dependencies array to be: [sendTransaction]",{"range":"473","text":"474"},"Update the dependencies array to be: [fetchQueue]",{"range":"475","text":"476"},"Update the dependencies array to be: [assignQueue, calculateNodes, nodesNumber.data, nodesStates.data]",{"range":"477","text":"478"},"Update the dependencies array to be: [getNodes, hasSuccessfulTransactions, nodesNumber.data, successfulTransactionsArray.length]",{"range":"479","text":"480"},"Update the dependencies array to be: [getUserClaimableRewards, userClaimableRewards.data]",{"range":"481","text":"482"},"Update the dependencies array to be: [getUserClaimableRewards, hasSuccessfulTransactions, successfulTransactionsArray.length]",{"range":"483","text":"484"},"Update the dependencies array to be: [check, pending]",{"range":"485","text":"486"},"Update the dependencies array to be: [timeLeft]",{"range":"487","text":"488"},"Update the dependencies array to be: [value]",{"range":"489","text":"490"},"Update the dependencies array to be: [agencyMetaData.data, getAgencyMetaData]",{"range":"491","text":"492"},"Update the dependencies array to be: [agencyMetaData.data, getAgencyMetaData, hasSuccessfulTransactions, successfulTransactionsArray.length]",{"range":"493","text":"494"},"Update the dependencies array to be: [contractDetails.data, name]",{"range":"495","text":"496"},"Update the dependencies array to be: [data, setFieldValue]",{"range":"497","text":"498"},[3479,3488],"[address, navigate]",[888,897],[1198,1229],"[address, contractDetails.data, contractDetails.status, navigate]",[405,414],[6821,6823],"[criticalFetches, dispatch]",[6963,7026],"[fetchCriticalData, hasSuccessfulTransactions, successfulTransactionsArray.length]",[5123,5165],"[totalNetworkStake.data, totalNetworkStake.status, totalActiveStake.data, totalActiveStake.status]",[6640,6685],"[contractDetails.data, contractDetails.status, totalActiveStake.data, totalActiveStake.status]",[9564,9582],"[getUsersNumber, usersNumber.data]",[9617,9637],"[getNetworkStatus, networkStatus.data]",[9676,9700],"[getTotalNetworkStake, totalNetworkStake.data]",[4549,4576],"[getUndelegatedStakeList, undelegatedStakeList.data]",[4620,4695],"[getUndelegatedStakeList, hasSuccessfulTransactions, successfulTransactionsArray.length, undelegatedStakeList.data]",[3112,3114],"[sendTransaction]",[4922,4924],"[fetchQueue]",[6530,6566],"[assignQueue, calculateNodes, nodesNumber.data, nodesStates.data]",[6595,6670],"[getNodes, hasSuccessfulTransactions, nodesNumber.data, successfulTransactionsArray.length]",[5684,5711],"[getUserClaimableRewards, userClaimableRewards.data]",[5751,5826],"[getUserClaimableRewards, hasSuccessfulTransactions, successfulTransactionsArray.length]",[5968,5977],"[check, pending]",[2890,2892],"[timeLeft]",[2918,2920],"[value]",[3649,3670],"[agencyMetaData.data, getAgencyMetaData]",[3708,3783],"[agencyMetaData.data, getAgencyMetaData, hasSuccessfulTransactions, successfulTransactionsArray.length]",[1390,1412],"[contractDetails.data, name]",[3690,3696],"[data, setFieldValue]"]