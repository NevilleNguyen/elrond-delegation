{"ast":null,"code":"import _objectSpread from\"/Users/neville/Documents/Github/elrond-delegation/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{decimals as defaultDecimals,denomination as defaultDenomination}from'config';function format(big,denomination,decimals,showLastNonZeroDecimal,addCommas){showLastNonZeroDecimal=typeof showLastNonZeroDecimal!=='undefined'?showLastNonZeroDecimal:false;var array=big.toString().split('');if(denomination!==0){// make sure we have enough characters\nwhile(array.length<denomination+1){array.unshift('0');}// add our dot\narray.splice(array.length-denomination,0,'.');// make sure there are enough decimals after the dot\nwhile(array.length-array.indexOf('.')<=decimals){array.push('0');}if(showLastNonZeroDecimal){var nonZeroDigitIndex=0;for(var i=array.length-1;i>0;i--){if(array[i]!=='0'){nonZeroDigitIndex=i+1;break;}}var decimalsIndex=array.indexOf('.')+decimals+1;var sliceIndex=Math.max(decimalsIndex,nonZeroDigitIndex);array=array.slice(0,sliceIndex);}else{// trim unnecessary characters after the dot\narray=array.slice(0,array.indexOf('.')+decimals+1);}}if(addCommas){// add comas every 3 characters\narray=array.reverse();var reference=denomination?array.length-array.indexOf('.')-1:array.length;var count=Math.floor(reference/3);for(var _i=1;_i<=count;_i++){var position=array.indexOf('.')+3*_i+_i;if(position!==array.length){array.splice(position,0,',');}}array=array.reverse();}var allDecimalsZero=array.slice(array.indexOf('.')+1).every(function(digit){return digit.toString()==='0';});var string=array.join('');if(allDecimalsZero){return string.split('.')[0];}return decimals===0?string.split('.').join(''):string;}export default function denominate(_ref){var input=_ref.input,denomination=_ref.denomination,decimals=_ref.decimals,_ref$showLastNonZeroD=_ref.showLastNonZeroDecimal,showLastNonZeroDecimal=_ref$showLastNonZeroD===void 0?false:_ref$showLastNonZeroD,_ref$addCommas=_ref.addCommas,addCommas=_ref$addCommas===void 0?true:_ref$addCommas;if(input==='...'){return input;}if(input===''||input==='0'||input===undefined){input='0';}return format(input,denomination,decimals,showLastNonZeroDecimal,addCommas);}export var denominated=function denominated(input,parameters){return denominate(_objectSpread({input:input,denomination:defaultDenomination,decimals:defaultDecimals},parameters));};","map":{"version":3,"names":["decimals","defaultDecimals","denomination","defaultDenomination","format","big","showLastNonZeroDecimal","addCommas","array","toString","split","length","unshift","splice","indexOf","push","nonZeroDigitIndex","i","decimalsIndex","sliceIndex","Math","max","slice","reverse","reference","count","floor","position","allDecimalsZero","every","digit","string","join","denominate","_ref","input","_ref$showLastNonZeroD","_ref$addCommas","undefined","denominated","parameters","_objectSpread"],"sources":["/Users/neville/Documents/Github/elrond-delegation/src/helpers/denominate.ts"],"sourcesContent":["import {\n  decimals as defaultDecimals,\n  denomination as defaultDenomination\n} from 'config';\n\nfunction format(\n  big: string,\n  denomination: number,\n  decimals: number,\n  showLastNonZeroDecimal: boolean,\n  addCommas: boolean\n) {\n  showLastNonZeroDecimal =\n    typeof showLastNonZeroDecimal !== 'undefined'\n      ? showLastNonZeroDecimal\n      : false;\n  let array = big.toString().split('');\n  if (denomination !== 0) {\n    // make sure we have enough characters\n    while (array.length < denomination + 1) {\n      array.unshift('0');\n    }\n    // add our dot\n    array.splice(array.length - denomination, 0, '.');\n    // make sure there are enough decimals after the dot\n    while (array.length - array.indexOf('.') <= decimals) {\n      array.push('0');\n    }\n\n    if (showLastNonZeroDecimal) {\n      let nonZeroDigitIndex = 0;\n      for (let i = array.length - 1; i > 0; i--) {\n        if (array[i] !== '0') {\n          nonZeroDigitIndex = i + 1;\n          break;\n        }\n      }\n      const decimalsIndex = array.indexOf('.') + decimals + 1;\n      const sliceIndex = Math.max(decimalsIndex, nonZeroDigitIndex);\n      array = array.slice(0, sliceIndex);\n    } else {\n      // trim unnecessary characters after the dot\n      array = array.slice(0, array.indexOf('.') + decimals + 1);\n    }\n  }\n  if (addCommas) {\n    // add comas every 3 characters\n    array = array.reverse();\n    const reference = denomination\n      ? array.length - array.indexOf('.') - 1\n      : array.length;\n    const count = Math.floor(reference / 3);\n    for (let i = 1; i <= count; i++) {\n      const position = array.indexOf('.') + 3 * i + i;\n      if (position !== array.length) {\n        array.splice(position, 0, ',');\n      }\n    }\n    array = array.reverse();\n  }\n\n  const allDecimalsZero = array\n    .slice(array.indexOf('.') + 1)\n    .every((digit) => digit.toString() === '0');\n\n  const string = array.join('');\n\n  if (allDecimalsZero) {\n    return string.split('.')[0];\n  }\n\n  return decimals === 0 ? string.split('.').join('') : string;\n}\n\ninterface DenominateType {\n  input: string;\n  denomination: number;\n  decimals: number;\n  showLastNonZeroDecimal?: boolean;\n  addCommas?: boolean;\n}\n\nexport default function denominate({\n  input,\n  denomination,\n  decimals,\n  showLastNonZeroDecimal = false,\n  addCommas = true\n}: DenominateType): string {\n  if (input === '...') {\n    return input;\n  }\n  if (input === '' || input === '0' || input === undefined) {\n    input = '0';\n  }\n  return format(\n    input,\n    denomination,\n    decimals,\n    showLastNonZeroDecimal,\n    addCommas\n  );\n}\n\ninterface DenominatedType {\n  denomination?: number;\n  decimals?: number;\n  showLastNonZeroDecimal?: boolean;\n  addCommas?: boolean;\n}\n\nexport const denominated = (\n  input: string,\n  parameters?: DenominatedType\n): string =>\n  denominate({\n    input,\n    denomination: defaultDenomination,\n    decimals: defaultDecimals,\n    ...parameters\n  });\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}