{"ast":null,"code":"import _slicedToArray from \"/Users/neville/Documents/Github/elrond-delegation/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { m as P } from \"./chunk-HBP5N4FR.js\";\nP();\nfunction h(e, t) {\n  if (!e) {\n    typeof console != \"undefined\" && console.warn(t);\n    try {\n      throw new Error(t);\n    } catch (n) {}\n  }\n}\nfunction $(e, t) {\n  typeof e == \"string\" && (e = {\n    path: e,\n    caseSensitive: !1,\n    end: !0\n  });\n  var _o = o(e.path, e.caseSensitive, e.end),\n    _o2 = _slicedToArray(_o, 2),\n    n = _o2[0],\n    r = _o2[1],\n    a = t.match(n);\n  if (!a) return null;\n  var s = a[0],\n    g = s.replace(/(.)\\/+$/, \"$1\"),\n    i = a.slice(1);\n  return {\n    params: r.reduce(function (m, l, c) {\n      if (l === \"*\") {\n        var d = i[c] || \"\";\n        g = s.slice(0, s.length - d.length).replace(/(.)\\/+$/, \"$1\");\n      }\n      return m[l] = u(i[c] || \"\", l), m;\n    }, {}),\n    pathname: s,\n    pathnameBase: g,\n    pattern: e\n  };\n}\nfunction o(e) {\n  var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !1;\n  var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : !0;\n  h(e === \"*\" || !e.endsWith(\"*\") || e.endsWith(\"/*\"), \"Route path \\\"\".concat(e, \"\\\" will be treated as if it were \\\"\").concat(e.replace(/\\*$/, \"/*\"), \"\\\" because the `*` character must always follow a `/` in the pattern. To get rid of this warning, please change the route path to \\\"\").concat(e.replace(/\\*$/, \"/*\"), \"\\\".\"));\n  var r = [],\n    a = \"^\" + e.replace(/\\/*\\*?$/, \"\").replace(/^\\/*/, \"/\").replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\").replace(/:(\\w+)/g, function (g, i) {\n      return r.push(i), \"([^\\\\/]+)\";\n    });\n  return e.endsWith(\"*\") ? (r.push(\"*\"), a += e === \"*\" || e === \"/*\" ? \"(.*)$\" : \"(?:\\\\/(.+)|\\\\/*)$\") : a += n ? \"\\\\/*$\" : \"(?:(?=[.~-]|%[0-9A-F]{2})|\\\\b|\\\\/|$)\", [new RegExp(a, t ? void 0 : \"i\"), r];\n}\nfunction u(e, t) {\n  try {\n    return decodeURIComponent(e);\n  } catch (n) {\n    return h(!1, \"The value for the URL param \\\"\".concat(t, \"\\\" will not be decoded because the string \\\"\").concat(e, \"\\\" is a malformed URL segment. This is probably due to a bad percent encoding (\").concat(n, \").\")), e;\n  }\n}\nexport { $ as a };","map":{"version":3,"names":["m","P","h","e","t","console","warn","Error","n","$","path","caseSensitive","end","_o","o","_o2","_slicedToArray","r","a","match","s","g","replace","i","slice","params","reduce","l","c","d","length","u","pathname","pathnameBase","pattern","arguments","undefined","endsWith","concat","push","RegExp","decodeURIComponent"],"sources":["/Users/neville/Documents/Github/elrond-delegation/node_modules/@multiversx/sdk-dapp/__chunks__/chunk-VWIO5HEC.js"],"sourcesContent":["import{m as P}from\"./chunk-HBP5N4FR.js\";P();function h(e,t){if(!e){typeof console!=\"undefined\"&&console.warn(t);try{throw new Error(t)}catch(n){}}}function $(e,t){typeof e==\"string\"&&(e={path:e,caseSensitive:!1,end:!0});let[n,r]=o(e.path,e.caseSensitive,e.end),a=t.match(n);if(!a)return null;let s=a[0],g=s.replace(/(.)\\/+$/,\"$1\"),i=a.slice(1);return{params:r.reduce((m,l,c)=>{if(l===\"*\"){let d=i[c]||\"\";g=s.slice(0,s.length-d.length).replace(/(.)\\/+$/,\"$1\")}return m[l]=u(i[c]||\"\",l),m},{}),pathname:s,pathnameBase:g,pattern:e}}function o(e,t=!1,n=!0){h(e===\"*\"||!e.endsWith(\"*\")||e.endsWith(\"/*\"),`Route path \"${e}\" will be treated as if it were \"${e.replace(/\\*$/,\"/*\")}\" because the \\`*\\` character must always follow a \\`/\\` in the pattern. To get rid of this warning, please change the route path to \"${e.replace(/\\*$/,\"/*\")}\".`);let r=[],a=\"^\"+e.replace(/\\/*\\*?$/,\"\").replace(/^\\/*/,\"/\").replace(/[\\\\.*+^$?{}|()[\\]]/g,\"\\\\$&\").replace(/:(\\w+)/g,(g,i)=>(r.push(i),\"([^\\\\/]+)\"));return e.endsWith(\"*\")?(r.push(\"*\"),a+=e===\"*\"||e===\"/*\"?\"(.*)$\":\"(?:\\\\/(.+)|\\\\/*)$\"):a+=n?\"\\\\/*$\":\"(?:(?=[.~-]|%[0-9A-F]{2})|\\\\b|\\\\/|$)\",[new RegExp(a,t?void 0:\"i\"),r]}function u(e,t){try{return decodeURIComponent(e)}catch(n){return h(!1,`The value for the URL param \"${t}\" will not be decoded because the string \"${e}\" is a malformed URL segment. This is probably due to a bad percent encoding (${n}).`),e}}export{$ as a};\n//# sourceMappingURL=chunk-VWIO5HEC.js.map\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}