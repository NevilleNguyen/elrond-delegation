{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/neville/Documents/Github/elrond-delegation/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/neville/Documents/Github/elrond-delegation/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/Users/neville/Documents/Github/elrond-delegation/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/neville/Documents/Github/elrond-delegation/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.H256Value = exports.H256Type = void 0;\nvar types_1 = require(\"./types\");\nvar H256Type = /*#__PURE__*/function (_types_1$PrimitiveTyp) {\n  _inherits(H256Type, _types_1$PrimitiveTyp);\n  var _super = _createSuper(H256Type);\n  function H256Type() {\n    _classCallCheck(this, H256Type);\n    return _super.call(this, \"H256\");\n  }\n  _createClass(H256Type, [{\n    key: \"getClassName\",\n    value: function getClassName() {\n      return H256Type.ClassName;\n    }\n  }]);\n  return H256Type;\n}(types_1.PrimitiveType);\nexports.H256Type = H256Type;\nH256Type.ClassName = \"H256Type\";\nvar H256Value = /*#__PURE__*/function (_types_1$PrimitiveVal) {\n  _inherits(H256Value, _types_1$PrimitiveVal);\n  var _super2 = _createSuper(H256Value);\n  function H256Value(value) {\n    var _this;\n    _classCallCheck(this, H256Value);\n    _this = _super2.call(this, new H256Type());\n    _this.value = value;\n    return _this;\n  }\n  _createClass(H256Value, [{\n    key: \"getClassName\",\n    value: function getClassName() {\n      return H256Value.ClassName;\n    }\n    /**\n     * Returns whether two objects have the same value.\n     */\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      return this.value.equals(other.value);\n    }\n  }, {\n    key: \"valueOf\",\n    value: function valueOf() {\n      return this.value;\n    }\n  }]);\n  return H256Value;\n}(types_1.PrimitiveValue);\nexports.H256Value = H256Value;\nH256Value.ClassName = \"H256Value\";","map":{"version":3,"sources":["../../../src/smartcontracts/typesystem/h256.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,IAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;AAAwD,IAE3C,QAAS,0BAAA,qBAAA;EAAA,SAAA,CAAA,QAAA,EAAA,qBAAA;EAAA,IAAA,MAAA,GAAA,YAAA,CAAA,QAAA;EAGlB,SAAA,SAAA,EAAA;IAAA,eAAA,OAAA,QAAA;IAAA,OAAA,MAAA,CAAA,IAAA,OACU,MAAM;EAChB;EAAC,YAAA,CAAA,QAAA;IAAA,GAAA;IAAA,KAAA,EAED,SAAA,aAAA,EAAY;MACR,OAAO,QAAQ,CAAC,SAAS;IAC7B;EAAC;EAAA,OAAA,QAAA;AAAA,EATyB,OAAA,CAAA,aAAa;AAA3C,OAAA,CAAA,QAAA,GAAA,QAAA;AACW,QAAA,CAAA,SAAS,GAAG,UAAU;AAAC,IAWrB,SAAU,0BAAA,qBAAA;EAAA,SAAA,CAAA,SAAA,EAAA,qBAAA;EAAA,IAAA,OAAA,GAAA,YAAA,CAAA,SAAA;EAInB,SAAA,UAAY,KAAa,EAAA;IAAA,IAAA,KAAA;IAAA,eAAA,OAAA,SAAA;IACrB,KAAA,GAAA,OAAA,CAAA,IAAA,OAAM,IAAI,QAAQ,EAAE;IACpB,KAAA,CAAK,KAAK,GAAG,KAAK;IAAC,OAAA,KAAA;EACvB;EAAC,YAAA,CAAA,SAAA;IAAA,GAAA;IAAA,KAAA,EAED,SAAA,aAAA,EAAY;MACR,OAAO,SAAS,CAAC,SAAS;IAC9B;IAEA;;AAEG;EAFH;IAAA,GAAA;IAAA,KAAA,EAGA,SAAA,OAAO,KAAgB,EAAA;MACnB,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC;IACzC;EAAC;IAAA,GAAA;IAAA,KAAA,EAED,SAAA,QAAA,EAAO;MACH,OAAO,IAAI,CAAC,KAAK;IACrB;EAAC;EAAA,OAAA,SAAA;AAAA,EAtB0B,OAAA,CAAA,cAAc;AAA7C,OAAA,CAAA,SAAA,GAAA,SAAA;AACW,SAAA,CAAA,SAAS,GAAG,WAAW","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.H256Value = exports.H256Type = void 0;\nconst types_1 = require(\"./types\");\nclass H256Type extends types_1.PrimitiveType {\n    constructor() {\n        super(\"H256\");\n    }\n    getClassName() {\n        return H256Type.ClassName;\n    }\n}\nexports.H256Type = H256Type;\nH256Type.ClassName = \"H256Type\";\nclass H256Value extends types_1.PrimitiveValue {\n    constructor(value) {\n        super(new H256Type());\n        this.value = value;\n    }\n    getClassName() {\n        return H256Value.ClassName;\n    }\n    /**\n     * Returns whether two objects have the same value.\n     */\n    equals(other) {\n        return this.value.equals(other.value);\n    }\n    valueOf() {\n        return this.value;\n    }\n}\nexports.H256Value = H256Value;\nH256Value.ClassName = \"H256Value\";\n//# sourceMappingURL=h256.js.map"]},"metadata":{},"sourceType":"script"}