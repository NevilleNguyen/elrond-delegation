{"ast":null,"code":"import _regeneratorRuntime from \"/Users/neville/Documents/Github/elrond-delegation/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/neville/Documents/Github/elrond-delegation/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Address, SmartContract, TokenPayment } from '@multiversx/sdk-core';\nimport { sendTransactions } from '@multiversx/sdk-dapp/services/transactions/sendTransactions';\nimport { network, delegationContractData } from 'config';\nvar useTransaction = function useTransaction() {\n  var sendTransaction = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(_ref) {\n      var args, value, type, address, contract, delegable, getFunctionName, getGasLimit, transaction;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            args = _ref.args, value = _ref.value, type = _ref.type;\n            address = new Address(network.delegationContract);\n            contract = new SmartContract({\n              address: address\n            });\n            delegable = delegationContractData.find(function (item) {\n              return item.name === type;\n            });\n            if (delegable) {\n              _context.next = 8;\n              break;\n            }\n            throw new Error('The contract for this action is not defined.');\n          case 8:\n            getFunctionName = function getFunctionName() {\n              return args === '' ? delegable.data : \"\".concat(delegable.data).concat(args);\n            };\n            getGasLimit = function getGasLimit() {\n              var nodeKeys = args.split('@').slice(1);\n              return delegable.data === 'addNodes' && args ? delegable.gasLimit * (nodeKeys.length / 2) : delegable.gasLimit;\n            };\n            transaction = {\n              value: TokenPayment.egldFromAmount(value),\n              data: getFunctionName(),\n              receiver: contract.getAddress().bech32(),\n              gasLimit: getGasLimit()\n            };\n            _context.next = 13;\n            return sendTransactions({\n              transactions: [transaction]\n            });\n          case 13:\n            return _context.abrupt(\"return\", _context.sent);\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return function sendTransaction(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  return {\n    sendTransaction: sendTransaction\n  };\n};\nexport default useTransaction;","map":{"version":3,"names":["Address","SmartContract","TokenPayment","sendTransactions","network","delegationContractData","useTransaction","sendTransaction","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_ref","args","value","type","address","contract","delegable","getFunctionName","getGasLimit","transaction","wrap","_callee$","_context","prev","next","delegationContract","find","item","name","Error","data","concat","nodeKeys","split","slice","gasLimit","length","egldFromAmount","receiver","getAddress","bech32","transactions","abrupt","sent","stop","_x","apply","arguments"],"sources":["/Users/neville/Documents/Github/elrond-delegation/src/helpers/useTransaction.ts"],"sourcesContent":["import { Address, SmartContract, TokenPayment } from '@multiversx/sdk-core';\nimport { sendTransactions } from '@multiversx/sdk-dapp/services/transactions/sendTransactions';\nimport {\n  network,\n  DelegationContractType,\n  delegationContractData\n} from 'config';\n\ninterface TransactionParametersType {\n  args: string;\n  value: string;\n  type: string;\n}\n\nconst useTransaction = () => {\n  const sendTransaction = async ({\n    args,\n    value,\n    type\n  }: TransactionParametersType) => {\n    const address = new Address(network.delegationContract);\n    const contract = new SmartContract({ address });\n    const delegable = delegationContractData.find(\n      (item: DelegationContractType) => item.name === type\n    );\n\n    if (!delegable) {\n      throw new Error('The contract for this action is not defined.');\n    } else {\n      const getFunctionName = (): string =>\n        args === '' ? delegable.data : `${delegable.data}${args}`;\n\n      const getGasLimit = (): number => {\n        const nodeKeys = args.split('@').slice(1);\n\n        return delegable.data === 'addNodes' && args\n          ? delegable.gasLimit * (nodeKeys.length / 2)\n          : delegable.gasLimit;\n      };\n\n      const transaction = {\n        value: TokenPayment.egldFromAmount(value),\n        data: getFunctionName(),\n        receiver: contract.getAddress().bech32(),\n        gasLimit: getGasLimit()\n      };\n\n      return await sendTransactions({\n        transactions: [transaction]\n      });\n    }\n  };\n\n  return {\n    sendTransaction\n  };\n};\n\nexport default useTransaction;\n"],"mappings":";;AAAA,SAASA,OAAO,EAAEC,aAAa,EAAEC,YAAY,QAAQ,sBAAsB;AAC3E,SAASC,gBAAgB,QAAQ,6DAA6D;AAC9F,SACEC,OAAO,EAEPC,sBAAsB,QACjB,QAAQ;AAQf,IAAMC,cAAc,GAAG,SAAjBA,cAAcA,CAAA,EAAS;EAC3B,IAAMC,eAAe;IAAA,IAAAC,KAAA,GAAAC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAG,SAAAC,QAAAC,IAAA;MAAA,IAAAC,IAAA,EAAAC,KAAA,EAAAC,IAAA,EAAAC,OAAA,EAAAC,QAAA,EAAAC,SAAA,EAAAC,eAAA,EAAAC,WAAA,EAAAC,WAAA;MAAA,OAAAZ,mBAAA,GAAAa,IAAA,UAAAC,SAAAC,QAAA;QAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;UAAA;YACtBb,IAAI,GAAAD,IAAA,CAAJC,IAAI,EACJC,KAAK,GAAAF,IAAA,CAALE,KAAK,EACLC,IAAI,GAAAH,IAAA,CAAJG,IAAI;YAEEC,OAAO,GAAG,IAAIjB,OAAO,CAACI,OAAO,CAACwB,kBAAkB,CAAC;YACjDV,QAAQ,GAAG,IAAIjB,aAAa,CAAC;cAAEgB,OAAO,EAAPA;YAAQ,CAAC,CAAC;YACzCE,SAAS,GAAGd,sBAAsB,CAACwB,IAAI,CAC3C,UAACC,IAA4B;cAAA,OAAKA,IAAI,CAACC,IAAI,KAAKf,IAAI;YAAA,EACrD;YAAA,IAEIG,SAAS;cAAAM,QAAA,CAAAE,IAAA;cAAA;YAAA;YAAA,MACN,IAAIK,KAAK,CAAC,8CAA8C,CAAC;UAAA;YAEzDZ,eAAe,GAAG,SAAlBA,eAAeA,CAAA;cAAA,OACnBN,IAAI,KAAK,EAAE,GAAGK,SAAS,CAACc,IAAI,MAAAC,MAAA,CAAMf,SAAS,CAACc,IAAI,EAAAC,MAAA,CAAGpB,IAAI,CAAE;YAAA;YAErDO,WAAW,GAAG,SAAdA,WAAWA,CAAA,EAAiB;cAChC,IAAMc,QAAQ,GAAGrB,IAAI,CAACsB,KAAK,CAAC,GAAG,CAAC,CAACC,KAAK,CAAC,CAAC,CAAC;cAEzC,OAAOlB,SAAS,CAACc,IAAI,KAAK,UAAU,IAAInB,IAAI,GACxCK,SAAS,CAACmB,QAAQ,IAAIH,QAAQ,CAACI,MAAM,GAAG,CAAC,CAAC,GAC1CpB,SAAS,CAACmB,QAAQ;YACxB,CAAC;YAEKhB,WAAW,GAAG;cAClBP,KAAK,EAAEb,YAAY,CAACsC,cAAc,CAACzB,KAAK,CAAC;cACzCkB,IAAI,EAAEb,eAAe,EAAE;cACvBqB,QAAQ,EAAEvB,QAAQ,CAACwB,UAAU,EAAE,CAACC,MAAM,EAAE;cACxCL,QAAQ,EAAEjB,WAAW;YACvB,CAAC;YAAAI,QAAA,CAAAE,IAAA;YAAA,OAEYxB,gBAAgB,CAAC;cAC5ByC,YAAY,EAAE,CAACtB,WAAW;YAC5B,CAAC,CAAC;UAAA;YAAA,OAAAG,QAAA,CAAAoB,MAAA,WAAApB,QAAA,CAAAqB,IAAA;UAAA;UAAA;YAAA,OAAArB,QAAA,CAAAsB,IAAA;QAAA;MAAA,GAAAnC,OAAA;IAAA,CAEL;IAAA,gBApCKL,eAAeA,CAAAyC,EAAA;MAAA,OAAAxC,KAAA,CAAAyC,KAAA,OAAAC,SAAA;IAAA;EAAA,GAoCpB;EAED,OAAO;IACL3C,eAAe,EAAfA;EACF,CAAC;AACH,CAAC;AAED,eAAeD,cAAc"},"metadata":{},"sourceType":"module"}