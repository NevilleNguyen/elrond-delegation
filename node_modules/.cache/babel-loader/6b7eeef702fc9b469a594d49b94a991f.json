{"ast":null,"code":"import _defineProperty from \"/Users/neville/Documents/Github/elrond-delegation/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _slicedToArray from \"/Users/neville/Documents/Github/elrond-delegation/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _regeneratorRuntime from \"/Users/neville/Documents/Github/elrond-delegation/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/neville/Documents/Github/elrond-delegation/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _s = $RefreshSig$();\nimport { useEffect } from 'react';\nimport { Query, ContractFunction, Address, decodeBigNumber, decodeUnsignedNumber, decodeString, AddressValue } from '@multiversx/sdk-core';\nimport { useGetAccountInfo } from '@multiversx/sdk-dapp/hooks/account/useGetAccountInfo';\nimport { useGetSuccessfulTransactions } from '@multiversx/sdk-dapp/hooks/transactions/useGetSuccessfulTransactions';\nimport { ProxyNetworkProvider } from '@multiversx/sdk-network-providers';\nimport { network, auctionContract } from 'config';\nimport { useDispatch } from 'context';\nvar useGlobalData = function useGlobalData() {\n  _s();\n  var _useGetAccountInfo = useGetAccountInfo(),\n    address = _useGetAccountInfo.address;\n  var _useGetSuccessfulTran = useGetSuccessfulTransactions(),\n    hasSuccessfulTransactions = _useGetSuccessfulTran.hasSuccessfulTransactions,\n    successfulTransactionsArray = _useGetSuccessfulTran.successfulTransactionsArray;\n  var dispatch = useDispatch();\n  var provider = new ProxyNetworkProvider(network.gatewayAddress);\n  var criticalFetches = {\n    getContractDetails: {\n      key: 'contractDetails',\n      handler: function () {\n        var _handler = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n          var query, data, response, ownerAddressIndex, serviceFeeIndex, delegationCapIndex, automaticActivationIndex, withDelegationCapIndex, redelegationCapIndex, ownerAddress, serviceFee, delegationCap, activationStatus, withDelegationCap, redelegationCap;\n          return _regeneratorRuntime().wrap(function _callee$(_context) {\n            while (1) switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                query = new Query({\n                  address: new Address(network.delegationContract),\n                  func: new ContractFunction('getContractConfig')\n                });\n                _context.next = 4;\n                return provider.queryContract(query);\n              case 4:\n                data = _context.sent;\n                response = data.getReturnDataParts();\n                ownerAddressIndex = 0;\n                serviceFeeIndex = 1;\n                delegationCapIndex = 2;\n                automaticActivationIndex = 4;\n                withDelegationCapIndex = 5;\n                redelegationCapIndex = 7;\n                ownerAddress = response[ownerAddressIndex];\n                serviceFee = response[serviceFeeIndex];\n                delegationCap = response[delegationCapIndex];\n                activationStatus = response[automaticActivationIndex];\n                withDelegationCap = response[withDelegationCapIndex];\n                redelegationCap = response[redelegationCapIndex];\n                return _context.abrupt(\"return\", {\n                  withDelegationCap: String(withDelegationCap),\n                  owner: new Address(address).hex() === ownerAddress.toString('hex'),\n                  delegationCap: decodeBigNumber(delegationCap).toFixed(),\n                  redelegationCap: decodeString(redelegationCap) === 'true' ? 'ON' : 'OFF',\n                  serviceFee: (decodeUnsignedNumber(serviceFee) / 100).toString() + '%',\n                  automaticActivation: decodeString(activationStatus) === 'true' ? 'ON' : 'OFF'\n                });\n              case 21:\n                _context.prev = 21;\n                _context.t0 = _context[\"catch\"](0);\n                return _context.abrupt(\"return\", Promise.reject(_context.t0));\n              case 24:\n              case \"end\":\n                return _context.stop();\n            }\n          }, _callee, null, [[0, 21]]);\n        }));\n        function handler() {\n          return _handler.apply(this, arguments);\n        }\n        return handler;\n      }()\n    },\n    getNodesNumber: {\n      key: 'nodesNumber',\n      handler: function () {\n        var _handler2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n          var query, data, response;\n          return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n            while (1) switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                query = new Query({\n                  address: new Address(auctionContract),\n                  func: new ContractFunction('getBlsKeysStatus'),\n                  args: [new AddressValue(new Address(network.delegationContract))]\n                });\n                _context2.next = 4;\n                return provider.queryContract(query);\n              case 4:\n                data = _context2.sent;\n                response = data.getReturnDataParts();\n                return _context2.abrupt(\"return\", response);\n              case 9:\n                _context2.prev = 9;\n                _context2.t0 = _context2[\"catch\"](0);\n                return _context2.abrupt(\"return\", Promise.reject(_context2.t0));\n              case 12:\n              case \"end\":\n                return _context2.stop();\n            }\n          }, _callee2, null, [[0, 9]]);\n        }));\n        function handler() {\n          return _handler2.apply(this, arguments);\n        }\n        return handler;\n      }()\n    },\n    getNodesStates: {\n      key: 'nodesStates',\n      handler: function () {\n        var _handler3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n          var query, data, response;\n          return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n            while (1) switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                query = new Query({\n                  address: new Address(network.delegationContract),\n                  func: new ContractFunction('getAllNodeStates')\n                });\n                _context3.next = 4;\n                return provider.queryContract(query);\n              case 4:\n                data = _context3.sent;\n                response = data.getReturnDataParts();\n                return _context3.abrupt(\"return\", response);\n              case 9:\n                _context3.prev = 9;\n                _context3.t0 = _context3[\"catch\"](0);\n                return _context3.abrupt(\"return\", Promise.reject(_context3.t0));\n              case 12:\n              case \"end\":\n                return _context3.stop();\n            }\n          }, _callee3, null, [[0, 9]]);\n        }));\n        function handler() {\n          return _handler3.apply(this, arguments);\n        }\n        return handler;\n      }()\n    },\n    getTotalActiveStake: {\n      key: 'totalActiveStake',\n      handler: function () {\n        var _handler4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n          var query, data, _data$getReturnDataPa, _data$getReturnDataPa2, totalNodes;\n          return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n            while (1) switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.prev = 0;\n                query = new Query({\n                  address: new Address(network.delegationContract),\n                  func: new ContractFunction('getTotalActiveStake')\n                });\n                _context4.next = 4;\n                return provider.queryContract(query);\n              case 4:\n                data = _context4.sent;\n                _data$getReturnDataPa = data.getReturnDataParts(), _data$getReturnDataPa2 = _slicedToArray(_data$getReturnDataPa, 1), totalNodes = _data$getReturnDataPa2[0];\n                return _context4.abrupt(\"return\", decodeBigNumber(totalNodes).toFixed());\n              case 9:\n                _context4.prev = 9;\n                _context4.t0 = _context4[\"catch\"](0);\n                return _context4.abrupt(\"return\", Promise.reject(_context4.t0));\n              case 12:\n              case \"end\":\n                return _context4.stop();\n            }\n          }, _callee4, null, [[0, 9]]);\n        }));\n        function handler() {\n          return _handler4.apply(this, arguments);\n        }\n        return handler;\n      }()\n    },\n    getUserActiveStake: {\n      key: 'userActiveStake',\n      handler: function () {\n        var _handler5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n          var query, data, _data$getReturnDataPa3, _data$getReturnDataPa4, userStake;\n          return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n            while (1) switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.prev = 0;\n                query = new Query({\n                  address: new Address(network.delegationContract),\n                  func: new ContractFunction('getUserActiveStake'),\n                  args: [new AddressValue(new Address(address))]\n                });\n                _context5.next = 4;\n                return provider.queryContract(query);\n              case 4:\n                data = _context5.sent;\n                _data$getReturnDataPa3 = data.getReturnDataParts(), _data$getReturnDataPa4 = _slicedToArray(_data$getReturnDataPa3, 1), userStake = _data$getReturnDataPa4[0];\n                if (userStake) {\n                  _context5.next = 8;\n                  break;\n                }\n                return _context5.abrupt(\"return\", '0');\n              case 8:\n                return _context5.abrupt(\"return\", decodeBigNumber(userStake).toFixed());\n              case 11:\n                _context5.prev = 11;\n                _context5.t0 = _context5[\"catch\"](0);\n                return _context5.abrupt(\"return\", Promise.reject(_context5.t0));\n              case 14:\n              case \"end\":\n                return _context5.stop();\n            }\n          }, _callee5, null, [[0, 11]]);\n        }));\n        function handler() {\n          return _handler5.apply(this, arguments);\n        }\n        return handler;\n      }()\n    },\n    getNetworkConfig: {\n      key: 'networkConfig',\n      handler: function () {\n        var _handler6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n          return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n            while (1) switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.prev = 0;\n                _context6.next = 3;\n                return provider.getNetworkConfig();\n              case 3:\n                return _context6.abrupt(\"return\", _context6.sent);\n              case 6:\n                _context6.prev = 6;\n                _context6.t0 = _context6[\"catch\"](0);\n                return _context6.abrupt(\"return\", Promise.reject(_context6.t0));\n              case 9:\n              case \"end\":\n                return _context6.stop();\n            }\n          }, _callee6, null, [[0, 6]]);\n        }));\n        function handler() {\n          return _handler6.apply(this, arguments);\n        }\n        return handler;\n      }()\n    }\n  };\n  var fetchCriticalData = function fetchCriticalData() {\n    var fetchData = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        var keys, data;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              keys = Object.keys(criticalFetches);\n              keys.forEach(function (key) {\n                dispatch(_defineProperty({\n                  type: key\n                }, criticalFetches[key].key, {\n                  status: 'loading',\n                  data: null,\n                  error: null\n                }));\n              });\n              _context7.next = 4;\n              return Promise.allSettled(keys.map(function (key) {\n                return criticalFetches[key].handler();\n              }));\n            case 4:\n              data = _context7.sent;\n              data.forEach(function (item, index) {\n                dispatch(_defineProperty({\n                  type: keys[index]\n                }, criticalFetches[keys[index]].key, {\n                  status: item.status === 'rejected' ? 'error' : 'loaded',\n                  error: item.reason || null,\n                  data: item.value || null\n                }));\n              });\n            case 6:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7);\n      }));\n      return function fetchData() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    fetchData();\n  };\n  useEffect(fetchCriticalData, []);\n  useEffect(function () {\n    if (hasSuccessfulTransactions && successfulTransactionsArray.length > 0) {\n      fetchCriticalData();\n    }\n  }, [hasSuccessfulTransactions, successfulTransactionsArray.length]);\n};\n_s(useGlobalData, \"EApCvwKZmoNrlWvB6U3MYacMtmI=\", false, function () {\n  return [useGetAccountInfo, useGetSuccessfulTransactions, useDispatch];\n});\nexport default useGlobalData;","map":{"version":3,"names":["useEffect","Query","ContractFunction","Address","decodeBigNumber","decodeUnsignedNumber","decodeString","AddressValue","useGetAccountInfo","useGetSuccessfulTransactions","ProxyNetworkProvider","network","auctionContract","useDispatch","useGlobalData","_s","_useGetAccountInfo","address","_useGetSuccessfulTran","hasSuccessfulTransactions","successfulTransactionsArray","dispatch","provider","gatewayAddress","criticalFetches","getContractDetails","key","handler","_handler","_asyncToGenerator","_regeneratorRuntime","mark","_callee","query","data","response","ownerAddressIndex","serviceFeeIndex","delegationCapIndex","automaticActivationIndex","withDelegationCapIndex","redelegationCapIndex","ownerAddress","serviceFee","delegationCap","activationStatus","withDelegationCap","redelegationCap","wrap","_callee$","_context","prev","next","delegationContract","func","queryContract","sent","getReturnDataParts","abrupt","String","owner","hex","toString","toFixed","automaticActivation","t0","Promise","reject","stop","apply","arguments","getNodesNumber","_handler2","_callee2","_callee2$","_context2","args","getNodesStates","_handler3","_callee3","_callee3$","_context3","getTotalActiveStake","_handler4","_callee4","_data$getReturnDataPa","_data$getReturnDataPa2","totalNodes","_callee4$","_context4","_slicedToArray","getUserActiveStake","_handler5","_callee5","_data$getReturnDataPa3","_data$getReturnDataPa4","userStake","_callee5$","_context5","getNetworkConfig","_handler6","_callee6","_callee6$","_context6","fetchCriticalData","fetchData","_ref","_callee7","keys","_callee7$","_context7","Object","forEach","_defineProperty","type","status","error","allSettled","map","item","index","reason","value","length"],"sources":["/Users/neville/Documents/Github/elrond-delegation/src/hooks/useGlobalData.ts"],"sourcesContent":["import { useEffect } from 'react';\n\nimport {\n  Query,\n  ContractFunction,\n  Address,\n  decodeBigNumber,\n  decodeUnsignedNumber,\n  decodeString,\n  AddressValue\n} from '@multiversx/sdk-core';\n\nimport { useGetAccountInfo } from '@multiversx/sdk-dapp/hooks/account/useGetAccountInfo';\nimport { useGetSuccessfulTransactions } from '@multiversx/sdk-dapp/hooks/transactions/useGetSuccessfulTransactions';\nimport { ProxyNetworkProvider } from '@multiversx/sdk-network-providers';\n\nimport { network, auctionContract } from 'config';\nimport { useDispatch } from 'context';\n\ninterface ContractDetailsType {\n  automaticActivation: string;\n  redelegationCap: string;\n  serviceFee: string;\n  delegationCap: string;\n  owner: boolean;\n  withDelegationCap: string;\n}\n\ninterface globalFetchesType {\n  [key: string]: any;\n  getContractDetails: {\n    key: string;\n    handler: () => Promise<ContractDetailsType | string>;\n  };\n  getNodesNumber: {\n    key: string;\n    handler: () => Promise<Buffer[] | string>;\n  };\n  getNodesStates: {\n    key: string;\n    handler: () => Promise<Buffer[] | string>;\n  };\n  getTotalActiveStake: {\n    key: string;\n    handler: () => Promise<string>;\n  };\n  getUserActiveStake: {\n    key: string;\n    handler: () => Promise<string>;\n  };\n  getNetworkConfig: {\n    key: string;\n    handler: () => Promise<any>;\n  };\n}\n\nconst useGlobalData = () => {\n  const { address } = useGetAccountInfo();\n  const { hasSuccessfulTransactions, successfulTransactionsArray } =\n    useGetSuccessfulTransactions();\n\n  const dispatch = useDispatch();\n  const provider = new ProxyNetworkProvider(network.gatewayAddress);\n  const criticalFetches: globalFetchesType = {\n    getContractDetails: {\n      key: 'contractDetails',\n      handler: async (): Promise<ContractDetailsType | string> => {\n        try {\n          const query = new Query({\n            address: new Address(network.delegationContract),\n            func: new ContractFunction('getContractConfig')\n          });\n\n          const data = await provider.queryContract(query);\n          const response = data.getReturnDataParts();\n\n          const ownerAddressIndex = 0;\n          const serviceFeeIndex = 1;\n          const delegationCapIndex = 2;\n          const automaticActivationIndex = 4;\n          const withDelegationCapIndex = 5;\n          const redelegationCapIndex = 7;\n\n          const ownerAddress = response[ownerAddressIndex];\n          const serviceFee = response[serviceFeeIndex];\n          const delegationCap = response[delegationCapIndex];\n          const activationStatus = response[automaticActivationIndex];\n          const withDelegationCap = response[withDelegationCapIndex];\n          const redelegationCap = response[redelegationCapIndex];\n\n          return {\n            withDelegationCap: String(withDelegationCap),\n            owner: new Address(address).hex() === ownerAddress.toString('hex'),\n            delegationCap: decodeBigNumber(delegationCap).toFixed(),\n            redelegationCap:\n              decodeString(redelegationCap) === 'true' ? 'ON' : 'OFF',\n            serviceFee:\n              (decodeUnsignedNumber(serviceFee) / 100).toString() + '%',\n            automaticActivation:\n              decodeString(activationStatus) === 'true' ? 'ON' : 'OFF'\n          };\n        } catch (error) {\n          return Promise.reject(error);\n        }\n      }\n    },\n    getNodesNumber: {\n      key: 'nodesNumber',\n      handler: async (): Promise<Buffer[] | string> => {\n        try {\n          const query = new Query({\n            address: new Address(auctionContract),\n            func: new ContractFunction('getBlsKeysStatus'),\n            args: [new AddressValue(new Address(network.delegationContract))]\n          });\n\n          const data = await provider.queryContract(query);\n          const response = data.getReturnDataParts();\n\n          return response;\n        } catch (error) {\n          return Promise.reject(error);\n        }\n      }\n    },\n    getNodesStates: {\n      key: 'nodesStates',\n      handler: async (): Promise<Buffer[] | string> => {\n        try {\n          const query = new Query({\n            address: new Address(network.delegationContract),\n            func: new ContractFunction('getAllNodeStates')\n          });\n\n          const data = await provider.queryContract(query);\n          const response = data.getReturnDataParts();\n\n          return response;\n        } catch (error) {\n          return Promise.reject(error);\n        }\n      }\n    },\n    getTotalActiveStake: {\n      key: 'totalActiveStake',\n      handler: async (): Promise<string> => {\n        try {\n          const query = new Query({\n            address: new Address(network.delegationContract),\n            func: new ContractFunction('getTotalActiveStake')\n          });\n\n          const data = await provider.queryContract(query);\n          const [totalNodes] = data.getReturnDataParts();\n\n          return decodeBigNumber(totalNodes).toFixed();\n        } catch (error) {\n          return Promise.reject(error);\n        }\n      }\n    },\n    getUserActiveStake: {\n      key: 'userActiveStake',\n      handler: async (): Promise<string> => {\n        try {\n          const query = new Query({\n            address: new Address(network.delegationContract),\n            func: new ContractFunction('getUserActiveStake'),\n            args: [new AddressValue(new Address(address))]\n          });\n\n          const data = await provider.queryContract(query);\n          const [userStake] = data.getReturnDataParts();\n\n          if (!userStake) {\n            return '0';\n          }\n\n          return decodeBigNumber(userStake).toFixed();\n        } catch (error) {\n          return Promise.reject(error);\n        }\n      }\n    },\n    getNetworkConfig: {\n      key: 'networkConfig',\n      handler: async (): Promise<any> => {\n        try {\n          return await provider.getNetworkConfig();\n        } catch (error) {\n          return Promise.reject(error);\n        }\n      }\n    }\n  };\n\n  const fetchCriticalData = (): void => {\n    const fetchData = async () => {\n      const keys = Object.keys(criticalFetches);\n\n      keys.forEach((key) => {\n        dispatch({\n          type: key,\n          [criticalFetches[key].key]: {\n            status: 'loading',\n            data: null,\n            error: null\n          }\n        });\n      });\n\n      const data = await Promise.allSettled(\n        keys.map((key: string) => criticalFetches[key].handler())\n      );\n\n      data.forEach((item: any, index: any) => {\n        dispatch({\n          type: keys[index],\n          [criticalFetches[keys[index]].key]: {\n            status: item.status === 'rejected' ? 'error' : 'loaded',\n            error: item.reason || null,\n            data: item.value || null\n          }\n        });\n      });\n    };\n\n    fetchData();\n  };\n\n  useEffect(fetchCriticalData, []);\n  useEffect(() => {\n    if (hasSuccessfulTransactions && successfulTransactionsArray.length > 0) {\n      fetchCriticalData();\n    }\n  }, [hasSuccessfulTransactions, successfulTransactionsArray.length]);\n};\n\nexport default useGlobalData;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}