{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/Users/neville/Documents/Github/elrond-delegation/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\nvar _classCallCheck = require(\"/Users/neville/Documents/Github/elrond-delegation/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/neville/Documents/Github/elrond-delegation/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/Users/neville/Documents/Github/elrond-delegation/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/neville/Documents/Github/elrond-delegation/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SHA2 = void 0;\nvar _assert_js_1 = require(\"./_assert.js\");\nvar utils_js_1 = require(\"./utils.js\");\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n  var _32n = BigInt(32);\n  var _u32_max = BigInt(0xffffffff);\n  var wh = Number(value >> _32n & _u32_max);\n  var wl = Number(value & _u32_max);\n  var h = isLE ? 4 : 0;\n  var l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nvar SHA2 = /*#__PURE__*/function (_utils_js_1$Hash) {\n  _inherits(SHA2, _utils_js_1$Hash);\n  var _super = _createSuper(SHA2);\n  function SHA2(blockLen, outputLen, padOffset, isLE) {\n    var _this;\n    _classCallCheck(this, SHA2);\n    _this = _super.call(this);\n    _this.blockLen = blockLen;\n    _this.outputLen = outputLen;\n    _this.padOffset = padOffset;\n    _this.isLE = isLE;\n    _this.finished = false;\n    _this.length = 0;\n    _this.pos = 0;\n    _this.destroyed = false;\n    _this.buffer = new Uint8Array(blockLen);\n    _this.view = (0, utils_js_1.createView)(_this.buffer);\n    return _this;\n  }\n  _createClass(SHA2, [{\n    key: \"update\",\n    value: function update(data) {\n      _assert_js_1.default.exists(this);\n      var view = this.view,\n        buffer = this.buffer,\n        blockLen = this.blockLen;\n      data = (0, utils_js_1.toBytes)(data);\n      var len = data.length;\n      for (var pos = 0; pos < len;) {\n        var take = Math.min(blockLen - this.pos, len - pos);\n        // Fast path: we have at least one block in input, cast it to view and process\n        if (take === blockLen) {\n          var dataView = (0, utils_js_1.createView)(data);\n          for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\n          continue;\n        }\n        buffer.set(data.subarray(pos, pos + take), this.pos);\n        this.pos += take;\n        pos += take;\n        if (this.pos === blockLen) {\n          this.process(view, 0);\n          this.pos = 0;\n        }\n      }\n      this.length += data.length;\n      this.roundClean();\n      return this;\n    }\n  }, {\n    key: \"digestInto\",\n    value: function digestInto(out) {\n      _assert_js_1.default.exists(this);\n      _assert_js_1.default.output(out, this);\n      this.finished = true;\n      // Padding\n      // We can avoid allocation of buffer for padding completely if it\n      // was previously not allocated here. But it won't change performance.\n      var buffer = this.buffer,\n        view = this.view,\n        blockLen = this.blockLen,\n        isLE = this.isLE;\n      var pos = this.pos;\n      // append the bit '1' to the message\n      buffer[pos++] = 128;\n      this.buffer.subarray(pos).fill(0);\n      // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n      if (this.padOffset > blockLen - pos) {\n        this.process(view, 0);\n        pos = 0;\n      }\n      // Pad until full block byte with zeros\n      for (var i = pos; i < blockLen; i++) buffer[i] = 0;\n      // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n      // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n      // So we just write lowest 64 bits of that value.\n      setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n      this.process(view, 0);\n      var oview = (0, utils_js_1.createView)(out);\n      var len = this.outputLen;\n      // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n      if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\n      var outLen = len / 4;\n      var state = this.get();\n      if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\n      for (var _i = 0; _i < outLen; _i++) oview.setUint32(4 * _i, state[_i], isLE);\n    }\n  }, {\n    key: \"digest\",\n    value: function digest() {\n      var buffer = this.buffer,\n        outputLen = this.outputLen;\n      this.digestInto(buffer);\n      var res = buffer.slice(0, outputLen);\n      this.destroy();\n      return res;\n    }\n  }, {\n    key: \"_cloneInto\",\n    value: function _cloneInto(to) {\n      var _to;\n      to || (to = new this.constructor());\n      (_to = to).set.apply(_to, _toConsumableArray(this.get()));\n      var blockLen = this.blockLen,\n        buffer = this.buffer,\n        length = this.length,\n        finished = this.finished,\n        destroyed = this.destroyed,\n        pos = this.pos;\n      to.length = length;\n      to.pos = pos;\n      to.finished = finished;\n      to.destroyed = destroyed;\n      if (length % blockLen) to.buffer.set(buffer);\n      return to;\n    }\n  }]);\n  return SHA2;\n}(utils_js_1.Hash);\nexports.SHA2 = SHA2;","map":{"version":3,"sources":["src/_sha2.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SHA2 = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nclass SHA2 extends utils_js_1.Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = (0, utils_js_1.createView)(this.buffer);\n    }\n    update(data) {\n        _assert_js_1.default.exists(this);\n        const { view, buffer, blockLen } = this;\n        data = (0, utils_js_1.toBytes)(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = (0, utils_js_1.createView)(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        _assert_js_1.default.exists(this);\n        _assert_js_1.default.output(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = (0, utils_js_1.createView)(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\nexports.SHA2 = SHA2;\n//# sourceMappingURL=_sha2.js.map"]},"metadata":{},"sourceType":"script"}