{"ast":null,"code":"var _inherits = require(\"/Users/neville/Documents/Github/elrond-delegation/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/neville/Documents/Github/elrond-delegation/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _classCallCheck = require(\"/Users/neville/Documents/Github/elrond-delegation/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/neville/Documents/Github/elrond-delegation/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _toConsumableArray = require(\"/Users/neville/Documents/Github/elrond-delegation/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\n(function (generator) {\n  if (typeof window === 'object') {\n    var _exports = {};\n    if (typeof module !== 'undefined' && module.exports) {\n      module.exports = generator(_exports, false);\n    } else {\n      window.bls = generator(_exports, false);\n    }\n  } else {\n    generator(exports, true);\n  }\n})(function (exports, isNodeJs) {\n  /* eslint-disable */\n  exports.BN254 = 0;\n  exports.BN381_1 = 1;\n  exports.BLS12_381 = 5;\n  exports.ethMode = false;\n  exports.ETH_MODE_DRAFT_05 = 1;\n  exports.ETH_MODE_DRAFT_06 = 2;\n  exports.ETH_MODE_DRAFT_07 = 3;\n  var setup = function setup(exports, curveType) {\n    var mod = exports.mod;\n    var MCLBN_FP_UNIT_SIZE = 6;\n    var MCLBN_FR_UNIT_SIZE = exports.ethMode ? 4 : 6;\n    var BLS_COMPILER_TIME_VAR_ADJ = exports.ethMode ? 200 : 0;\n    var MCLBN_COMPILED_TIME_VAR = MCLBN_FR_UNIT_SIZE * 10 + MCLBN_FP_UNIT_SIZE + BLS_COMPILER_TIME_VAR_ADJ;\n    var BLS_ID_SIZE = MCLBN_FR_UNIT_SIZE * 8;\n    var BLS_SECRETKEY_SIZE = MCLBN_FP_UNIT_SIZE * 8;\n    var BLS_PUBLICKEY_SIZE = BLS_SECRETKEY_SIZE * 3 * (exports.ethMode ? 1 : 2);\n    var BLS_SIGNATURE_SIZE = BLS_SECRETKEY_SIZE * 3 * (exports.ethMode ? 2 : 1);\n    var _malloc = function _malloc(size) {\n      return mod._blsMalloc(size);\n    };\n    var _free = function _free(pos) {\n      mod._blsFree(pos);\n    };\n    var ptrToAsciiStr = function ptrToAsciiStr(pos, n) {\n      var s = '';\n      for (var i = 0; i < n; i++) {\n        s += String.fromCharCode(mod.HEAP8[pos + i]);\n      }\n      return s;\n    };\n    var asciiStrToPtr = function asciiStrToPtr(pos, s) {\n      for (var i = 0; i < s.length; i++) {\n        mod.HEAP8[pos + i] = s.charCodeAt(i);\n      }\n    };\n    exports.toHex = function (a, start, n) {\n      var s = '';\n      for (var i = 0; i < n; i++) {\n        s += ('0' + a[start + i].toString(16)).slice(-2);\n      }\n      return s;\n    };\n    // Uint8Array to hex string\n    exports.toHexStr = function (a) {\n      return exports.toHex(a, 0, a.length);\n    };\n    // hex string to Uint8Array\n    exports.fromHexStr = function (s) {\n      if (s.length & 1) throw new Error('fromHexStr:length must be even ' + s.length);\n      var n = s.length / 2;\n      var a = new Uint8Array(n);\n      for (var i = 0; i < n; i++) {\n        a[i] = parseInt(s.slice(i * 2, i * 2 + 2), 16);\n      }\n      return a;\n    };\n    ///////////////////////////\n    var copyToUint32Array = function copyToUint32Array(a, pos) {\n      a.set(mod.HEAP32.subarray(pos / 4, pos / 4 + a.length));\n      //    for (let i = 0; i < a.length; i++) {\n      //      a[i] = mod.HEAP32[pos / 4 + i]\n      //    }\n    };\n\n    var copyFromUint32Array = function copyFromUint32Array(pos, a) {\n      mod.HEAP32.set(a, pos / 4);\n      //    for (let i = 0; i < a.length; i++) {\n      //      mod.HEAP32[pos / 4 + i] = a[i]\n      //    }\n    };\n    //////////////////////////////////\n    var _wrapGetStr = function _wrapGetStr(func) {\n      var returnAsStr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      return function (x) {\n        var ioMode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n        var maxBufSize = 3096;\n        var pos = _malloc(maxBufSize);\n        var n = func(pos, maxBufSize, x, ioMode);\n        if (n <= 0) {\n          throw new Error('err gen_str:' + x);\n        }\n        var s = null;\n        if (returnAsStr) {\n          s = ptrToAsciiStr(pos, n);\n        } else {\n          s = new Uint8Array(mod.HEAP8.subarray(pos, pos + n));\n        }\n        _free(pos);\n        return s;\n      };\n    };\n    var _wrapSerialize = function _wrapSerialize(func) {\n      return _wrapGetStr(func, false);\n    };\n    var _wrapDeserialize = function _wrapDeserialize(func) {\n      return function (x, buf) {\n        var pos = _malloc(buf.length);\n        mod.HEAP8.set(buf, pos);\n        var r = func(x, pos, buf.length);\n        _free(pos);\n        if (r === 0) throw new Error('err _wrapDeserialize', buf);\n      };\n    };\n    /*\n      argNum : n\n      func(x0, ..., x_(n-1), buf, ioMode)\n      => func(x0, ..., x_(n-1), pos, buf.length, ioMode)\n    */\n    var _wrapInput = function _wrapInput(func, argNum) {\n      var returnValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      return function () {\n        var args = Array.prototype.slice.call(arguments);\n        var buf = args[argNum];\n        var typeStr = Object.prototype.toString.apply(buf);\n        if (['[object String]', '[object Uint8Array]', '[object Array]'].indexOf(typeStr) < 0) {\n          throw new Error(\"err bad type:\\\"\".concat(typeStr, \"\\\". Use String or Uint8Array.\"));\n        }\n        var ioMode = args[argNum + 1]; // may undefined\n        var pos = _malloc(buf.length);\n        if (typeStr === '[object String]') {\n          asciiStrToPtr(pos, buf);\n        } else {\n          mod.HEAP8.set(buf, pos);\n        }\n        var r = func.apply(void 0, _toConsumableArray(args.slice(0, argNum)).concat([pos, buf.length, ioMode]));\n        _free(pos);\n        if (returnValue) return r;\n        if (r) throw new Error('err _wrapInput ' + buf);\n      };\n    };\n    var callSetter = function callSetter(func, a, p1, p2) {\n      var pos = _malloc(a.length * 4);\n      func(pos, p1, p2); // p1, p2 may be undefined\n      copyToUint32Array(a, pos);\n      _free(pos);\n    };\n    var callGetter = function callGetter(func, a, p1, p2) {\n      var pos = _malloc(a.length * 4);\n      mod.HEAP32.set(a, pos / 4);\n      var s = func(pos, p1, p2);\n      _free(pos);\n      return s;\n    };\n    var callShare = function callShare(func, a, size, vec, id) {\n      var pos = a._allocAndCopy();\n      var idPos = id._allocAndCopy();\n      var vecPos = _malloc(size * vec.length);\n      for (var i = 0; i < vec.length; i++) {\n        copyFromUint32Array(vecPos + size * i, vec[i].a_);\n      }\n      func(pos, vecPos, vec.length, idPos);\n      _free(vecPos);\n      _free(idPos);\n      a._saveAndFree(pos);\n    };\n    var callRecover = function callRecover(func, a, size, vec, idVec) {\n      var n = vec.length;\n      if (n != idVec.length) throw 'recover:bad length';\n      var secPos = a._alloc();\n      var vecPos = _malloc(size * n);\n      var idVecPos = _malloc(BLS_ID_SIZE * n);\n      for (var i = 0; i < n; i++) {\n        copyFromUint32Array(vecPos + size * i, vec[i].a_);\n        copyFromUint32Array(idVecPos + BLS_ID_SIZE * i, idVec[i].a_);\n      }\n      var r = func(secPos, vecPos, idVecPos, n);\n      _free(idVecPos);\n      _free(vecPos);\n      a._saveAndFree(secPos);\n      if (r) throw 'callRecover';\n    };\n\n    // change curveType\n    exports.blsInit = function () {\n      var curveType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : exports.ethMode ? exports.BLS12_381 : exports.BN254;\n      var r = mod._blsInit(curveType, MCLBN_COMPILED_TIME_VAR);\n      if (r) throw 'blsInit err ' + r;\n    };\n    exports.getCurveOrder = _wrapGetStr(mod._blsGetCurveOrder);\n    exports.getFieldOrder = _wrapGetStr(mod._blsGetFieldOrder);\n    exports.blsIdSetDecStr = _wrapInput(mod._blsIdSetDecStr, 1);\n    exports.blsIdSetHexStr = _wrapInput(mod._blsIdSetHexStr, 1);\n    exports.blsIdGetDecStr = _wrapGetStr(mod._blsIdGetDecStr);\n    exports.blsIdGetHexStr = _wrapGetStr(mod._blsIdGetHexStr);\n    exports.blsIdSerialize = _wrapSerialize(mod._blsIdSerialize);\n    exports.blsSecretKeySerialize = _wrapSerialize(mod._blsSecretKeySerialize);\n    exports.blsPublicKeySerialize = _wrapSerialize(mod._blsPublicKeySerialize);\n    exports.blsSignatureSerialize = _wrapSerialize(mod._blsSignatureSerialize);\n    exports.blsIdDeserialize = _wrapDeserialize(mod._blsIdDeserialize);\n    exports.blsSecretKeyDeserialize = _wrapDeserialize(mod._blsSecretKeyDeserialize);\n    exports.blsPublicKeyDeserialize = _wrapDeserialize(mod._blsPublicKeyDeserialize);\n    exports.blsSignatureDeserialize = _wrapDeserialize(mod._blsSignatureDeserialize);\n    exports.blsPublicKeySerializeUncompressed = _wrapSerialize(mod._blsPublicKeySerializeUncompressed);\n    exports.blsSignatureSerializeUncompressed = _wrapSerialize(mod._blsSignatureSerializeUncompressed);\n    exports.blsPublicKeyDeserializeUncompressed = _wrapDeserialize(mod._blsPublicKeyDeserializeUncompressed);\n    exports.blsSignatureDeserializeUncompressed = _wrapDeserialize(mod._blsSignatureDeserializeUncompressed);\n    exports.blsSecretKeySetLittleEndian = _wrapInput(mod._blsSecretKeySetLittleEndian, 1);\n    exports.blsSecretKeySetLittleEndianMod = _wrapInput(mod._blsSecretKeySetLittleEndianMod, 1);\n    exports.blsHashToSecretKey = _wrapInput(mod._blsHashToSecretKey, 1);\n    exports.blsSign = _wrapInput(mod._blsSign, 2);\n    exports.blsVerify = _wrapInput(mod._blsVerify, 2, true);\n    var Common = /*#__PURE__*/function () {\n      \"use strict\";\n\n      function Common(size) {\n        _classCallCheck(this, Common);\n        this.a_ = new Uint32Array(size / 4);\n      }\n      _createClass(Common, [{\n        key: \"deserializeHexStr\",\n        value: function deserializeHexStr(s) {\n          this.deserialize(exports.fromHexStr(s));\n        }\n      }, {\n        key: \"serializeToHexStr\",\n        value: function serializeToHexStr() {\n          return exports.toHexStr(this.serialize());\n        }\n      }, {\n        key: \"dump\",\n        value: function dump() {\n          var msg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n          console.log(msg + this.serializeToHexStr());\n        }\n      }, {\n        key: \"clear\",\n        value: function clear() {\n          this.a_.fill(0);\n        }\n        // alloc new array\n      }, {\n        key: \"_alloc\",\n        value: function _alloc() {\n          return _malloc(this.a_.length * 4);\n        }\n        // alloc and copy a_ to mod.HEAP32[pos / 4]\n      }, {\n        key: \"_allocAndCopy\",\n        value: function _allocAndCopy() {\n          var pos = this._alloc();\n          mod.HEAP32.set(this.a_, pos / 4);\n          return pos;\n        }\n        // save pos to a_\n      }, {\n        key: \"_save\",\n        value: function _save(pos) {\n          this.a_.set(mod.HEAP32.subarray(pos / 4, pos / 4 + this.a_.length));\n        }\n        // save and free\n      }, {\n        key: \"_saveAndFree\",\n        value: function _saveAndFree(pos) {\n          this._save(pos);\n          _free(pos);\n        }\n        // set parameter (p1, p2 may be undefined)\n      }, {\n        key: \"_setter\",\n        value: function _setter(func, p1, p2) {\n          var pos = this._alloc();\n          var r = func(pos, p1, p2);\n          this._saveAndFree(pos);\n          if (r) throw new Error('_setter err');\n        }\n        // getter (p1, p2 may be undefined)\n      }, {\n        key: \"_getter\",\n        value: function _getter(func, p1, p2) {\n          var pos = this._allocAndCopy();\n          var s = func(pos, p1, p2);\n          _free(pos);\n          return s;\n        }\n      }, {\n        key: \"_isEqual\",\n        value: function _isEqual(func, rhs) {\n          var xPos = this._allocAndCopy();\n          var yPos = rhs._allocAndCopy();\n          var r = func(xPos, yPos);\n          _free(yPos);\n          _free(xPos);\n          return r === 1;\n        }\n        // func(y, this) and return y\n      }, {\n        key: \"_op1\",\n        value: function _op1(func) {\n          var y = new this.constructor();\n          var xPos = this._allocAndCopy();\n          var yPos = y._alloc();\n          func(yPos, xPos);\n          y._saveAndFree(yPos);\n          _free(xPos);\n          return y;\n        }\n        // func(z, this, y) and return z\n      }, {\n        key: \"_op2\",\n        value: function _op2(func, y) {\n          var Cstr = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n          var z = Cstr ? new Cstr() : new this.constructor();\n          var xPos = this._allocAndCopy();\n          var yPos = y._allocAndCopy();\n          var zPos = z._alloc();\n          func(zPos, xPos, yPos);\n          z._saveAndFree(zPos);\n          _free(yPos);\n          _free(xPos);\n          return z;\n        }\n        // func(self, y)\n      }, {\n        key: \"_update\",\n        value: function _update(func, y) {\n          var xPos = this._allocAndCopy();\n          var yPos = y._allocAndCopy();\n          func(xPos, yPos);\n          _free(yPos);\n          this._saveAndFree(xPos);\n        }\n      }]);\n      return Common;\n    }();\n    exports.Id = /*#__PURE__*/function (_Common) {\n      \"use strict\";\n\n      _inherits(_class, _Common);\n      var _super = _createSuper(_class);\n      function _class() {\n        _classCallCheck(this, _class);\n        return _super.call(this, BLS_ID_SIZE);\n      }\n      _createClass(_class, [{\n        key: \"setInt\",\n        value: function setInt(x) {\n          this._setter(mod._blsIdSetInt, x);\n        }\n      }, {\n        key: \"isEqual\",\n        value: function isEqual(rhs) {\n          return this._isEqual(mod._blsIdIsEqual, rhs);\n        }\n      }, {\n        key: \"deserialize\",\n        value: function deserialize(s) {\n          this._setter(exports.blsIdDeserialize, s);\n        }\n      }, {\n        key: \"serialize\",\n        value: function serialize() {\n          return this._getter(exports.blsIdSerialize);\n        }\n      }, {\n        key: \"setStr\",\n        value: function setStr(s) {\n          var base = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n          switch (base) {\n            case 10:\n              this._setter(exports.blsIdSetDecStr, s);\n              return;\n            case 16:\n              this._setter(exports.blsIdSetHexStr, s);\n              return;\n            default:\n              throw 'BlsId.setStr:bad base:' + base;\n          }\n        }\n      }, {\n        key: \"getStr\",\n        value: function getStr() {\n          var base = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n          switch (base) {\n            case 10:\n              return this._getter(exports.blsIdGetDecStr);\n            case 16:\n              return this._getter(exports.blsIdGetHexStr);\n            default:\n              throw 'BlsId.getStr:bad base:' + base;\n          }\n        }\n      }, {\n        key: \"setLittleEndian\",\n        value: function setLittleEndian(s) {\n          this._setter(exports.blsSecretKeySetLittleEndian, s);\n        }\n      }, {\n        key: \"setLittleEndianMod\",\n        value: function setLittleEndianMod(s) {\n          this._setter(exports.blsSecretKeySetLittleEndianMod, s);\n        }\n      }, {\n        key: \"setByCSPRNG\",\n        value: function setByCSPRNG() {\n          var a = new Uint8Array(BLS_ID_SIZE);\n          exports.getRandomValues(a);\n          this.setLittleEndian(a);\n        }\n      }]);\n      return _class;\n    }(Common);\n    exports.deserializeHexStrToId = function (s) {\n      var r = new exports.Id();\n      r.deserializeHexStr(s);\n      return r;\n    };\n    exports.SecretKey = /*#__PURE__*/function (_Common2) {\n      \"use strict\";\n\n      _inherits(_class2, _Common2);\n      var _super2 = _createSuper(_class2);\n      function _class2() {\n        _classCallCheck(this, _class2);\n        return _super2.call(this, BLS_SECRETKEY_SIZE);\n      }\n      _createClass(_class2, [{\n        key: \"setInt\",\n        value: function setInt(x) {\n          this._setter(mod._blsIdSetInt, x); // same as Id\n        }\n      }, {\n        key: \"isZero\",\n        value: function isZero() {\n          return this._getter(mod._blsSecretKeyIsZero) === 1;\n        }\n      }, {\n        key: \"isEqual\",\n        value: function isEqual(rhs) {\n          return this._isEqual(mod._blsSecretKeyIsEqual, rhs);\n        }\n      }, {\n        key: \"deserialize\",\n        value: function deserialize(s) {\n          this._setter(exports.blsSecretKeyDeserialize, s);\n        }\n      }, {\n        key: \"serialize\",\n        value: function serialize() {\n          return this._getter(exports.blsSecretKeySerialize);\n        }\n      }, {\n        key: \"add\",\n        value: function add(rhs) {\n          this._update(mod._blsSecretKeyAdd, rhs);\n        }\n      }, {\n        key: \"share\",\n        value: function share(msk, id) {\n          callShare(mod._blsSecretKeyShare, this, BLS_SECRETKEY_SIZE, msk, id);\n        }\n      }, {\n        key: \"recover\",\n        value: function recover(secVec, idVec) {\n          callRecover(mod._blsSecretKeyRecover, this, BLS_SECRETKEY_SIZE, secVec, idVec);\n        }\n      }, {\n        key: \"setHashOf\",\n        value: function setHashOf(s) {\n          this._setter(exports.blsHashToSecretKey, s);\n        }\n      }, {\n        key: \"setLittleEndian\",\n        value: function setLittleEndian(s) {\n          this._setter(exports.blsSecretKeySetLittleEndian, s);\n        }\n      }, {\n        key: \"setLittleEndianMod\",\n        value: function setLittleEndianMod(s) {\n          this._setter(exports.blsSecretKeySetLittleEndianMod, s);\n        }\n      }, {\n        key: \"setByCSPRNG\",\n        value: function setByCSPRNG() {\n          var a = new Uint8Array(BLS_SECRETKEY_SIZE);\n          exports.getRandomValues(a);\n          this.setLittleEndian(a);\n        }\n      }, {\n        key: \"getPublicKey\",\n        value: function getPublicKey() {\n          var pub = new exports.PublicKey();\n          var secPos = this._allocAndCopy();\n          var pubPos = pub._alloc();\n          mod._blsGetPublicKey(pubPos, secPos);\n          pub._saveAndFree(pubPos);\n          _free(secPos);\n          return pub;\n        }\n        /*\n          input\n          m : message (string or Uint8Array)\n          return\n          BlsSignature\n        */\n      }, {\n        key: \"sign\",\n        value: function sign(m) {\n          var sig = new exports.Signature();\n          var secPos = this._allocAndCopy();\n          var sigPos = sig._alloc();\n          exports.blsSign(sigPos, secPos, m);\n          sig._saveAndFree(sigPos);\n          _free(secPos);\n          return sig;\n        }\n      }]);\n      return _class2;\n    }(Common);\n    exports.deserializeHexStrToSecretKey = function (s) {\n      var r = new exports.SecretKey();\n      r.deserializeHexStr(s);\n      return r;\n    };\n    exports.PublicKey = /*#__PURE__*/function (_Common3) {\n      \"use strict\";\n\n      _inherits(_class3, _Common3);\n      var _super3 = _createSuper(_class3);\n      function _class3() {\n        _classCallCheck(this, _class3);\n        return _super3.call(this, BLS_PUBLICKEY_SIZE);\n      }\n      _createClass(_class3, [{\n        key: \"isZero\",\n        value: function isZero() {\n          return this._getter(mod._blsPublicKeyIsZero) === 1;\n        }\n      }, {\n        key: \"isEqual\",\n        value: function isEqual(rhs) {\n          return this._isEqual(mod._blsPublicKeyIsEqual, rhs);\n        }\n      }, {\n        key: \"deserialize\",\n        value: function deserialize(s) {\n          this._setter(exports.blsPublicKeyDeserialize, s);\n        }\n      }, {\n        key: \"serialize\",\n        value: function serialize() {\n          return this._getter(exports.blsPublicKeySerialize);\n        }\n      }, {\n        key: \"deserializeUncompressed\",\n        value: function deserializeUncompressed(s) {\n          this._setter(exports.blsPublicKeyDeserializeUncompressed, s);\n        }\n      }, {\n        key: \"serializeUncompressed\",\n        value: function serializeUncompressed() {\n          return this._getter(exports.blsPublicKeySerializeUncompressed);\n        }\n      }, {\n        key: \"add\",\n        value: function add(rhs) {\n          this._update(mod._blsPublicKeyAdd, rhs);\n        }\n      }, {\n        key: \"share\",\n        value: function share(msk, id) {\n          callShare(mod._blsPublicKeyShare, this, BLS_PUBLICKEY_SIZE, msk, id);\n        }\n      }, {\n        key: \"recover\",\n        value: function recover(secVec, idVec) {\n          callRecover(mod._blsPublicKeyRecover, this, BLS_PUBLICKEY_SIZE, secVec, idVec);\n        }\n      }, {\n        key: \"isValidOrder\",\n        value: function isValidOrder() {\n          return this._getter(mod._blsPublicKeyIsValidOrder);\n        }\n      }, {\n        key: \"verify\",\n        value: function verify(sig, m) {\n          var pubPos = this._allocAndCopy();\n          var sigPos = sig._allocAndCopy();\n          var r = exports.blsVerify(sigPos, pubPos, m);\n          _free(sigPos);\n          _free(pubPos);\n          return r != 0;\n        }\n      }]);\n      return _class3;\n    }(Common);\n    exports.deserializeHexStrToPublicKey = function (s) {\n      var r = new exports.PublicKey();\n      r.deserializeHexStr(s);\n      return r;\n    };\n    exports.Signature = /*#__PURE__*/function (_Common4) {\n      \"use strict\";\n\n      _inherits(_class4, _Common4);\n      var _super4 = _createSuper(_class4);\n      function _class4() {\n        _classCallCheck(this, _class4);\n        return _super4.call(this, BLS_SIGNATURE_SIZE);\n      }\n      _createClass(_class4, [{\n        key: \"isZero\",\n        value: function isZero() {\n          return this._getter(mod._blsSignatureIsZero) === 1;\n        }\n      }, {\n        key: \"isEqual\",\n        value: function isEqual(rhs) {\n          return this._isEqual(mod._blsSignatureIsEqual, rhs);\n        }\n      }, {\n        key: \"deserialize\",\n        value: function deserialize(s) {\n          this._setter(exports.blsSignatureDeserialize, s);\n        }\n      }, {\n        key: \"serialize\",\n        value: function serialize() {\n          return this._getter(exports.blsSignatureSerialize);\n        }\n      }, {\n        key: \"deserializeUncompressed\",\n        value: function deserializeUncompressed(s) {\n          this._setter(exports.blsSignatureDeserializeUncompressed, s);\n        }\n      }, {\n        key: \"serializeUncompressed\",\n        value: function serializeUncompressed() {\n          return this._getter(exports.blsSignatureSerializeUncompressed);\n        }\n      }, {\n        key: \"add\",\n        value: function add(rhs) {\n          this._update(mod._blsSignatureAdd, rhs);\n        }\n      }, {\n        key: \"recover\",\n        value: function recover(secVec, idVec) {\n          callRecover(mod._blsSignatureRecover, this, BLS_SIGNATURE_SIZE, secVec, idVec);\n        }\n      }, {\n        key: \"isValidOrder\",\n        value: function isValidOrder() {\n          return this._getter(mod._blsSignatureIsValidOrder);\n        }\n        // this = aggSig\n      }, {\n        key: \"aggregate\",\n        value: function aggregate(sigVec) {\n          var n = sigVec.length;\n          var aggSigPos = this._allocAndCopy();\n          var sigVecPos = _malloc(BLS_SIGNATURE_SIZE * n);\n          for (var i = 0; i < n; i++) {\n            mod.HEAP32.set(sigVec[i].a_, (sigVecPos + BLS_SIGNATURE_SIZE * i) / 4);\n          }\n          var r = mod._blsAggregateSignature(aggSigPos, sigVecPos, n);\n          _free(sigVecPos);\n          this._saveAndFree(aggSigPos);\n          return r == 1;\n        }\n        // this = aggSig\n      }, {\n        key: \"fastAggregateVerify\",\n        value: function fastAggregateVerify(pubVec, msg) {\n          var n = pubVec.length;\n          var msgSize = msg.length;\n          var aggSigPos = this._allocAndCopy();\n          var pubVecPos = _malloc(BLS_PUBLICKEY_SIZE * n);\n          var msgPos = _malloc(msgSize);\n          for (var i = 0; i < n; i++) {\n            mod.HEAP32.set(pubVec[i].a_, (pubVecPos + BLS_PUBLICKEY_SIZE * i) / 4);\n          }\n          mod.HEAP8.set(msg, msgPos);\n          var r = mod._blsFastAggregateVerify(aggSigPos, pubVecPos, n, msgPos, msgSize);\n          _free(msgPos);\n          _free(pubVecPos);\n          _free(aggSigPos);\n          return r == 1;\n        }\n        // this = aggSig\n        // msgVec = (32 * pubVec.length)-size Uint8Array\n      }, {\n        key: \"aggregateVerifyNoCheck\",\n        value: function aggregateVerifyNoCheck(pubVec, msgVec) {\n          var n = pubVec.length;\n          var msgSize = 32;\n          if (n == 0 || msgVec.length != msgSize * n) {\n            return false;\n          }\n          var aggSigPos = this._allocAndCopy();\n          var pubVecPos = _malloc(BLS_PUBLICKEY_SIZE * n);\n          var msgPos = _malloc(msgVec.length);\n          for (var i = 0; i < n; i++) {\n            mod.HEAP32.set(pubVec[i].a_, (pubVecPos + BLS_PUBLICKEY_SIZE * i) / 4);\n          }\n          mod.HEAP8.set(msgVec, msgPos);\n          var r = mod._blsAggregateVerifyNoCheck(aggSigPos, pubVecPos, msgPos, msgSize, n);\n          _free(msgPos);\n          _free(pubVecPos);\n          _free(aggSigPos);\n          return r == 1;\n        }\n      }]);\n      return _class4;\n    }(Common);\n    exports.deserializeHexStrToSignature = function (s) {\n      var r = new exports.Signature();\n      r.deserializeHexStr(s);\n      return r;\n    };\n    // 1 (draft-05) 2 (draft-06) 3 (draft-07)\n    exports.setETHmode = function (mode) {\n      if (mod._blsSetETHmode(mode) != 0) throw new Error(\"bad setETHmode \".concat(mode));\n    };\n    // make setter check the correctness of the order if doVerify\n    exports.verifySignatureOrder = function (doVerify) {\n      mod._blsSignatureVerifyOrder(doVerify);\n    };\n    // make setter check the correctness of the order if doVerify\n    exports.verifyPublicKeyOrder = function (doVerify) {\n      mod._blsPublicKeyVerifyOrder(doVerify);\n    };\n    exports.areAllMsgDifferent = function (msgs, msgSize) {\n      var n = msgs.length / msgSize;\n      if (msgs.length != n * msgSize) return false;\n      h = {};\n      for (var i = 0; i < n; i++) {\n        var m = msgs.subarray(i * msgSize, (i + 1) * msgSize);\n        if (m in h) return false;\n        h[m] = true;\n      }\n      return true;\n    };\n    /*\n      return true if all pub[i].verify(sigs[i], msgs[i])\n      msgs is array of 32-byte Uint8Array\n    */\n    exports.multiVerify = function (pubs, sigs, msgs) {\n      var MSG_SIZE = 32;\n      var RAND_SIZE = 8; // 64-bit rand\n      var threadNum = 0; // not used\n      var n = sigs.length;\n      if (pubs.length != n || msgs.length != n) return false;\n      for (var i = 0; i < n; i++) {\n        if (msgs[i].length != MSG_SIZE) return false;\n      }\n      var sigPos = _malloc(BLS_SIGNATURE_SIZE * n);\n      var pubPos = _malloc(BLS_PUBLICKEY_SIZE * n);\n      var msgPos = _malloc(MSG_SIZE * n);\n      var randPos = _malloc(RAND_SIZE * n);\n      exports.getRandomValues(mod.HEAP8.subarray(randPos, randPos + RAND_SIZE * n));\n      for (var _i = 0; _i < n; _i++) {\n        mod.HEAP32.set(sigs[_i].a_, (sigPos + BLS_SIGNATURE_SIZE * _i) / 4);\n        mod.HEAP32.set(pubs[_i].a_, (pubPos + BLS_PUBLICKEY_SIZE * _i) / 4);\n        mod.HEAP8.set(msgs[_i], msgPos + MSG_SIZE * _i);\n      }\n      var r = mod._blsMultiVerify(sigPos, pubPos, msgPos, MSG_SIZE, randPos, RAND_SIZE, n, threadNum);\n      _free(randPos);\n      _free(msgPos);\n      _free(pubPos);\n      _free(sigPos);\n      return r == 1;\n    };\n    exports.blsInit(curveType);\n    if (exports.ethMode) {\n      exports.setETHmode(exports.ETH_MODE_DRAFT_07);\n    }\n  }; // setup()\n  var _cryptoGetRandomValues = function _cryptoGetRandomValues(p, n) {\n    var a = new Uint8Array(n);\n    exports.getRandomValues(a);\n    for (var i = 0; i < n; i++) {\n      exports.mod.HEAP8[p + i] = a[i];\n    }\n  };\n  // f(a:array) fills a with random value\n  exports.setRandFunc = function (f) {\n    exports.getRandomValues = f;\n  };\n  exports.init = function () {\n    var curveType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : exports.BN254;\n    exports.curveType = curveType;\n    var name = 'bls_c';\n    return new Promise(function (resolve) {\n      if (isNodeJs) {\n        var crypto = require('crypto');\n        exports.getRandomValues = crypto.randomFillSync;\n        var path = require('path');\n        var js = require(\"./\".concat(name, \".js\"));\n        var _Module = {\n          cryptoGetRandomValues: _cryptoGetRandomValues,\n          locateFile: function locateFile(baseName) {\n            return path.join(__dirname, baseName);\n          }\n        };\n        js(_Module).then(function (_mod) {\n          exports.mod = _mod;\n          setup(exports, curveType);\n          resolve();\n        });\n      } else {\n        var _crypto = window.crypto || window.msCrypto;\n        exports.getRandomValues = function (x) {\n          return _crypto.getRandomValues(x);\n        };\n        fetch(\"./\".concat(name, \".wasm\")) // eslint-disable-line\n        .then(function (response) {\n          return response.arrayBuffer();\n        }).then(function (buffer) {\n          return new Uint8Array(buffer);\n        }).then(function () {\n          if (typeof module !== 'undefined' && module.exports) {\n            exports.mod = require('./bls_c')();\n          } else {\n            exports.mod = Module(); // eslint-disable-line\n          }\n\n          exports.mod.cryptoGetRandomValues = _cryptoGetRandomValues;\n          exports.mod.onRuntimeInitialized = function () {\n            setup(exports, curveType);\n            resolve();\n          };\n        });\n      }\n    });\n  };\n  return exports;\n});","map":{"version":3,"names":["generator","window","exports","module","bls","isNodeJs","BN254","BN381_1","BLS12_381","ethMode","ETH_MODE_DRAFT_05","ETH_MODE_DRAFT_06","ETH_MODE_DRAFT_07","setup","curveType","mod","MCLBN_FP_UNIT_SIZE","MCLBN_FR_UNIT_SIZE","BLS_COMPILER_TIME_VAR_ADJ","MCLBN_COMPILED_TIME_VAR","BLS_ID_SIZE","BLS_SECRETKEY_SIZE","BLS_PUBLICKEY_SIZE","BLS_SIGNATURE_SIZE","_malloc","size","_blsMalloc","_free","pos","_blsFree","ptrToAsciiStr","n","s","i","String","fromCharCode","HEAP8","asciiStrToPtr","length","charCodeAt","toHex","a","start","toString","slice","toHexStr","fromHexStr","Error","Uint8Array","parseInt","copyToUint32Array","set","HEAP32","subarray","copyFromUint32Array","_wrapGetStr","func","returnAsStr","arguments","undefined","x","ioMode","maxBufSize","_wrapSerialize","_wrapDeserialize","buf","r","_wrapInput","argNum","returnValue","args","Array","prototype","call","typeStr","Object","apply","indexOf","concat","_toConsumableArray","callSetter","p1","p2","callGetter","callShare","vec","id","_allocAndCopy","idPos","vecPos","a_","_saveAndFree","callRecover","idVec","secPos","_alloc","idVecPos","blsInit","_blsInit","getCurveOrder","_blsGetCurveOrder","getFieldOrder","_blsGetFieldOrder","blsIdSetDecStr","_blsIdSetDecStr","blsIdSetHexStr","_blsIdSetHexStr","blsIdGetDecStr","_blsIdGetDecStr","blsIdGetHexStr","_blsIdGetHexStr","blsIdSerialize","_blsIdSerialize","blsSecretKeySerialize","_blsSecretKeySerialize","blsPublicKeySerialize","_blsPublicKeySerialize","blsSignatureSerialize","_blsSignatureSerialize","blsIdDeserialize","_blsIdDeserialize","blsSecretKeyDeserialize","_blsSecretKeyDeserialize","blsPublicKeyDeserialize","_blsPublicKeyDeserialize","blsSignatureDeserialize","_blsSignatureDeserialize","blsPublicKeySerializeUncompressed","_blsPublicKeySerializeUncompressed","blsSignatureSerializeUncompressed","_blsSignatureSerializeUncompressed","blsPublicKeyDeserializeUncompressed","_blsPublicKeyDeserializeUncompressed","blsSignatureDeserializeUncompressed","_blsSignatureDeserializeUncompressed","blsSecretKeySetLittleEndian","_blsSecretKeySetLittleEndian","blsSecretKeySetLittleEndianMod","_blsSecretKeySetLittleEndianMod","blsHashToSecretKey","_blsHashToSecretKey","blsSign","_blsSign","blsVerify","_blsVerify","Common","_classCallCheck","Uint32Array","_createClass","key","value","deserializeHexStr","deserialize","serializeToHexStr","serialize","dump","msg","console","log","clear","fill","_save","_setter","_getter","_isEqual","rhs","xPos","yPos","_op1","y","constructor","_op2","Cstr","z","zPos","_update","Id","_Common","_inherits","_class","_super","_createSuper","setInt","_blsIdSetInt","isEqual","_blsIdIsEqual","setStr","base","getStr","setLittleEndian","setLittleEndianMod","setByCSPRNG","getRandomValues","deserializeHexStrToId","SecretKey","_Common2","_class2","_super2","isZero","_blsSecretKeyIsZero","_blsSecretKeyIsEqual","add","_blsSecretKeyAdd","share","msk","_blsSecretKeyShare","recover","secVec","_blsSecretKeyRecover","setHashOf","getPublicKey","pub","PublicKey","pubPos","_blsGetPublicKey","sign","m","sig","Signature","sigPos","deserializeHexStrToSecretKey","_Common3","_class3","_super3","_blsPublicKeyIsZero","_blsPublicKeyIsEqual","deserializeUncompressed","serializeUncompressed","_blsPublicKeyAdd","_blsPublicKeyShare","_blsPublicKeyRecover","isValidOrder","_blsPublicKeyIsValidOrder","verify","deserializeHexStrToPublicKey","_Common4","_class4","_super4","_blsSignatureIsZero","_blsSignatureIsEqual","_blsSignatureAdd","_blsSignatureRecover","_blsSignatureIsValidOrder","aggregate","sigVec","aggSigPos","sigVecPos","_blsAggregateSignature","fastAggregateVerify","pubVec","msgSize","pubVecPos","msgPos","_blsFastAggregateVerify","aggregateVerifyNoCheck","msgVec","_blsAggregateVerifyNoCheck","deserializeHexStrToSignature","setETHmode","mode","_blsSetETHmode","verifySignatureOrder","doVerify","_blsSignatureVerifyOrder","verifyPublicKeyOrder","_blsPublicKeyVerifyOrder","areAllMsgDifferent","msgs","h","multiVerify","pubs","sigs","MSG_SIZE","RAND_SIZE","threadNum","randPos","_blsMultiVerify","_cryptoGetRandomValues","p","setRandFunc","f","init","name","Promise","resolve","crypto","require","randomFillSync","path","js","Module","cryptoGetRandomValues","locateFile","baseName","join","__dirname","then","_mod","msCrypto","fetch","response","arrayBuffer","buffer","onRuntimeInitialized"],"sources":["/Users/neville/Documents/Github/elrond-delegation/node_modules/@multiversx/sdk-bls-wasm/bls.js"],"sourcesContent":["(generator => {\n  if (typeof window === 'object') {\n    const exports = {}\n\n    if (typeof module !== 'undefined' && module.exports) {\n      module.exports = generator(exports, false)\n    } else {\n      window.bls = generator(exports, false)\n    }\n  } else {\n    generator(exports, true)\n  }\n})((exports, isNodeJs) => {\n  /* eslint-disable */\n  exports.BN254 = 0\n  exports.BN381_1 = 1\n  exports.BLS12_381 = 5\n  exports.ethMode = false\n  exports.ETH_MODE_DRAFT_05 = 1\n  exports.ETH_MODE_DRAFT_06 = 2\n  exports.ETH_MODE_DRAFT_07 = 3\n\n  const setup = (exports, curveType) => {\n    const mod = exports.mod\n    const MCLBN_FP_UNIT_SIZE = 6\n    const MCLBN_FR_UNIT_SIZE = exports.ethMode ? 4 : 6\n    const BLS_COMPILER_TIME_VAR_ADJ = exports.ethMode ? 200 : 0\n    const MCLBN_COMPILED_TIME_VAR = (MCLBN_FR_UNIT_SIZE * 10 + MCLBN_FP_UNIT_SIZE) + BLS_COMPILER_TIME_VAR_ADJ\n    const BLS_ID_SIZE = MCLBN_FR_UNIT_SIZE * 8\n    const BLS_SECRETKEY_SIZE = MCLBN_FP_UNIT_SIZE * 8\n    const BLS_PUBLICKEY_SIZE = BLS_SECRETKEY_SIZE * 3 * (exports.ethMode ? 1 : 2)\n    const BLS_SIGNATURE_SIZE = BLS_SECRETKEY_SIZE * 3 * (exports.ethMode ? 2 : 1)\n\n    const _malloc = size => {\n      return mod._blsMalloc(size)\n    }\n    const _free = pos => {\n      mod._blsFree(pos)\n    }\n    const ptrToAsciiStr = (pos, n) => {\n      let s = ''\n      for (let i = 0; i < n; i++) {\n        s += String.fromCharCode(mod.HEAP8[pos + i])\n      }\n      return s\n    }\n    const asciiStrToPtr = (pos, s) => {\n      for (let i = 0; i < s.length; i++) {\n        mod.HEAP8[pos + i] = s.charCodeAt(i)\n      }\n    }\n    exports.toHex = (a, start, n) => {\n      let s = ''\n      for (let i = 0; i < n; i++) {\n        s += ('0' + a[start + i].toString(16)).slice(-2)\n      }\n      return s\n    }\n    // Uint8Array to hex string\n    exports.toHexStr = a => {\n      return exports.toHex(a, 0, a.length)\n    }\n    // hex string to Uint8Array\n    exports.fromHexStr = s => {\n      if (s.length & 1) throw new Error('fromHexStr:length must be even ' + s.length)\n      const n = s.length / 2\n      const a = new Uint8Array(n)\n      for (let i = 0; i < n; i++) {\n        a[i] = parseInt(s.slice(i * 2, i * 2 + 2), 16)\n      }\n      return a\n    }\n///////////////////////////\n    const copyToUint32Array = (a, pos) => {\n      a.set(mod.HEAP32.subarray(pos / 4, pos / 4 + a.length))\n//    for (let i = 0; i < a.length; i++) {\n//      a[i] = mod.HEAP32[pos / 4 + i]\n//    }\n    }\n    const copyFromUint32Array = (pos, a) => {\n      mod.HEAP32.set(a, pos / 4)\n//    for (let i = 0; i < a.length; i++) {\n//      mod.HEAP32[pos / 4 + i] = a[i]\n//    }\n    }\n//////////////////////////////////\n    const _wrapGetStr = (func, returnAsStr = true) => {\n      return (x, ioMode = 0) => {\n        const maxBufSize = 3096\n        const pos = _malloc(maxBufSize)\n        const n = func(pos, maxBufSize, x, ioMode)\n        if (n <= 0) {\n          throw new Error('err gen_str:' + x)\n        }\n        let s = null\n        if (returnAsStr) {\n          s = ptrToAsciiStr(pos, n)\n        } else {\n          s = new Uint8Array(mod.HEAP8.subarray(pos, pos + n))\n        }\n        _free(pos)\n        return s\n      }\n    }\n    const _wrapSerialize = func => {\n      return _wrapGetStr(func, false)\n    }\n    const _wrapDeserialize = func => {\n      return (x, buf) => {\n        const pos = _malloc(buf.length)\n        mod.HEAP8.set(buf, pos)\n        const r = func(x, pos, buf.length)\n        _free(pos)\n        if (r === 0) throw new Error('err _wrapDeserialize', buf)\n      }\n    }\n    /*\n      argNum : n\n      func(x0, ..., x_(n-1), buf, ioMode)\n      => func(x0, ..., x_(n-1), pos, buf.length, ioMode)\n    */\n    const _wrapInput = (func, argNum, returnValue = false) => {\n      return function () {\n        const args = [...arguments]\n        const buf = args[argNum]\n        const typeStr = Object.prototype.toString.apply(buf)\n        if (['[object String]', '[object Uint8Array]', '[object Array]'].indexOf(typeStr) < 0) {\n          throw new Error(`err bad type:\"${typeStr}\". Use String or Uint8Array.`)\n        }\n        const ioMode = args[argNum + 1] // may undefined\n        const pos = _malloc(buf.length)\n        if (typeStr === '[object String]') {\n          asciiStrToPtr(pos, buf)\n        } else {\n          mod.HEAP8.set(buf, pos)\n        }\n        const r = func(...args.slice(0, argNum), pos, buf.length, ioMode)\n        _free(pos)\n        if (returnValue) return r\n        if (r) throw new Error('err _wrapInput ' + buf)\n      }\n    }\n    const callSetter = (func, a, p1, p2) => {\n      const pos = _malloc(a.length * 4)\n      func(pos, p1, p2) // p1, p2 may be undefined\n      copyToUint32Array(a, pos)\n      _free(pos)\n    }\n    const callGetter = (func, a, p1, p2) => {\n      const pos = _malloc(a.length * 4)\n      mod.HEAP32.set(a, pos / 4)\n      const s = func(pos, p1, p2)\n      _free(pos)\n      return s\n    }\n    const callShare = (func, a, size, vec, id) => {\n      const pos = a._allocAndCopy()\n      const idPos = id._allocAndCopy()\n      const vecPos = _malloc(size * vec.length)\n      for (let i = 0; i < vec.length; i++) {\n        copyFromUint32Array(vecPos + size * i, vec[i].a_)\n      }\n      func(pos, vecPos, vec.length, idPos)\n      _free(vecPos)\n      _free(idPos)\n      a._saveAndFree(pos)\n    }\n    const callRecover = (func, a, size, vec, idVec) => {\n      const n = vec.length\n      if (n != idVec.length) throw ('recover:bad length')\n      const secPos = a._alloc()\n      const vecPos = _malloc(size * n)\n      const idVecPos = _malloc(BLS_ID_SIZE * n)\n      for (let i = 0; i < n; i++) {\n        copyFromUint32Array(vecPos + size * i, vec[i].a_)\n        copyFromUint32Array(idVecPos + BLS_ID_SIZE * i, idVec[i].a_)\n      }\n      const r = func(secPos, vecPos, idVecPos, n)\n      _free(idVecPos)\n      _free(vecPos)\n      a._saveAndFree(secPos)\n      if (r) throw ('callRecover')\n    }\n\n    // change curveType\n    exports.blsInit = (curveType = (exports.ethMode ? exports.BLS12_381 : exports.BN254)) => {\n      const r = mod._blsInit(curveType, MCLBN_COMPILED_TIME_VAR)\n      if (r) throw ('blsInit err ' + r)\n    }\n    exports.getCurveOrder = _wrapGetStr(mod._blsGetCurveOrder)\n    exports.getFieldOrder = _wrapGetStr(mod._blsGetFieldOrder)\n\n    exports.blsIdSetDecStr = _wrapInput(mod._blsIdSetDecStr, 1)\n    exports.blsIdSetHexStr = _wrapInput(mod._blsIdSetHexStr, 1)\n    exports.blsIdGetDecStr = _wrapGetStr(mod._blsIdGetDecStr)\n    exports.blsIdGetHexStr = _wrapGetStr(mod._blsIdGetHexStr)\n\n    exports.blsIdSerialize = _wrapSerialize(mod._blsIdSerialize)\n    exports.blsSecretKeySerialize = _wrapSerialize(mod._blsSecretKeySerialize)\n    exports.blsPublicKeySerialize = _wrapSerialize(mod._blsPublicKeySerialize)\n    exports.blsSignatureSerialize = _wrapSerialize(mod._blsSignatureSerialize)\n\n    exports.blsIdDeserialize = _wrapDeserialize(mod._blsIdDeserialize)\n    exports.blsSecretKeyDeserialize = _wrapDeserialize(mod._blsSecretKeyDeserialize)\n    exports.blsPublicKeyDeserialize = _wrapDeserialize(mod._blsPublicKeyDeserialize)\n    exports.blsSignatureDeserialize = _wrapDeserialize(mod._blsSignatureDeserialize)\n\n    exports.blsPublicKeySerializeUncompressed = _wrapSerialize(mod._blsPublicKeySerializeUncompressed)\n    exports.blsSignatureSerializeUncompressed = _wrapSerialize(mod._blsSignatureSerializeUncompressed)\n    exports.blsPublicKeyDeserializeUncompressed = _wrapDeserialize(mod._blsPublicKeyDeserializeUncompressed)\n    exports.blsSignatureDeserializeUncompressed = _wrapDeserialize(mod._blsSignatureDeserializeUncompressed)\n\n    exports.blsSecretKeySetLittleEndian = _wrapInput(mod._blsSecretKeySetLittleEndian, 1)\n    exports.blsSecretKeySetLittleEndianMod = _wrapInput(mod._blsSecretKeySetLittleEndianMod, 1)\n    exports.blsHashToSecretKey = _wrapInput(mod._blsHashToSecretKey, 1)\n    exports.blsSign = _wrapInput(mod._blsSign, 2)\n    exports.blsVerify = _wrapInput(mod._blsVerify, 2, true)\n\n    class Common {\n      constructor (size) {\n        this.a_ = new Uint32Array(size / 4)\n      }\n      deserializeHexStr (s) {\n        this.deserialize(exports.fromHexStr(s))\n      }\n      serializeToHexStr () {\n        return exports.toHexStr(this.serialize())\n      }\n      dump (msg = '') {\n        console.log(msg + this.serializeToHexStr())\n      }\n      clear () {\n        this.a_.fill(0)\n      }\n      // alloc new array\n      _alloc () {\n        return _malloc(this.a_.length * 4)\n      }\n      // alloc and copy a_ to mod.HEAP32[pos / 4]\n      _allocAndCopy () {\n        const pos = this._alloc()\n        mod.HEAP32.set(this.a_, pos / 4)\n        return pos\n      }\n      // save pos to a_\n      _save (pos) {\n        this.a_.set(mod.HEAP32.subarray(pos / 4, pos / 4 + this.a_.length))\n      }\n      // save and free\n      _saveAndFree(pos) {\n        this._save(pos)\n        _free(pos)\n      }\n      // set parameter (p1, p2 may be undefined)\n      _setter (func, p1, p2) {\n        const pos = this._alloc()\n        const r = func(pos, p1, p2)\n        this._saveAndFree(pos)\n        if (r) throw new Error('_setter err')\n      }\n      // getter (p1, p2 may be undefined)\n      _getter (func, p1, p2) {\n        const pos = this._allocAndCopy()\n        const s = func(pos, p1, p2)\n        _free(pos)\n        return s\n      }\n      _isEqual (func, rhs) {\n        const xPos = this._allocAndCopy()\n        const yPos = rhs._allocAndCopy()\n        const r = func(xPos, yPos)\n        _free(yPos)\n        _free(xPos)\n        return r === 1\n      }\n      // func(y, this) and return y\n      _op1 (func) {\n        const y = new this.constructor()\n        const xPos = this._allocAndCopy()\n        const yPos = y._alloc()\n        func(yPos, xPos)\n        y._saveAndFree(yPos)\n        _free(xPos)\n        return y\n      }\n      // func(z, this, y) and return z\n      _op2 (func, y, Cstr = null) {\n        const z = Cstr ? new Cstr() : new this.constructor()\n        const xPos = this._allocAndCopy()\n        const yPos = y._allocAndCopy()\n        const zPos = z._alloc()\n        func(zPos, xPos, yPos)\n        z._saveAndFree(zPos)\n        _free(yPos)\n        _free(xPos)\n        return z\n      }\n      // func(self, y)\n      _update (func, y) {\n        const xPos = this._allocAndCopy()\n        const yPos = y._allocAndCopy()\n        func(xPos, yPos)\n        _free(yPos)\n        this._saveAndFree(xPos)\n      }\n    }\n\n    exports.Id = class extends Common {\n      constructor () {\n        super(BLS_ID_SIZE)\n      }\n      setInt (x) {\n        this._setter(mod._blsIdSetInt, x)\n      }\n      isEqual (rhs) {\n        return this._isEqual(mod._blsIdIsEqual, rhs)\n      }\n      deserialize (s) {\n        this._setter(exports.blsIdDeserialize, s)\n      }\n      serialize () {\n        return this._getter(exports.blsIdSerialize)\n      }\n      setStr (s, base = 10) {\n        switch (base) {\n          case 10:\n            this._setter(exports.blsIdSetDecStr, s)\n            return\n          case 16:\n            this._setter(exports.blsIdSetHexStr, s)\n            return\n          default:\n            throw ('BlsId.setStr:bad base:' + base)\n        }\n      }\n      getStr (base = 10) {\n        switch (base) {\n          case 10:\n            return this._getter(exports.blsIdGetDecStr)\n          case 16:\n            return this._getter(exports.blsIdGetHexStr)\n          default:\n            throw ('BlsId.getStr:bad base:' + base)\n        }\n      }\n      setLittleEndian (s) {\n        this._setter(exports.blsSecretKeySetLittleEndian, s)\n      }\n      setLittleEndianMod (s) {\n        this._setter(exports.blsSecretKeySetLittleEndianMod, s)\n      }\n      setByCSPRNG () {\n        const a = new Uint8Array(BLS_ID_SIZE)\n        exports.getRandomValues(a)\n        this.setLittleEndian(a)\n      }\n    }\n    exports.deserializeHexStrToId = s => {\n      const r = new exports.Id()\n      r.deserializeHexStr(s)\n      return r\n    }\n\n    exports.SecretKey = class extends Common {\n      constructor () {\n        super(BLS_SECRETKEY_SIZE)\n      }\n      setInt (x) {\n        this._setter(mod._blsIdSetInt, x) // same as Id\n      }\n      isZero () {\n        return this._getter(mod._blsSecretKeyIsZero) === 1\n      }\n      isEqual (rhs) {\n        return this._isEqual(mod._blsSecretKeyIsEqual, rhs)\n      }\n      deserialize (s) {\n        this._setter(exports.blsSecretKeyDeserialize, s)\n      }\n      serialize () {\n        return this._getter(exports.blsSecretKeySerialize)\n      }\n      add (rhs) {\n        this._update(mod._blsSecretKeyAdd, rhs)\n      }\n      share (msk, id) {\n        callShare(mod._blsSecretKeyShare, this, BLS_SECRETKEY_SIZE, msk, id)\n      }\n      recover (secVec, idVec) {\n        callRecover(mod._blsSecretKeyRecover, this, BLS_SECRETKEY_SIZE, secVec, idVec)\n      }\n      setHashOf (s) {\n        this._setter(exports.blsHashToSecretKey, s)\n      }\n      setLittleEndian (s) {\n        this._setter(exports.blsSecretKeySetLittleEndian, s)\n      }\n      setLittleEndianMod (s) {\n        this._setter(exports.blsSecretKeySetLittleEndianMod, s)\n      }\n      setByCSPRNG () {\n        const a = new Uint8Array(BLS_SECRETKEY_SIZE)\n        exports.getRandomValues(a)\n        this.setLittleEndian(a)\n      }\n      getPublicKey () {\n        const pub = new exports.PublicKey()\n        const secPos = this._allocAndCopy()\n        const pubPos = pub._alloc()\n        mod._blsGetPublicKey(pubPos, secPos)\n        pub._saveAndFree(pubPos)\n        _free(secPos)\n        return pub\n      }\n      /*\n        input\n        m : message (string or Uint8Array)\n        return\n        BlsSignature\n      */\n      sign (m) {\n        const sig = new exports.Signature()\n        const secPos = this._allocAndCopy()\n        const sigPos = sig._alloc()\n        exports.blsSign(sigPos, secPos, m)\n        sig._saveAndFree(sigPos)\n        _free(secPos)\n        return sig\n      }\n    }\n    exports.deserializeHexStrToSecretKey = s => {\n      const r = new exports.SecretKey()\n      r.deserializeHexStr(s)\n      return r\n    }\n\n    exports.PublicKey = class extends Common {\n      constructor () {\n        super(BLS_PUBLICKEY_SIZE)\n      }\n      isZero () {\n        return this._getter(mod._blsPublicKeyIsZero) === 1\n      }\n      isEqual (rhs) {\n        return this._isEqual(mod._blsPublicKeyIsEqual, rhs)\n      }\n      deserialize (s) {\n        this._setter(exports.blsPublicKeyDeserialize, s)\n      }\n      serialize () {\n        return this._getter(exports.blsPublicKeySerialize)\n      }\n      deserializeUncompressed (s) {\n        this._setter(exports.blsPublicKeyDeserializeUncompressed, s)\n      }\n      serializeUncompressed () {\n        return this._getter(exports.blsPublicKeySerializeUncompressed)\n      }\n      add (rhs) {\n        this._update(mod._blsPublicKeyAdd, rhs)\n      }\n      share (msk, id) {\n        callShare(mod._blsPublicKeyShare, this, BLS_PUBLICKEY_SIZE, msk, id)\n      }\n      recover (secVec, idVec) {\n        callRecover(mod._blsPublicKeyRecover, this, BLS_PUBLICKEY_SIZE, secVec, idVec)\n      }\n      isValidOrder () {\n        return this._getter(mod._blsPublicKeyIsValidOrder)\n      }\n      verify (sig, m) {\n        const pubPos = this._allocAndCopy()\n        const sigPos = sig._allocAndCopy()\n        const r = exports.blsVerify(sigPos, pubPos, m)\n        _free(sigPos)\n        _free(pubPos)\n        return r != 0\n      }\n    }\n    exports.deserializeHexStrToPublicKey = s => {\n      const r = new exports.PublicKey()\n      r.deserializeHexStr(s)\n      return r\n    }\n\n    exports.Signature = class extends Common {\n      constructor () {\n        super(BLS_SIGNATURE_SIZE)\n      }\n      isZero () {\n        return this._getter(mod._blsSignatureIsZero) === 1\n      }\n      isEqual (rhs) {\n        return this._isEqual(mod._blsSignatureIsEqual, rhs)\n      }\n      deserialize (s) {\n        this._setter(exports.blsSignatureDeserialize, s)\n      }\n      serialize () {\n        return this._getter(exports.blsSignatureSerialize)\n      }\n      deserializeUncompressed (s) {\n        this._setter(exports.blsSignatureDeserializeUncompressed, s)\n      }\n      serializeUncompressed () {\n        return this._getter(exports.blsSignatureSerializeUncompressed)\n      }\n      add (rhs) {\n        this._update(mod._blsSignatureAdd, rhs)\n      }\n      recover (secVec, idVec) {\n        callRecover(mod._blsSignatureRecover, this, BLS_SIGNATURE_SIZE, secVec, idVec)\n      }\n      isValidOrder () {\n        return this._getter(mod._blsSignatureIsValidOrder)\n      }\n      // this = aggSig\n      aggregate (sigVec) {\n        const n = sigVec.length\n        const aggSigPos = this._allocAndCopy()\n        const sigVecPos = _malloc(BLS_SIGNATURE_SIZE * n)\n        for (let i = 0; i < n; i++) {\n          mod.HEAP32.set(sigVec[i].a_, (sigVecPos + BLS_SIGNATURE_SIZE * i) / 4)\n        }\n        const r = mod._blsAggregateSignature(aggSigPos, sigVecPos, n)\n        _free(sigVecPos)\n        this._saveAndFree(aggSigPos)\n        return r == 1\n      }\n      // this = aggSig\n      fastAggregateVerify (pubVec, msg) {\n        const n = pubVec.length\n        const msgSize = msg.length\n        const aggSigPos = this._allocAndCopy()\n        const pubVecPos = _malloc(BLS_PUBLICKEY_SIZE * n)\n        const msgPos = _malloc(msgSize)\n        for (let i = 0; i < n; i++) {\n          mod.HEAP32.set(pubVec[i].a_, (pubVecPos + BLS_PUBLICKEY_SIZE * i) / 4)\n        }\n        mod.HEAP8.set(msg, msgPos)\n        const r = mod._blsFastAggregateVerify(aggSigPos, pubVecPos, n, msgPos, msgSize)\n        _free(msgPos)\n        _free(pubVecPos)\n        _free(aggSigPos)\n        return r == 1\n      }\n      // this = aggSig\n      // msgVec = (32 * pubVec.length)-size Uint8Array\n      aggregateVerifyNoCheck (pubVec, msgVec) {\n        const n = pubVec.length\n        const msgSize = 32\n        if (n == 0 || msgVec.length != msgSize * n) {\n          return false\n        }\n        const aggSigPos = this._allocAndCopy()\n        const pubVecPos = _malloc(BLS_PUBLICKEY_SIZE * n)\n        const msgPos = _malloc(msgVec.length)\n        for (let i = 0; i < n; i++) {\n          mod.HEAP32.set(pubVec[i].a_, (pubVecPos + BLS_PUBLICKEY_SIZE * i) / 4)\n        }\n        mod.HEAP8.set(msgVec, msgPos)\n        const r = mod._blsAggregateVerifyNoCheck(aggSigPos, pubVecPos, msgPos, msgSize, n)\n        _free(msgPos)\n        _free(pubVecPos)\n        _free(aggSigPos)\n        return r == 1\n      }\n    }\n    exports.deserializeHexStrToSignature = s => {\n      const r = new exports.Signature()\n      r.deserializeHexStr(s)\n      return r\n    }\n    // 1 (draft-05) 2 (draft-06) 3 (draft-07)\n    exports.setETHmode = (mode) => {\n      if (mod._blsSetETHmode(mode) != 0) throw new Error(`bad setETHmode ${mode}`)\n    }\n    // make setter check the correctness of the order if doVerify\n    exports.verifySignatureOrder = (doVerify) => {\n      mod._blsSignatureVerifyOrder(doVerify)\n    }\n    // make setter check the correctness of the order if doVerify\n    exports.verifyPublicKeyOrder = (doVerify) => {\n      mod._blsPublicKeyVerifyOrder(doVerify)\n    }\n    exports.areAllMsgDifferent = (msgs, msgSize) => {\n      const n = msgs.length / msgSize\n      if (msgs.length != n * msgSize) return false\n      h = {}\n      for (let i = 0; i < n; i++) {\n        const m = msgs.subarray(i * msgSize, (i + 1) * msgSize)\n        if (m in h) return false\n        h[m] = true\n      }\n      return true\n    }\n    /*\n      return true if all pub[i].verify(sigs[i], msgs[i])\n      msgs is array of 32-byte Uint8Array\n    */\n    exports.multiVerify = (pubs, sigs, msgs) => {\n      const MSG_SIZE = 32\n      const RAND_SIZE = 8 // 64-bit rand\n      const threadNum = 0 // not used\n      const n = sigs.length\n      if (pubs.length != n || msgs.length != n) return false\n      for (let i = 0; i < n; i++) {\n        if (msgs[i].length != MSG_SIZE) return false\n      }\n      const sigPos = _malloc(BLS_SIGNATURE_SIZE * n)\n      const pubPos = _malloc(BLS_PUBLICKEY_SIZE * n)\n      const msgPos = _malloc(MSG_SIZE * n)\n      const randPos = _malloc(RAND_SIZE * n)\n\n      exports.getRandomValues(mod.HEAP8.subarray(randPos, randPos + RAND_SIZE * n))\n      for (let i = 0; i < n; i++) {\n        mod.HEAP32.set(sigs[i].a_, (sigPos + BLS_SIGNATURE_SIZE * i) / 4)\n        mod.HEAP32.set(pubs[i].a_, (pubPos + BLS_PUBLICKEY_SIZE * i) / 4)\n        mod.HEAP8.set(msgs[i], msgPos + MSG_SIZE * i)\n      }\n      const r = mod._blsMultiVerify(sigPos, pubPos, msgPos, MSG_SIZE, randPos, RAND_SIZE, n, threadNum)\n\n      _free(randPos)\n      _free(msgPos)\n      _free(pubPos)\n      _free(sigPos)\n      return r == 1\n    }\n    exports.blsInit(curveType)\n    if (exports.ethMode) {\n      exports.setETHmode(exports.ETH_MODE_DRAFT_07)\n    }\n  } // setup()\n  const _cryptoGetRandomValues = function(p, n) {\n    const a = new Uint8Array(n)\n    exports.getRandomValues(a)\n    for (let i = 0; i < n; i++) {\n      exports.mod.HEAP8[p + i] = a[i]\n    }\n  }\n  // f(a:array) fills a with random value\n  exports.setRandFunc = f => {\n    exports.getRandomValues = f\n  }\n  exports.init = (curveType = exports.BN254) => {\n    exports.curveType = curveType\n    const name = 'bls_c'\n    return new Promise(resolve => {\n      if (isNodeJs) {\n        const crypto = require('crypto')\n        exports.getRandomValues = crypto.randomFillSync\n        const path = require('path')\n        const js = require(`./${name}.js`)\n        const Module = {\n          cryptoGetRandomValues : _cryptoGetRandomValues,\n          locateFile: baseName => { return path.join(__dirname, baseName) }\n        }\n        js(Module)\n          .then(_mod => {\n            exports.mod = _mod\n            setup(exports, curveType)\n            resolve()\n          })\n      } else {\n        const crypto = window.crypto || window.msCrypto\n        exports.getRandomValues = x => crypto.getRandomValues(x)\n        fetch(`./${name}.wasm`) // eslint-disable-line\n          .then(response => response.arrayBuffer())\n          .then(buffer => new Uint8Array(buffer))\n          .then(() => {\n            if (typeof module !== 'undefined' && module.exports) {\n              exports.mod = require('./bls_c')()\n            } else {\n              exports.mod = Module() // eslint-disable-line\n            }\n\n            exports.mod.cryptoGetRandomValues = _cryptoGetRandomValues\n            exports.mod.onRuntimeInitialized = () => {\n              setup(exports, curveType)\n              resolve()\n            }\n          })\n      }\n    })\n  }\n  return exports\n})\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}