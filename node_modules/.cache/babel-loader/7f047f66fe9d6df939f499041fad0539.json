{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/neville/Documents/Github/elrond-delegation/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/neville/Documents/Github/elrond-delegation/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Mnemonic = void 0;\nvar bip39_1 = require(\"bip39\");\nvar ed25519_hd_key_1 = require(\"ed25519-hd-key\");\nvar errors_1 = require(\"./errors\");\nvar userKeys_1 = require(\"./userKeys\");\nvar MNEMONIC_STRENGTH = 256;\nvar BIP44_DERIVATION_PREFIX = \"m/44'/508'/0'/0'\";\nvar Mnemonic = /*#__PURE__*/function () {\n  function Mnemonic(text) {\n    _classCallCheck(this, Mnemonic);\n    this.text = text;\n  }\n  _createClass(Mnemonic, [{\n    key: \"deriveKey\",\n    value: function deriveKey() {\n      var addressIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var password = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n      var seed = bip39_1.mnemonicToSeedSync(this.text, password);\n      var derivationPath = \"\".concat(BIP44_DERIVATION_PREFIX, \"/\").concat(addressIndex, \"'\");\n      var derivationResult = ed25519_hd_key_1.derivePath(derivationPath, seed.toString(\"hex\"));\n      var key = derivationResult.key;\n      return new userKeys_1.UserSecretKey(key);\n    }\n  }, {\n    key: \"getWords\",\n    value: function getWords() {\n      return this.text.split(\" \");\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.text;\n    }\n  }], [{\n    key: \"generate\",\n    value: function generate() {\n      var text = bip39_1.generateMnemonic(MNEMONIC_STRENGTH);\n      return new Mnemonic(text);\n    }\n  }, {\n    key: \"fromString\",\n    value: function fromString(text) {\n      text = text.trim();\n      Mnemonic.assertTextIsValid(text);\n      return new Mnemonic(text);\n    }\n  }, {\n    key: \"assertTextIsValid\",\n    value: function assertTextIsValid(text) {\n      var isValid = bip39_1.validateMnemonic(text);\n      if (!isValid) {\n        throw new errors_1.ErrWrongMnemonic();\n      }\n    }\n  }]);\n  return Mnemonic;\n}();\nexports.Mnemonic = Mnemonic;","map":{"version":3,"sources":["../src/mnemonic.ts"],"names":[],"mappings":";;;;;;;;AAAA,IAAA,OAAA,GAAA,OAAA,CAAA,OAAA,CAAA;AACA,IAAA,gBAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;AACA,IAAA,QAAA,GAAA,OAAA,CAAA,UAAA,CAAA;AACA,IAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA;AAEA,IAAM,iBAAiB,GAAG,GAAG;AAC7B,IAAM,uBAAuB,GAAG,kBAAkB;AAAC,IAEtC,QAAQ;EAGjB,SAAA,SAAoB,IAAY,EAAA;IAAA,eAAA,OAAA,QAAA;IAC5B,IAAI,CAAC,IAAI,GAAG,IAAI;EACpB;EAAC,YAAA,CAAA,QAAA;IAAA,GAAA;IAAA,KAAA,EAsBD,SAAA,UAAA,EAAyD;MAAA,IAA/C,YAAA,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAAuB,CAAC;MAAA,IAAE,QAAA,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAAmB,EAAE;MACrD,IAAI,IAAI,GAAG,OAAA,CAAA,kBAAkB,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,CAAC;MAClD,IAAI,cAAc,MAAA,MAAA,CAAM,uBAAuB,OAAA,MAAA,CAAI,YAAY,MAAG;MAClE,IAAI,gBAAgB,GAAG,gBAAA,CAAA,UAAU,CAAC,cAAc,EAAE,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;MACvE,IAAI,GAAG,GAAG,gBAAgB,CAAC,GAAG;MAC9B,OAAO,IAAI,UAAA,CAAA,aAAa,CAAC,GAAG,CAAC;IACjC;EAAC;IAAA,GAAA;IAAA,KAAA,EAED,SAAA,SAAA,EAAQ;MACJ,OAAO,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;IAC/B;EAAC;IAAA,GAAA;IAAA,KAAA,EAED,SAAA,SAAA,EAAQ;MACJ,OAAO,IAAI,CAAC,IAAI;IACpB;EAAC;IAAA,GAAA;IAAA,KAAA,EAlCD,SAAA,SAAA,EAAe;MACX,IAAI,IAAI,GAAG,OAAA,CAAA,gBAAgB,CAAC,iBAAiB,CAAC;MAC9C,OAAO,IAAI,QAAQ,CAAC,IAAI,CAAC;IAC7B;EAAC;IAAA,GAAA;IAAA,KAAA,EAED,SAAA,WAAkB,IAAY,EAAA;MAC1B,IAAI,GAAG,IAAI,CAAC,IAAI,EAAE;MAElB,QAAQ,CAAC,iBAAiB,CAAC,IAAI,CAAC;MAChC,OAAO,IAAI,QAAQ,CAAC,IAAI,CAAC;IAC7B;EAAC;IAAA,GAAA;IAAA,KAAA,EAEM,SAAA,kBAAyB,IAAY,EAAA;MACxC,IAAI,OAAO,GAAG,OAAA,CAAA,gBAAgB,CAAC,IAAI,CAAC;MAEpC,IAAI,CAAC,OAAO,EAAE;QACV,MAAM,IAAI,QAAA,CAAA,gBAAgB,EAAE;MAC/B;IACL;EAAC;EAAA,OAAA,QAAA;AAAA;AAzBL,OAAA,CAAA,QAAA,GAAA,QAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Mnemonic = void 0;\nconst bip39_1 = require(\"bip39\");\nconst ed25519_hd_key_1 = require(\"ed25519-hd-key\");\nconst errors_1 = require(\"./errors\");\nconst userKeys_1 = require(\"./userKeys\");\nconst MNEMONIC_STRENGTH = 256;\nconst BIP44_DERIVATION_PREFIX = \"m/44'/508'/0'/0'\";\nclass Mnemonic {\n    constructor(text) {\n        this.text = text;\n    }\n    static generate() {\n        let text = bip39_1.generateMnemonic(MNEMONIC_STRENGTH);\n        return new Mnemonic(text);\n    }\n    static fromString(text) {\n        text = text.trim();\n        Mnemonic.assertTextIsValid(text);\n        return new Mnemonic(text);\n    }\n    static assertTextIsValid(text) {\n        let isValid = bip39_1.validateMnemonic(text);\n        if (!isValid) {\n            throw new errors_1.ErrWrongMnemonic();\n        }\n    }\n    deriveKey(addressIndex = 0, password = \"\") {\n        let seed = bip39_1.mnemonicToSeedSync(this.text, password);\n        let derivationPath = `${BIP44_DERIVATION_PREFIX}/${addressIndex}'`;\n        let derivationResult = ed25519_hd_key_1.derivePath(derivationPath, seed.toString(\"hex\"));\n        let key = derivationResult.key;\n        return new userKeys_1.UserSecretKey(key);\n    }\n    getWords() {\n        return this.text.split(\" \");\n    }\n    toString() {\n        return this.text;\n    }\n}\nexports.Mnemonic = Mnemonic;\n//# sourceMappingURL=mnemonic.js.map"]},"metadata":{},"sourceType":"script"}