{"ast":null,"code":"var JSONStringify = function JSONStringify(data) {\n  return JSON.stringify(data, function (_, value) {\n    return typeof value === \"bigint\" ? value.toString() + \"n\" : value;\n  });\n};\nvar JSONParse = function JSONParse(json) {\n  var numbersBiggerThanMaxInt = /([\\[:])?(\\d{17,}|(?:[9](?:[1-9]07199254740991|0[1-9]7199254740991|00[8-9]199254740991|007[2-9]99254740991|007199[3-9]54740991|0071992[6-9]4740991|00719925[5-9]740991|007199254[8-9]40991|0071992547[5-9]0991|00719925474[1-9]991|00719925474099[2-9])))([,\\}\\]])/g;\n  var serializedData = json.replace(numbersBiggerThanMaxInt, \"$1\\\"$2n\\\"$3\");\n  return JSON.parse(serializedData, function (_, value) {\n    var isCustomFormatBigInt = typeof value === \"string\" && value.match(/^\\d+n$/);\n    if (isCustomFormatBigInt) return BigInt(value.substring(0, value.length - 1));\n    return value;\n  });\n};\nexport function safeJsonParse(value) {\n  if (typeof value !== \"string\") {\n    throw new Error(\"Cannot safe json parse value of type \".concat(typeof value));\n  }\n  try {\n    return JSONParse(value);\n  } catch (_a) {\n    return value;\n  }\n}\nexport function safeJsonStringify(value) {\n  return typeof value === \"string\" ? value : JSONStringify(value) || \"\";\n}","map":{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":"AAQA,IAAM,aAAa,GAAG,SAAhB,aAAa,CAAG,IAAI;EAAA,OACxB,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,UAAC,CAAC,EAAE,KAAK;IAAA,OAC5B,OAAO,KAAK,KAAK,QAAQ,GAAG,KAAK,CAAC,QAAQ,EAAE,GAAG,GAAG,GAAG,KAAK;EAAA,EAC3D;AAAA;AASH,IAAM,SAAS,GAAG,SAAZ,SAAS,CAAG,IAAI,EAAG;EAMvB,IAAM,uBAAuB,GAAG,oQAAoQ;EACpS,IAAM,cAAc,GAAG,IAAI,CAAC,OAAO,CAAC,uBAAuB,EAAE,aAAa,CAAC;EAE3E,OAAO,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE,UAAC,CAAC,EAAE,KAAK,EAAI;IAC7C,IAAM,oBAAoB,GACxB,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC;IAEpD,IAAI,oBAAoB,EACtB,OAAO,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IAErD,OAAO,KAAK;EACd,CAAC,CAAC;AACJ,CAAC;AAED,OAAM,SAAU,aAAa,CAAU,KAAa,EAAA;EAClD,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;IAC7B,MAAM,IAAI,KAAK,yCAAA,MAAA,CAAyC,OAAO,KAAK,EAAG;EACxE;EACD,IAAI;IACF,OAAO,SAAS,CAAC,KAAK,CAAC;GACxB,CAAC,OAAA,EAAA,EAAM;IACN,OAAO,KAAK;EACb;AACH;AAEA,OAAM,SAAU,iBAAiB,CAAC,KAAU,EAAA;EAC1C,OAAO,OAAO,KAAK,KAAK,QAAQ,GAAG,KAAK,GAAG,aAAa,CAAC,KAAK,CAAC,IAAI,EAAE;AACvE","sourceRoot":"","sourcesContent":["const JSONStringify = data => JSON.stringify(data, (_, value) => typeof value === \"bigint\" ? value.toString() + \"n\" : value);\nconst JSONParse = json => {\n    const numbersBiggerThanMaxInt = /([\\[:])?(\\d{17,}|(?:[9](?:[1-9]07199254740991|0[1-9]7199254740991|00[8-9]199254740991|007[2-9]99254740991|007199[3-9]54740991|0071992[6-9]4740991|00719925[5-9]740991|007199254[8-9]40991|0071992547[5-9]0991|00719925474[1-9]991|00719925474099[2-9])))([,\\}\\]])/g;\n    const serializedData = json.replace(numbersBiggerThanMaxInt, \"$1\\\"$2n\\\"$3\");\n    return JSON.parse(serializedData, (_, value) => {\n        const isCustomFormatBigInt = typeof value === \"string\" && value.match(/^\\d+n$/);\n        if (isCustomFormatBigInt)\n            return BigInt(value.substring(0, value.length - 1));\n        return value;\n    });\n};\nexport function safeJsonParse(value) {\n    if (typeof value !== \"string\") {\n        throw new Error(`Cannot safe json parse value of type ${typeof value}`);\n    }\n    try {\n        return JSONParse(value);\n    }\n    catch (_a) {\n        return value;\n    }\n}\nexport function safeJsonStringify(value) {\n    return typeof value === \"string\" ? value : JSONStringify(value) || \"\";\n}\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}