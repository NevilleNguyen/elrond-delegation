{"ast":null,"code":"\"use strict\";\n\nvar _createClass = require(\"/Users/neville/Documents/Github/elrond-delegation/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _classCallCheck = require(\"/Users/neville/Documents/Github/elrond-delegation/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _inherits = require(\"/Users/neville/Documents/Github/elrond-delegation/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/neville/Documents/Github/elrond-delegation/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _wrapNativeSuper = require(\"/Users/neville/Documents/Github/elrond-delegation/node_modules/@babel/runtime/helpers/wrapNativeSuper.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ErrBadAddress = exports.ErrSignerCannotSign = exports.ErrBadPEM = exports.ErrWrongMnemonic = exports.ErrInvariantFailed = exports.Err = void 0;\n/**\n * The base class for exceptions (errors).\n */\nvar Err = /*#__PURE__*/function (_Error) {\n  _inherits(Err, _Error);\n  var _super = _createSuper(Err);\n  function Err(message, inner) {\n    var _this;\n    _classCallCheck(this, Err);\n    _this = _super.call(this, message);\n    _this.inner = undefined;\n    _this.inner = inner;\n    return _this;\n  }\n  return _createClass(Err);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\nexports.Err = Err;\n/**\n * Signals that an invariant failed.\n */\nvar ErrInvariantFailed = /*#__PURE__*/function (_Err) {\n  _inherits(ErrInvariantFailed, _Err);\n  var _super2 = _createSuper(ErrInvariantFailed);\n  function ErrInvariantFailed(message) {\n    _classCallCheck(this, ErrInvariantFailed);\n    return _super2.call(this, \"\\\"Invariant failed: \".concat(message));\n  }\n  return _createClass(ErrInvariantFailed);\n}(Err);\nexports.ErrInvariantFailed = ErrInvariantFailed;\n/**\n * Signals a wrong mnemonic format.\n */\nvar ErrWrongMnemonic = /*#__PURE__*/function (_Err2) {\n  _inherits(ErrWrongMnemonic, _Err2);\n  var _super3 = _createSuper(ErrWrongMnemonic);\n  function ErrWrongMnemonic() {\n    _classCallCheck(this, ErrWrongMnemonic);\n    return _super3.call(this, \"Wrong mnemonic format\");\n  }\n  return _createClass(ErrWrongMnemonic);\n}(Err);\nexports.ErrWrongMnemonic = ErrWrongMnemonic;\n/**\n * Signals a bad PEM file.\n */\nvar ErrBadPEM = /*#__PURE__*/function (_Err3) {\n  _inherits(ErrBadPEM, _Err3);\n  var _super4 = _createSuper(ErrBadPEM);\n  function ErrBadPEM(message) {\n    _classCallCheck(this, ErrBadPEM);\n    return _super4.call(this, message ? \"Bad PEM: \".concat(message) : \"Bad PEM\");\n  }\n  return _createClass(ErrBadPEM);\n}(Err);\nexports.ErrBadPEM = ErrBadPEM;\n/**\n * Signals an error related to signing a message (a transaction).\n */\nvar ErrSignerCannotSign = /*#__PURE__*/function (_Err4) {\n  _inherits(ErrSignerCannotSign, _Err4);\n  var _super5 = _createSuper(ErrSignerCannotSign);\n  function ErrSignerCannotSign(inner) {\n    _classCallCheck(this, ErrSignerCannotSign);\n    return _super5.call(this, \"Cannot sign\", inner);\n  }\n  return _createClass(ErrSignerCannotSign);\n}(Err);\nexports.ErrSignerCannotSign = ErrSignerCannotSign;\n/**\n * Signals a bad address.\n */\nvar ErrBadAddress = /*#__PURE__*/function (_Err5) {\n  _inherits(ErrBadAddress, _Err5);\n  var _super6 = _createSuper(ErrBadAddress);\n  function ErrBadAddress(value, inner) {\n    _classCallCheck(this, ErrBadAddress);\n    return _super6.call(this, \"Bad address: \".concat(value), inner);\n  }\n  return _createClass(ErrBadAddress);\n}(Err);\nexports.ErrBadAddress = ErrBadAddress;","map":{"version":3,"sources":["../src/errors.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA;;AAEG;AAFH,IAGa,GAAI,0BAAA,MAAA;EAAA,SAAA,CAAA,GAAA,EAAA,MAAA;EAAA,IAAA,MAAA,GAAA,YAAA,CAAA,GAAA;EAGb,SAAA,IAAmB,OAAe,EAAE,KAAa,EAAA;IAAA,IAAA,KAAA;IAAA,eAAA,OAAA,GAAA;IAC7C,KAAA,GAAA,MAAA,CAAA,IAAA,OAAM,OAAO;IAHjB,KAAA,CAAA,KAAK,GAAsB,SAAS;IAIhC,KAAA,CAAK,KAAK,GAAG,KAAK;IAAC,OAAA,KAAA;EACvB;EAAC,OAAA,YAAA,CAAA,GAAA;AAAA,gBAAA,gBAAA,CANoB,KAAK;AAA9B,OAAA,CAAA,GAAA,GAAA,GAAA;AASA;;AAEG;AAFH,IAGa,kBAAmB,0BAAA,IAAA;EAAA,SAAA,CAAA,kBAAA,EAAA,IAAA;EAAA,IAAA,OAAA,GAAA,YAAA,CAAA,kBAAA;EAC5B,SAAA,mBAAmB,OAAe,EAAA;IAAA,eAAA,OAAA,kBAAA;IAAA,OAAA,OAAA,CAAA,IAAA,8BAAA,MAAA,CACF,OAAO;EACvC;EAAC,OAAA,YAAA,CAAA,kBAAA;AAAA,EAHmC,GAAG;AAA3C,OAAA,CAAA,kBAAA,GAAA,kBAAA;AAMA;;AAEG;AAFH,IAGa,gBAAiB,0BAAA,KAAA;EAAA,SAAA,CAAA,gBAAA,EAAA,KAAA;EAAA,IAAA,OAAA,GAAA,YAAA,CAAA,gBAAA;EAC1B,SAAA,iBAAA,EAAA;IAAA,eAAA,OAAA,gBAAA;IAAA,OAAA,OAAA,CAAA,IAAA,OACU,uBAAuB;EACjC;EAAC,OAAA,YAAA,CAAA,gBAAA;AAAA,EAHiC,GAAG;AAAzC,OAAA,CAAA,gBAAA,GAAA,gBAAA;AAMA;;AAEG;AAFH,IAGa,SAAU,0BAAA,KAAA;EAAA,SAAA,CAAA,SAAA,EAAA,KAAA;EAAA,IAAA,OAAA,GAAA,YAAA,CAAA,SAAA;EACnB,SAAA,UAAmB,OAAgB,EAAA;IAAA,eAAA,OAAA,SAAA;IAAA,OAAA,OAAA,CAAA,IAAA,OACzB,OAAO,eAAA,MAAA,CAAe,OAAO,aAAc;EACrD;EAAC,OAAA,YAAA,CAAA,SAAA;AAAA,EAH0B,GAAG;AAAlC,OAAA,CAAA,SAAA,GAAA,SAAA;AAMA;;AAEG;AAFH,IAGa,mBAAoB,0BAAA,KAAA;EAAA,SAAA,CAAA,mBAAA,EAAA,KAAA;EAAA,IAAA,OAAA,GAAA,YAAA,CAAA,mBAAA;EAC7B,SAAA,oBAAmB,KAAY,EAAA;IAAA,eAAA,OAAA,mBAAA;IAAA,OAAA,OAAA,CAAA,IAAA,sBACN,KAAK;EAC9B;EAAC,OAAA,YAAA,CAAA,mBAAA;AAAA,EAHoC,GAAG;AAA5C,OAAA,CAAA,mBAAA,GAAA,mBAAA;AAMA;;AAEG;AAFH,IAGc,aAAc,0BAAA,KAAA;EAAA,SAAA,CAAA,aAAA,EAAA,KAAA;EAAA,IAAA,OAAA,GAAA,YAAA,CAAA,aAAA;EACxB,SAAA,cAAmB,KAAa,EAAE,KAAa,EAAA;IAAA,eAAA,OAAA,aAAA;IAAA,OAAA,OAAA,CAAA,IAAA,uBAAA,MAAA,CACrB,KAAK,GAAI,KAAK;EACxC;EAAC,OAAA,YAAA,CAAA,aAAA;AAAA,EAH+B,GAAG;AAAtC,OAAA,CAAA,aAAA,GAAA,aAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ErrBadAddress = exports.ErrSignerCannotSign = exports.ErrBadPEM = exports.ErrWrongMnemonic = exports.ErrInvariantFailed = exports.Err = void 0;\n/**\n * The base class for exceptions (errors).\n */\nclass Err extends Error {\n    constructor(message, inner) {\n        super(message);\n        this.inner = undefined;\n        this.inner = inner;\n    }\n}\nexports.Err = Err;\n/**\n * Signals that an invariant failed.\n */\nclass ErrInvariantFailed extends Err {\n    constructor(message) {\n        super(`\"Invariant failed: ${message}`);\n    }\n}\nexports.ErrInvariantFailed = ErrInvariantFailed;\n/**\n * Signals a wrong mnemonic format.\n */\nclass ErrWrongMnemonic extends Err {\n    constructor() {\n        super(\"Wrong mnemonic format\");\n    }\n}\nexports.ErrWrongMnemonic = ErrWrongMnemonic;\n/**\n * Signals a bad PEM file.\n */\nclass ErrBadPEM extends Err {\n    constructor(message) {\n        super(message ? `Bad PEM: ${message}` : `Bad PEM`);\n    }\n}\nexports.ErrBadPEM = ErrBadPEM;\n/**\n * Signals an error related to signing a message (a transaction).\n */\nclass ErrSignerCannotSign extends Err {\n    constructor(inner) {\n        super(`Cannot sign`, inner);\n    }\n}\nexports.ErrSignerCannotSign = ErrSignerCannotSign;\n/**\n * Signals a bad address.\n */\nclass ErrBadAddress extends Err {\n    constructor(value, inner) {\n        super(`Bad address: ${value}`, inner);\n    }\n}\nexports.ErrBadAddress = ErrBadAddress;\n//# sourceMappingURL=errors.js.map"]},"metadata":{},"sourceType":"script"}