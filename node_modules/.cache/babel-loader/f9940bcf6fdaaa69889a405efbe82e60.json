{"ast":null,"code":"import{decodeString}from'@multiversx/sdk-core';import{denomination,decimals,feesInEpoch,stakePerNode,protocolSustainabilityRewards,yearSettings,genesisTokenSupply}from'config';import denominate from'helpers/denominate';var denominateValue=function denominateValue(value){var denominatedValueString=denominate({input:value,denomination:denomination,decimals:decimals});var valueWithoutComma=denominatedValueString.replace(/,/g,'');return valueWithoutComma;};var calculateAnnualPercentage=function calculateAnnualPercentage(_ref){var _yearSettings$find;var activeStake=_ref.activeStake,blsKeys=_ref.blsKeys,networkStatus=_ref.networkStatus,networkStake=_ref.networkStake,networkConfig=_ref.networkConfig,serviceFee=_ref.serviceFee;var allNodes=blsKeys.filter(function(key){return decodeString(key)==='staked'||decodeString(key)==='jailed'||decodeString(key)==='queued';}).length;var allActiveNodes=blsKeys.filter(function(key){return decodeString(key)==='staked';}).length;if(allActiveNodes<=0){return'0.00';}var epochDurationInSeconds=networkConfig.RoundDuration/1000*networkConfig.RoundsPerEpoch;var secondsInYear=365*24*3600;var epochsInYear=secondsInYear/epochDurationInSeconds;var inflationRate=((_yearSettings$find=yearSettings.find(function(x){return x.year===Math.floor(networkStatus.EpochNumber/epochsInYear)+1;}))===null||_yearSettings$find===void 0?void 0:_yearSettings$find.maximumInflation)||0;var rewardsPerEpoch=Math.max(inflationRate*genesisTokenSupply/epochsInYear,feesInEpoch);var rewardsPerEpochWithoutProtocolSustainability=(1-protocolSustainabilityRewards)*rewardsPerEpoch;var topUpRewardsLimit=networkConfig.TopUpFactor*rewardsPerEpochWithoutProtocolSustainability;var networkBaseStake=networkStake.ActiveValidators*stakePerNode;var networkTotalStake=parseInt(denominateValue(networkStatus.Balance));var networkTopUpStake=networkTotalStake-networkStake.TotalValidators*stakePerNode-networkStake.QueueSize*stakePerNode;var topUpReward=2*topUpRewardsLimit/Math.PI*Math.atan(networkTopUpStake/(2*parseInt(denominateValue(networkConfig.TopUpRewardsGradientPoint.toFixed()))));var baseReward=rewardsPerEpochWithoutProtocolSustainability-topUpReward;var validatorTotalStake=parseInt(denominateValue(activeStake));var actualNumberOfNodes=Math.min(Math.floor(validatorTotalStake/stakePerNode),allActiveNodes);var validatorBaseStake=actualNumberOfNodes*stakePerNode;var validatorTopUpStake=(validatorTotalStake-allNodes*stakePerNode)/allNodes*allActiveNodes;var validatorTopUpReward=networkTopUpStake>0?validatorTopUpStake/networkTopUpStake*topUpReward:0;var validatorBaseReward=validatorBaseStake/networkBaseStake*baseReward;var anualPercentageRate=epochsInYear*(validatorTopUpReward+validatorBaseReward)/validatorTotalStake;var annuallPercentageRateTotal=anualPercentageRate*100-anualPercentageRate*100*(serviceFee/100);return annuallPercentageRateTotal.toFixed(2).toString();};export default calculateAnnualPercentage;","map":{"version":3,"names":["decodeString","denomination","decimals","feesInEpoch","stakePerNode","protocolSustainabilityRewards","yearSettings","genesisTokenSupply","denominate","denominateValue","value","denominatedValueString","input","valueWithoutComma","replace","calculateAnnualPercentage","_ref","_yearSettings$find","activeStake","blsKeys","networkStatus","networkStake","networkConfig","serviceFee","allNodes","filter","key","length","allActiveNodes","epochDurationInSeconds","RoundDuration","RoundsPerEpoch","secondsInYear","epochsInYear","inflationRate","find","x","year","Math","floor","EpochNumber","maximumInflation","rewardsPerEpoch","max","rewardsPerEpochWithoutProtocolSustainability","topUpRewardsLimit","TopUpFactor","networkBaseStake","ActiveValidators","networkTotalStake","parseInt","Balance","networkTopUpStake","TotalValidators","QueueSize","topUpReward","PI","atan","TopUpRewardsGradientPoint","toFixed","baseReward","validatorTotalStake","actualNumberOfNodes","min","validatorBaseStake","validatorTopUpStake","validatorTopUpReward","validatorBaseReward","anualPercentageRate","annuallPercentageRateTotal","toString"],"sources":["/Users/neville/Documents/Github/elrond-delegation/src/components/Cards/helpers/calculateAnnualPercentage.ts"],"sourcesContent":["import { decodeString } from '@multiversx/sdk-core';\nimport {\n  denomination,\n  decimals,\n  feesInEpoch,\n  stakePerNode,\n  protocolSustainabilityRewards,\n  yearSettings,\n  genesisTokenSupply\n} from 'config';\nimport denominate from 'helpers/denominate';\n\nconst denominateValue = (value: string) => {\n  const denominatedValueString = denominate({\n    input: value,\n    denomination,\n    decimals\n  });\n  const valueWithoutComma = denominatedValueString.replace(/,/g, '');\n  return valueWithoutComma;\n};\n\nconst calculateAnnualPercentage = ({\n  activeStake,\n  blsKeys,\n  networkStatus,\n  networkStake,\n  networkConfig,\n  serviceFee\n}: any) => {\n  const allNodes = blsKeys.filter(\n    (key: any) =>\n      decodeString(key) === 'staked' ||\n      decodeString(key) === 'jailed' ||\n      decodeString(key) === 'queued'\n  ).length;\n  const allActiveNodes = blsKeys.filter(\n    (key: any) => decodeString(key) === 'staked'\n  ).length;\n  if (allActiveNodes <= 0) {\n    return '0.00';\n  }\n\n  const epochDurationInSeconds =\n    (networkConfig.RoundDuration / 1000) * networkConfig.RoundsPerEpoch;\n  const secondsInYear = 365 * 24 * 3600;\n  const epochsInYear = secondsInYear / epochDurationInSeconds;\n  const inflationRate =\n    yearSettings.find(\n      (x) => x.year === Math.floor(networkStatus.EpochNumber / epochsInYear) + 1\n    )?.maximumInflation || 0;\n  const rewardsPerEpoch = Math.max(\n    (inflationRate * genesisTokenSupply) / epochsInYear,\n    feesInEpoch\n  );\n  const rewardsPerEpochWithoutProtocolSustainability =\n    (1 - protocolSustainabilityRewards) * rewardsPerEpoch;\n  const topUpRewardsLimit =\n    networkConfig.TopUpFactor * rewardsPerEpochWithoutProtocolSustainability;\n\n  const networkBaseStake = networkStake.ActiveValidators * stakePerNode;\n  const networkTotalStake = parseInt(denominateValue(networkStatus.Balance));\n  const networkTopUpStake =\n    networkTotalStake -\n    networkStake.TotalValidators * stakePerNode -\n    networkStake.QueueSize * stakePerNode;\n  const topUpReward =\n    ((2 * topUpRewardsLimit) / Math.PI) *\n    Math.atan(\n      networkTopUpStake /\n        (2 *\n          parseInt(\n            denominateValue(networkConfig.TopUpRewardsGradientPoint.toFixed())\n          ))\n    );\n\n  const baseReward = rewardsPerEpochWithoutProtocolSustainability - topUpReward;\n  const validatorTotalStake = parseInt(denominateValue(activeStake));\n  const actualNumberOfNodes = Math.min(\n    Math.floor(validatorTotalStake / stakePerNode),\n    allActiveNodes\n  );\n  const validatorBaseStake = actualNumberOfNodes * stakePerNode;\n\n  const validatorTopUpStake =\n    ((validatorTotalStake - allNodes * stakePerNode) / allNodes) *\n    allActiveNodes;\n  const validatorTopUpReward =\n    networkTopUpStake > 0\n      ? (validatorTopUpStake / networkTopUpStake) * topUpReward\n      : 0;\n  const validatorBaseReward =\n    (validatorBaseStake / networkBaseStake) * baseReward;\n  const anualPercentageRate =\n    (epochsInYear * (validatorTopUpReward + validatorBaseReward)) /\n    validatorTotalStake;\n  const annuallPercentageRateTotal =\n    anualPercentageRate * 100 - anualPercentageRate * 100 * (serviceFee / 100);\n\n  return annuallPercentageRateTotal.toFixed(2).toString();\n};\n\nexport default calculateAnnualPercentage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}