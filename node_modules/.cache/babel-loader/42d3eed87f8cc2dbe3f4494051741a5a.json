{"ast":null,"code":"\"use strict\";\n\nvar _createClass = require(\"/Users/neville/Documents/Github/elrond-delegation/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _classCallCheck = require(\"/Users/neville/Documents/Github/elrond-delegation/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _inherits = require(\"/Users/neville/Documents/Github/elrond-delegation/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/neville/Documents/Github/elrond-delegation/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _wrapNativeSuper = require(\"/Users/neville/Documents/Github/elrond-delegation/node_modules/@babel/runtime/helpers/wrapNativeSuper.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WalletConnectV2ProviderErrorMessagesEnum = exports.ErrBadAddress = exports.ErrNotImplemented = exports.Err = void 0;\n/**\n * The base class for exceptions (errors).\n */\nvar Err = /*#__PURE__*/function (_Error) {\n  _inherits(Err, _Error);\n  var _super = _createSuper(Err);\n  function Err(message, inner) {\n    var _this;\n    _classCallCheck(this, Err);\n    _this = _super.call(this, message);\n    _this.inner = undefined;\n    _this.inner = inner;\n    return _this;\n  }\n  return _createClass(Err);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\nexports.Err = Err;\n/**\n * Signals that a method is not yet implemented\n */\nvar ErrNotImplemented = /*#__PURE__*/function (_Err) {\n  _inherits(ErrNotImplemented, _Err);\n  var _super2 = _createSuper(ErrNotImplemented);\n  function ErrNotImplemented() {\n    _classCallCheck(this, ErrNotImplemented);\n    return _super2.call(this, \"Method not yet implemented\");\n  }\n  return _createClass(ErrNotImplemented);\n}(Err);\nexports.ErrNotImplemented = ErrNotImplemented;\n/**\n * Signals a bad address.\n */\nvar ErrBadAddress = /*#__PURE__*/function (_Err2) {\n  _inherits(ErrBadAddress, _Err2);\n  var _super3 = _createSuper(ErrBadAddress);\n  function ErrBadAddress(value, inner) {\n    _classCallCheck(this, ErrBadAddress);\n    return _super3.call(this, \"Bad address: \".concat(value), inner);\n  }\n  return _createClass(ErrBadAddress);\n}(Err);\nexports.ErrBadAddress = ErrBadAddress;\n/**\n * WalletConnect V2 Error Messages\n */\nvar WalletConnectV2ProviderErrorMessagesEnum;\n(function (WalletConnectV2ProviderErrorMessagesEnum) {\n  WalletConnectV2ProviderErrorMessagesEnum[\"unableToInit\"] = \"WalletConnect is unable to init\";\n  WalletConnectV2ProviderErrorMessagesEnum[\"notInitialized\"] = \"WalletConnect is not initialized\";\n  WalletConnectV2ProviderErrorMessagesEnum[\"unableToConnect\"] = \"WalletConnect is unable to connect\";\n  WalletConnectV2ProviderErrorMessagesEnum[\"unableToConnectExisting\"] = \"WalletConnect is unable to connect to existing pairing\";\n  WalletConnectV2ProviderErrorMessagesEnum[\"unableToSignLoginToken\"] = \"WalletConnect could not sign login token\";\n  WalletConnectV2ProviderErrorMessagesEnum[\"unableToLogin\"] = \"WalletConnect is unable to login\";\n  WalletConnectV2ProviderErrorMessagesEnum[\"unableToHandleTopic\"] = \"WalletConnect: Unable to handle topic update\";\n  WalletConnectV2ProviderErrorMessagesEnum[\"unableToHandleEvent\"] = \"WalletConnect: Unable to handle events\";\n  WalletConnectV2ProviderErrorMessagesEnum[\"unableToHandleCleanup\"] = \"WalletConnect: Unable to handle cleanup\";\n  WalletConnectV2ProviderErrorMessagesEnum[\"sessionNotConnected\"] = \"WalletConnect Session is not connected\";\n  WalletConnectV2ProviderErrorMessagesEnum[\"sessionDeleted\"] = \"WalletConnect Session Deleted\";\n  WalletConnectV2ProviderErrorMessagesEnum[\"sessionExpired\"] = \"WalletConnect Session Expired\";\n  WalletConnectV2ProviderErrorMessagesEnum[\"alreadyLoggedOut\"] = \"WalletConnect: Already logged out\";\n  WalletConnectV2ProviderErrorMessagesEnum[\"pingFailed\"] = \"WalletConnect Ping Failed\";\n  WalletConnectV2ProviderErrorMessagesEnum[\"invalidAddress\"] = \"WalletConnect: Invalid address\";\n  WalletConnectV2ProviderErrorMessagesEnum[\"requestDifferentChain\"] = \"WalletConnect: Request Chain Id different than Connection Chain Id\";\n  WalletConnectV2ProviderErrorMessagesEnum[\"invalidMessageResponse\"] = \"WalletConnect could not sign the message\";\n  WalletConnectV2ProviderErrorMessagesEnum[\"invalidMessageSignature\"] = \"WalletConnect: Invalid message signature\";\n  WalletConnectV2ProviderErrorMessagesEnum[\"invalidTransactionResponse\"] = \"WalletConnect could not sign the transactions. Invalid signatures\";\n  WalletConnectV2ProviderErrorMessagesEnum[\"invalidCustomRequestResponse\"] = \"WalletConnect could not send the custom request\";\n  WalletConnectV2ProviderErrorMessagesEnum[\"transactionError\"] = \"Transaction canceled\";\n  WalletConnectV2ProviderErrorMessagesEnum[\"connectionError\"] = \"WalletConnect could not establish a connection\";\n})(WalletConnectV2ProviderErrorMessagesEnum = exports.WalletConnectV2ProviderErrorMessagesEnum || (exports.WalletConnectV2ProviderErrorMessagesEnum = {}));","map":{"version":3,"sources":["../src/errors.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA;;AAEG;AAFH,IAGa,GAAI,0BAAA,MAAA;EAAA,SAAA,CAAA,GAAA,EAAA,MAAA;EAAA,IAAA,MAAA,GAAA,YAAA,CAAA,GAAA;EAGf,SAAA,IAAmB,OAAe,EAAE,KAAa,EAAA;IAAA,IAAA,KAAA;IAAA,eAAA,OAAA,GAAA;IAC/C,KAAA,GAAA,MAAA,CAAA,IAAA,OAAM,OAAO;IAHf,KAAA,CAAA,KAAK,GAAsB,SAAS;IAIlC,KAAA,CAAK,KAAK,GAAG,KAAK;IAAC,OAAA,KAAA;EACrB;EAAC,OAAA,YAAA,CAAA,GAAA;AAAA,gBAAA,gBAAA,CANsB,KAAK;AAA9B,OAAA,CAAA,GAAA,GAAA,GAAA;AASA;;AAEG;AAFH,IAGa,iBAAkB,0BAAA,IAAA;EAAA,SAAA,CAAA,iBAAA,EAAA,IAAA;EAAA,IAAA,OAAA,GAAA,YAAA,CAAA,iBAAA;EAC7B,SAAA,kBAAA,EAAA;IAAA,eAAA,OAAA,iBAAA;IAAA,OAAA,OAAA,CAAA,IAAA,OACQ,4BAA4B;EACpC;EAAC,OAAA,YAAA,CAAA,iBAAA;AAAA,EAHoC,GAAG;AAA1C,OAAA,CAAA,iBAAA,GAAA,iBAAA;AAMA;;AAEG;AAFH,IAGa,aAAc,0BAAA,KAAA;EAAA,SAAA,CAAA,aAAA,EAAA,KAAA;EAAA,IAAA,OAAA,GAAA,YAAA,CAAA,aAAA;EACzB,SAAA,cAAmB,KAAa,EAAE,KAAa,EAAA;IAAA,eAAA,OAAA,aAAA;IAAA,OAAA,OAAA,CAAA,IAAA,uBAAA,MAAA,CACvB,KAAK,GAAI,KAAK;EACtC;EAAC,OAAA,YAAA,CAAA,aAAA;AAAA,EAHgC,GAAG;AAAtC,OAAA,CAAA,aAAA,GAAA,aAAA;AAMA;;AAEG;AAEH,IAAY,wCAuBX;AAvBD,CAAA,UAAY,wCAAwC,EAAA;EAClD,wCAAA,CAAA,cAAA,CAAA,GAAA,iCAAgD;EAChD,wCAAA,CAAA,gBAAA,CAAA,GAAA,kCAAmD;EACnD,wCAAA,CAAA,iBAAA,CAAA,GAAA,oCAAsD;EACtD,wCAAA,CAAA,yBAAA,CAAA,GAAA,wDAAkF;EAClF,wCAAA,CAAA,wBAAA,CAAA,GAAA,0CAAmE;EACnE,wCAAA,CAAA,eAAA,CAAA,GAAA,kCAAkD;EAClD,wCAAA,CAAA,qBAAA,CAAA,GAAA,8CAAoE;EACpE,wCAAA,CAAA,qBAAA,CAAA,GAAA,wCAA8D;EAC9D,wCAAA,CAAA,uBAAA,CAAA,GAAA,yCAAiE;EACjE,wCAAA,CAAA,qBAAA,CAAA,GAAA,wCAA8D;EAC9D,wCAAA,CAAA,gBAAA,CAAA,GAAA,+BAAgD;EAChD,wCAAA,CAAA,gBAAA,CAAA,GAAA,+BAAgD;EAChD,wCAAA,CAAA,kBAAA,CAAA,GAAA,mCAAsD;EACtD,wCAAA,CAAA,YAAA,CAAA,GAAA,2BAAwC;EACxC,wCAAA,CAAA,gBAAA,CAAA,GAAA,gCAAiD;EACjD,wCAAA,CAAA,uBAAA,CAAA,GAAA,oEAA4F;EAC5F,wCAAA,CAAA,wBAAA,CAAA,GAAA,0CAAmE;EACnE,wCAAA,CAAA,yBAAA,CAAA,GAAA,0CAAoE;EACpE,wCAAA,CAAA,4BAAA,CAAA,GAAA,mEAAgG;EAChG,wCAAA,CAAA,8BAAA,CAAA,GAAA,iDAAgF;EAChF,wCAAA,CAAA,kBAAA,CAAA,GAAA,sBAAyC;EACzC,wCAAA,CAAA,iBAAA,CAAA,GAAA,gDAAkE;AACpE,CAAC,EAvBW,wCAAwC,GAAxC,OAAA,CAAA,wCAAwC,KAAxC,OAAA,CAAA,wCAAwC,GAAA,CAAA,CAAA,CAAA,CAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WalletConnectV2ProviderErrorMessagesEnum = exports.ErrBadAddress = exports.ErrNotImplemented = exports.Err = void 0;\n/**\n * The base class for exceptions (errors).\n */\nclass Err extends Error {\n    constructor(message, inner) {\n        super(message);\n        this.inner = undefined;\n        this.inner = inner;\n    }\n}\nexports.Err = Err;\n/**\n * Signals that a method is not yet implemented\n */\nclass ErrNotImplemented extends Err {\n    constructor() {\n        super(\"Method not yet implemented\");\n    }\n}\nexports.ErrNotImplemented = ErrNotImplemented;\n/**\n * Signals a bad address.\n */\nclass ErrBadAddress extends Err {\n    constructor(value, inner) {\n        super(`Bad address: ${value}`, inner);\n    }\n}\nexports.ErrBadAddress = ErrBadAddress;\n/**\n * WalletConnect V2 Error Messages\n */\nvar WalletConnectV2ProviderErrorMessagesEnum;\n(function (WalletConnectV2ProviderErrorMessagesEnum) {\n    WalletConnectV2ProviderErrorMessagesEnum[\"unableToInit\"] = \"WalletConnect is unable to init\";\n    WalletConnectV2ProviderErrorMessagesEnum[\"notInitialized\"] = \"WalletConnect is not initialized\";\n    WalletConnectV2ProviderErrorMessagesEnum[\"unableToConnect\"] = \"WalletConnect is unable to connect\";\n    WalletConnectV2ProviderErrorMessagesEnum[\"unableToConnectExisting\"] = \"WalletConnect is unable to connect to existing pairing\";\n    WalletConnectV2ProviderErrorMessagesEnum[\"unableToSignLoginToken\"] = \"WalletConnect could not sign login token\";\n    WalletConnectV2ProviderErrorMessagesEnum[\"unableToLogin\"] = \"WalletConnect is unable to login\";\n    WalletConnectV2ProviderErrorMessagesEnum[\"unableToHandleTopic\"] = \"WalletConnect: Unable to handle topic update\";\n    WalletConnectV2ProviderErrorMessagesEnum[\"unableToHandleEvent\"] = \"WalletConnect: Unable to handle events\";\n    WalletConnectV2ProviderErrorMessagesEnum[\"unableToHandleCleanup\"] = \"WalletConnect: Unable to handle cleanup\";\n    WalletConnectV2ProviderErrorMessagesEnum[\"sessionNotConnected\"] = \"WalletConnect Session is not connected\";\n    WalletConnectV2ProviderErrorMessagesEnum[\"sessionDeleted\"] = \"WalletConnect Session Deleted\";\n    WalletConnectV2ProviderErrorMessagesEnum[\"sessionExpired\"] = \"WalletConnect Session Expired\";\n    WalletConnectV2ProviderErrorMessagesEnum[\"alreadyLoggedOut\"] = \"WalletConnect: Already logged out\";\n    WalletConnectV2ProviderErrorMessagesEnum[\"pingFailed\"] = \"WalletConnect Ping Failed\";\n    WalletConnectV2ProviderErrorMessagesEnum[\"invalidAddress\"] = \"WalletConnect: Invalid address\";\n    WalletConnectV2ProviderErrorMessagesEnum[\"requestDifferentChain\"] = \"WalletConnect: Request Chain Id different than Connection Chain Id\";\n    WalletConnectV2ProviderErrorMessagesEnum[\"invalidMessageResponse\"] = \"WalletConnect could not sign the message\";\n    WalletConnectV2ProviderErrorMessagesEnum[\"invalidMessageSignature\"] = \"WalletConnect: Invalid message signature\";\n    WalletConnectV2ProviderErrorMessagesEnum[\"invalidTransactionResponse\"] = \"WalletConnect could not sign the transactions. Invalid signatures\";\n    WalletConnectV2ProviderErrorMessagesEnum[\"invalidCustomRequestResponse\"] = \"WalletConnect could not send the custom request\";\n    WalletConnectV2ProviderErrorMessagesEnum[\"transactionError\"] = \"Transaction canceled\";\n    WalletConnectV2ProviderErrorMessagesEnum[\"connectionError\"] = \"WalletConnect could not establish a connection\";\n})(WalletConnectV2ProviderErrorMessagesEnum = exports.WalletConnectV2ProviderErrorMessagesEnum || (exports.WalletConnectV2ProviderErrorMessagesEnum = {}));\n//# sourceMappingURL=errors.js.map"]},"metadata":{},"sourceType":"script"}