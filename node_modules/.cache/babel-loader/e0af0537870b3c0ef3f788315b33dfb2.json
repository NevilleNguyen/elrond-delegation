{"ast":null,"code":"import _objectSpread from \"/Users/neville/Documents/Github/elrond-delegation/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { decimals as defaultDecimals, denomination as defaultDenomination } from 'config';\nfunction format(big, denomination, decimals, showLastNonZeroDecimal, addCommas) {\n  showLastNonZeroDecimal = typeof showLastNonZeroDecimal !== 'undefined' ? showLastNonZeroDecimal : false;\n  var array = big.toString().split('');\n  if (denomination !== 0) {\n    // make sure we have enough characters\n    while (array.length < denomination + 1) {\n      array.unshift('0');\n    }\n    // add our dot\n    array.splice(array.length - denomination, 0, '.');\n    // make sure there are enough decimals after the dot\n    while (array.length - array.indexOf('.') <= decimals) {\n      array.push('0');\n    }\n    if (showLastNonZeroDecimal) {\n      var nonZeroDigitIndex = 0;\n      for (var i = array.length - 1; i > 0; i--) {\n        if (array[i] !== '0') {\n          nonZeroDigitIndex = i + 1;\n          break;\n        }\n      }\n      var decimalsIndex = array.indexOf('.') + decimals + 1;\n      var sliceIndex = Math.max(decimalsIndex, nonZeroDigitIndex);\n      array = array.slice(0, sliceIndex);\n    } else {\n      // trim unnecessary characters after the dot\n      array = array.slice(0, array.indexOf('.') + decimals + 1);\n    }\n  }\n  if (addCommas) {\n    // add comas every 3 characters\n    array = array.reverse();\n    var reference = denomination ? array.length - array.indexOf('.') - 1 : array.length;\n    var count = Math.floor(reference / 3);\n    for (var _i = 1; _i <= count; _i++) {\n      var position = array.indexOf('.') + 3 * _i + _i;\n      if (position !== array.length) {\n        array.splice(position, 0, ',');\n      }\n    }\n    array = array.reverse();\n  }\n  var allDecimalsZero = array.slice(array.indexOf('.') + 1).every(function (digit) {\n    return digit.toString() === '0';\n  });\n  var string = array.join('');\n  if (allDecimalsZero) {\n    return string.split('.')[0];\n  }\n  return decimals === 0 ? string.split('.').join('') : string;\n}\nexport default function denominate(_ref) {\n  var input = _ref.input,\n    denomination = _ref.denomination,\n    decimals = _ref.decimals,\n    _ref$showLastNonZeroD = _ref.showLastNonZeroDecimal,\n    showLastNonZeroDecimal = _ref$showLastNonZeroD === void 0 ? false : _ref$showLastNonZeroD,\n    _ref$addCommas = _ref.addCommas,\n    addCommas = _ref$addCommas === void 0 ? true : _ref$addCommas;\n  if (input === '...') {\n    return input;\n  }\n  if (input === '' || input === '0' || input === undefined) {\n    input = '0';\n  }\n  return format(input, denomination, decimals, showLastNonZeroDecimal, addCommas);\n}\nexport var denominated = function denominated(input, parameters) {\n  return denominate(_objectSpread({\n    input: input,\n    denomination: defaultDenomination,\n    decimals: defaultDecimals\n  }, parameters));\n};","map":{"version":3,"names":["decimals","defaultDecimals","denomination","defaultDenomination","format","big","showLastNonZeroDecimal","addCommas","array","toString","split","length","unshift","splice","indexOf","push","nonZeroDigitIndex","i","decimalsIndex","sliceIndex","Math","max","slice","reverse","reference","count","floor","position","allDecimalsZero","every","digit","string","join","denominate","_ref","input","_ref$showLastNonZeroD","_ref$addCommas","undefined","denominated","parameters","_objectSpread"],"sources":["/Users/neville/Documents/Github/elrond-delegation/src/helpers/denominate.ts"],"sourcesContent":["import {\n  decimals as defaultDecimals,\n  denomination as defaultDenomination\n} from 'config';\n\nfunction format(\n  big: string,\n  denomination: number,\n  decimals: number,\n  showLastNonZeroDecimal: boolean,\n  addCommas: boolean\n) {\n  showLastNonZeroDecimal =\n    typeof showLastNonZeroDecimal !== 'undefined'\n      ? showLastNonZeroDecimal\n      : false;\n  let array = big.toString().split('');\n  if (denomination !== 0) {\n    // make sure we have enough characters\n    while (array.length < denomination + 1) {\n      array.unshift('0');\n    }\n    // add our dot\n    array.splice(array.length - denomination, 0, '.');\n    // make sure there are enough decimals after the dot\n    while (array.length - array.indexOf('.') <= decimals) {\n      array.push('0');\n    }\n\n    if (showLastNonZeroDecimal) {\n      let nonZeroDigitIndex = 0;\n      for (let i = array.length - 1; i > 0; i--) {\n        if (array[i] !== '0') {\n          nonZeroDigitIndex = i + 1;\n          break;\n        }\n      }\n      const decimalsIndex = array.indexOf('.') + decimals + 1;\n      const sliceIndex = Math.max(decimalsIndex, nonZeroDigitIndex);\n      array = array.slice(0, sliceIndex);\n    } else {\n      // trim unnecessary characters after the dot\n      array = array.slice(0, array.indexOf('.') + decimals + 1);\n    }\n  }\n  if (addCommas) {\n    // add comas every 3 characters\n    array = array.reverse();\n    const reference = denomination\n      ? array.length - array.indexOf('.') - 1\n      : array.length;\n    const count = Math.floor(reference / 3);\n    for (let i = 1; i <= count; i++) {\n      const position = array.indexOf('.') + 3 * i + i;\n      if (position !== array.length) {\n        array.splice(position, 0, ',');\n      }\n    }\n    array = array.reverse();\n  }\n\n  const allDecimalsZero = array\n    .slice(array.indexOf('.') + 1)\n    .every((digit) => digit.toString() === '0');\n\n  const string = array.join('');\n\n  if (allDecimalsZero) {\n    return string.split('.')[0];\n  }\n\n  return decimals === 0 ? string.split('.').join('') : string;\n}\n\ninterface DenominateType {\n  input: string;\n  denomination: number;\n  decimals: number;\n  showLastNonZeroDecimal?: boolean;\n  addCommas?: boolean;\n}\n\nexport default function denominate({\n  input,\n  denomination,\n  decimals,\n  showLastNonZeroDecimal = false,\n  addCommas = true\n}: DenominateType): string {\n  if (input === '...') {\n    return input;\n  }\n  if (input === '' || input === '0' || input === undefined) {\n    input = '0';\n  }\n  return format(\n    input,\n    denomination,\n    decimals,\n    showLastNonZeroDecimal,\n    addCommas\n  );\n}\n\ninterface DenominatedType {\n  denomination?: number;\n  decimals?: number;\n  showLastNonZeroDecimal?: boolean;\n  addCommas?: boolean;\n}\n\nexport const denominated = (\n  input: string,\n  parameters?: DenominatedType\n): string =>\n  denominate({\n    input,\n    denomination: defaultDenomination,\n    decimals: defaultDecimals,\n    ...parameters\n  });\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}