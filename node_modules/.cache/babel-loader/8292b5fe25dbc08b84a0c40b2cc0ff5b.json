{"ast":null,"code":"import { parseAmount } from '@multiversx/sdk-dapp/utils/operations/parseAmount';\nimport BigNumber from 'bignumber.js';\nimport { string } from 'yup';\nimport { network, denomination } from 'config';\nimport { denominated } from 'helpers/denominate';\nvar undelegateValidator = function undelegateValidator(input) {\n  return string().required('Required').test('minimum', 'Value must be greater than zero.', function () {\n    var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '0';\n    return new BigNumber(parseAmount(value, denomination)).isGreaterThanOrEqualTo(1);\n  }).test('remaining', \"Either undelegate the total amount or leave at least 1 \".concat(network.egldLabel, \" staked.\"), function () {\n    var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '0';\n    var requested = new BigNumber(parseAmount(value, denomination));\n    var minimum = new BigNumber(parseAmount('1', denomination));\n    var total = new BigNumber(input);\n    var oneLeft = total.minus(requested).isGreaterThanOrEqualTo(minimum);\n    var clearance = total.isEqualTo(value) || total.isEqualTo(requested);\n    return oneLeft || clearance;\n  }).test('maximum', \"You need to set a value under \".concat(denominated(input), \" \").concat(network.egldLabel, \".\"), function () {\n    var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '0';\n    var requested = new BigNumber(parseAmount(value, denomination));\n    var total = new BigNumber(input);\n    var maxed = total.isEqualTo(value);\n    var below = requested.isLessThanOrEqualTo(input);\n    return maxed || below;\n  });\n};\nvar delegateValidator = function delegateValidator(input, limit) {\n  return string().required('Required').test('minimum', 'Value must be greater than zero.', function () {\n    var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '0';\n    return new BigNumber(parseAmount(value, denomination)).isGreaterThanOrEqualTo(1);\n  }).test('maximum', \"You need to set a value under \".concat(denominated(input), \" \").concat(network.egldLabel, \".\"), function () {\n    var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '0';\n    return new BigNumber(parseAmount(value, denomination)).isLessThanOrEqualTo(input);\n  }).test('uncapable', \"Max delegation cap reached. That is the maximum amount you can delegate: \".concat(denominated(limit), \" \").concat(network.egldLabel), function () {\n    var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '0';\n    return new BigNumber(parseAmount(value, denomination)).isLessThanOrEqualTo(limit);\n  });\n};\nexport { delegateValidator, undelegateValidator };","map":{"version":3,"names":["parseAmount","BigNumber","string","network","denomination","denominated","undelegateValidator","input","required","test","value","arguments","length","undefined","isGreaterThanOrEqualTo","concat","egldLabel","requested","minimum","total","oneLeft","minus","clearance","isEqualTo","maxed","below","isLessThanOrEqualTo","delegateValidator","limit"],"sources":["/Users/neville/Documents/Github/elrond-delegation/src/components/Stake/helpers/delegationValidators.ts"],"sourcesContent":["import { parseAmount } from '@multiversx/sdk-dapp/utils/operations/parseAmount';\n\nimport BigNumber from 'bignumber.js';\nimport { string } from 'yup';\nimport { network, denomination } from 'config';\nimport { denominated } from 'helpers/denominate';\n\nconst undelegateValidator = (input: string) =>\n  string()\n    .required('Required')\n    .test('minimum', 'Value must be greater than zero.', (value = '0') =>\n      new BigNumber(parseAmount(value, denomination)).isGreaterThanOrEqualTo(1)\n    )\n    .test(\n      'remaining',\n      `Either undelegate the total amount or leave at least 1 ${network.egldLabel} staked.`,\n      (value = '0') => {\n        const requested = new BigNumber(parseAmount(value, denomination));\n        const minimum = new BigNumber(parseAmount('1', denomination));\n        const total = new BigNumber(input);\n\n        const oneLeft = total.minus(requested).isGreaterThanOrEqualTo(minimum);\n        const clearance = total.isEqualTo(value) || total.isEqualTo(requested);\n\n        return oneLeft || clearance;\n      }\n    )\n    .test(\n      'maximum',\n      `You need to set a value under ${denominated(input)} ${\n        network.egldLabel\n      }.`,\n      (value = '0') => {\n        const requested = new BigNumber(parseAmount(value, denomination));\n        const total = new BigNumber(input);\n        const maxed = total.isEqualTo(value);\n        const below = requested.isLessThanOrEqualTo(input);\n\n        return maxed || below;\n      }\n    );\n\nconst delegateValidator = (input: string, limit: string) =>\n  string()\n    .required('Required')\n    .test('minimum', 'Value must be greater than zero.', (value = '0') =>\n      new BigNumber(parseAmount(value, denomination)).isGreaterThanOrEqualTo(1)\n    )\n    .test(\n      'maximum',\n      `You need to set a value under ${denominated(input)} ${\n        network.egldLabel\n      }.`,\n      (value = '0') =>\n        new BigNumber(parseAmount(value, denomination)).isLessThanOrEqualTo(\n          input\n        )\n    )\n    .test(\n      'uncapable',\n      `Max delegation cap reached. That is the maximum amount you can delegate: ${denominated(\n        limit\n      )} ${network.egldLabel}`,\n      (value = '0') =>\n        new BigNumber(parseAmount(value, denomination)).isLessThanOrEqualTo(\n          limit\n        )\n    );\n\nexport { delegateValidator, undelegateValidator };\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,mDAAmD;AAE/E,OAAOC,SAAS,MAAM,cAAc;AACpC,SAASC,MAAM,QAAQ,KAAK;AAC5B,SAASC,OAAO,EAAEC,YAAY,QAAQ,QAAQ;AAC9C,SAASC,WAAW,QAAQ,oBAAoB;AAEhD,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAmBA,CAAIC,KAAa;EAAA,OACxCL,MAAM,EAAE,CACLM,QAAQ,CAAC,UAAU,CAAC,CACpBC,IAAI,CAAC,SAAS,EAAE,kCAAkC,EAAE;IAAA,IAACC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,GAAG;IAAA,OAC/D,IAAIV,SAAS,CAACD,WAAW,CAACU,KAAK,EAAEN,YAAY,CAAC,CAAC,CAACU,sBAAsB,CAAC,CAAC,CAAC;EAAA,EAC1E,CACAL,IAAI,CACH,WAAW,4DAAAM,MAAA,CAC+CZ,OAAO,CAACa,SAAS,eAC3E,YAAiB;IAAA,IAAhBN,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,GAAG;IACV,IAAMM,SAAS,GAAG,IAAIhB,SAAS,CAACD,WAAW,CAACU,KAAK,EAAEN,YAAY,CAAC,CAAC;IACjE,IAAMc,OAAO,GAAG,IAAIjB,SAAS,CAACD,WAAW,CAAC,GAAG,EAAEI,YAAY,CAAC,CAAC;IAC7D,IAAMe,KAAK,GAAG,IAAIlB,SAAS,CAACM,KAAK,CAAC;IAElC,IAAMa,OAAO,GAAGD,KAAK,CAACE,KAAK,CAACJ,SAAS,CAAC,CAACH,sBAAsB,CAACI,OAAO,CAAC;IACtE,IAAMI,SAAS,GAAGH,KAAK,CAACI,SAAS,CAACb,KAAK,CAAC,IAAIS,KAAK,CAACI,SAAS,CAACN,SAAS,CAAC;IAEtE,OAAOG,OAAO,IAAIE,SAAS;EAC7B,CAAC,CACF,CACAb,IAAI,CACH,SAAS,mCAAAM,MAAA,CACwBV,WAAW,CAACE,KAAK,CAAC,OAAAQ,MAAA,CACjDZ,OAAO,CAACa,SAAS,QAEnB,YAAiB;IAAA,IAAhBN,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,GAAG;IACV,IAAMM,SAAS,GAAG,IAAIhB,SAAS,CAACD,WAAW,CAACU,KAAK,EAAEN,YAAY,CAAC,CAAC;IACjE,IAAMe,KAAK,GAAG,IAAIlB,SAAS,CAACM,KAAK,CAAC;IAClC,IAAMiB,KAAK,GAAGL,KAAK,CAACI,SAAS,CAACb,KAAK,CAAC;IACpC,IAAMe,KAAK,GAAGR,SAAS,CAACS,mBAAmB,CAACnB,KAAK,CAAC;IAElD,OAAOiB,KAAK,IAAIC,KAAK;EACvB,CAAC,CACF;AAAA;AAEL,IAAME,iBAAiB,GAAG,SAApBA,iBAAiBA,CAAIpB,KAAa,EAAEqB,KAAa;EAAA,OACrD1B,MAAM,EAAE,CACLM,QAAQ,CAAC,UAAU,CAAC,CACpBC,IAAI,CAAC,SAAS,EAAE,kCAAkC,EAAE;IAAA,IAACC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,GAAG;IAAA,OAC/D,IAAIV,SAAS,CAACD,WAAW,CAACU,KAAK,EAAEN,YAAY,CAAC,CAAC,CAACU,sBAAsB,CAAC,CAAC,CAAC;EAAA,EAC1E,CACAL,IAAI,CACH,SAAS,mCAAAM,MAAA,CACwBV,WAAW,CAACE,KAAK,CAAC,OAAAQ,MAAA,CACjDZ,OAAO,CAACa,SAAS,QAEnB;IAAA,IAACN,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,GAAG;IAAA,OACV,IAAIV,SAAS,CAACD,WAAW,CAACU,KAAK,EAAEN,YAAY,CAAC,CAAC,CAACsB,mBAAmB,CACjEnB,KAAK,CACN;EAAA,EACJ,CACAE,IAAI,CACH,WAAW,8EAAAM,MAAA,CACiEV,WAAW,CACrFuB,KAAK,CACN,OAAAb,MAAA,CAAIZ,OAAO,CAACa,SAAS,GACtB;IAAA,IAACN,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,GAAG;IAAA,OACV,IAAIV,SAAS,CAACD,WAAW,CAACU,KAAK,EAAEN,YAAY,CAAC,CAAC,CAACsB,mBAAmB,CACjEE,KAAK,CACN;EAAA,EACJ;AAAA;AAEL,SAASD,iBAAiB,EAAErB,mBAAmB"},"metadata":{},"sourceType":"module"}