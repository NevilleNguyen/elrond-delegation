{"ast":null,"code":"import _regeneratorRuntime from\"/Users/neville/Documents/Github/elrond-delegation/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"/Users/neville/Documents/Github/elrond-delegation/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import{Address,SmartContract,TokenPayment}from'@multiversx/sdk-core';import{sendTransactions}from'@multiversx/sdk-dapp/services/transactions/sendTransactions';import{network,delegationContractData}from'config';var useTransaction=function useTransaction(){var sendTransaction=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(_ref){var args,value,type,address,contract,delegable,getFunctionName,getGasLimit,transaction;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:args=_ref.args,value=_ref.value,type=_ref.type;address=new Address(network.delegationContract);contract=new SmartContract({address:address});delegable=delegationContractData.find(function(item){return item.name===type;});if(delegable){_context.next=8;break;}throw new Error('The contract for this action is not defined.');case 8:getFunctionName=function getFunctionName(){return args===''?delegable.data:\"\".concat(delegable.data).concat(args);};getGasLimit=function getGasLimit(){var nodeKeys=args.split('@').slice(1);return delegable.data==='addNodes'&&args?delegable.gasLimit*(nodeKeys.length/2):delegable.gasLimit;};transaction={value:TokenPayment.egldFromAmount(value),data:getFunctionName(),receiver:contract.getAddress().bech32(),gasLimit:getGasLimit()};_context.next=13;return sendTransactions({transactions:[transaction]});case 13:return _context.abrupt(\"return\",_context.sent);case 14:case\"end\":return _context.stop();}},_callee);}));return function sendTransaction(_x){return _ref2.apply(this,arguments);};}();return{sendTransaction:sendTransaction};};export default useTransaction;","map":{"version":3,"names":["Address","SmartContract","TokenPayment","sendTransactions","network","delegationContractData","useTransaction","sendTransaction","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_ref","args","value","type","address","contract","delegable","getFunctionName","getGasLimit","transaction","wrap","_callee$","_context","prev","next","delegationContract","find","item","name","Error","data","concat","nodeKeys","split","slice","gasLimit","length","egldFromAmount","receiver","getAddress","bech32","transactions","abrupt","sent","stop","_x","apply","arguments"],"sources":["/Users/neville/Documents/Github/elrond-delegation/src/helpers/useTransaction.ts"],"sourcesContent":["import { Address, SmartContract, TokenPayment } from '@multiversx/sdk-core';\nimport { sendTransactions } from '@multiversx/sdk-dapp/services/transactions/sendTransactions';\nimport {\n  network,\n  DelegationContractType,\n  delegationContractData\n} from 'config';\n\ninterface TransactionParametersType {\n  args: string;\n  value: string;\n  type: string;\n}\n\nconst useTransaction = () => {\n  const sendTransaction = async ({\n    args,\n    value,\n    type\n  }: TransactionParametersType) => {\n    const address = new Address(network.delegationContract);\n    const contract = new SmartContract({ address });\n    const delegable = delegationContractData.find(\n      (item: DelegationContractType) => item.name === type\n    );\n\n    if (!delegable) {\n      throw new Error('The contract for this action is not defined.');\n    } else {\n      const getFunctionName = (): string =>\n        args === '' ? delegable.data : `${delegable.data}${args}`;\n\n      const getGasLimit = (): number => {\n        const nodeKeys = args.split('@').slice(1);\n\n        return delegable.data === 'addNodes' && args\n          ? delegable.gasLimit * (nodeKeys.length / 2)\n          : delegable.gasLimit;\n      };\n\n      const transaction = {\n        value: TokenPayment.egldFromAmount(value),\n        data: getFunctionName(),\n        receiver: contract.getAddress().bech32(),\n        gasLimit: getGasLimit()\n      };\n\n      return await sendTransactions({\n        transactions: [transaction]\n      });\n    }\n  };\n\n  return {\n    sendTransaction\n  };\n};\n\nexport default useTransaction;\n"],"mappings":"8RAAA,OAASA,OAAO,CAAEC,aAAa,CAAEC,YAAY,KAAQ,sBAAsB,CAC3E,OAASC,gBAAgB,KAAQ,6DAA6D,CAC9F,OACEC,OAAO,CAEPC,sBAAsB,KACjB,QAAQ,CAQf,GAAM,CAAAC,cAAc,CAAG,QAAjB,CAAAA,cAAcA,CAAA,CAAS,CAC3B,GAAM,CAAAC,eAAe,6BAAAC,KAAA,CAAAC,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,CAAG,SAAAC,QAAAC,IAAA,MAAAC,IAAA,CAAAC,KAAA,CAAAC,IAAA,CAAAC,OAAA,CAAAC,QAAA,CAAAC,SAAA,CAAAC,eAAA,CAAAC,WAAA,CAAAC,WAAA,QAAAZ,mBAAA,GAAAa,IAAA,UAAAC,SAAAC,QAAA,iBAAAA,QAAA,CAAAC,IAAA,CAAAD,QAAA,CAAAE,IAAA,SACtBb,IAAI,CAAAD,IAAA,CAAJC,IAAI,CACJC,KAAK,CAAAF,IAAA,CAALE,KAAK,CACLC,IAAI,CAAAH,IAAA,CAAJG,IAAI,CAEEC,OAAO,CAAG,GAAI,CAAAjB,OAAO,CAACI,OAAO,CAACwB,kBAAkB,CAAC,CACjDV,QAAQ,CAAG,GAAI,CAAAjB,aAAa,CAAC,CAAEgB,OAAO,CAAPA,OAAQ,CAAC,CAAC,CACzCE,SAAS,CAAGd,sBAAsB,CAACwB,IAAI,CAC3C,SAACC,IAA4B,QAAK,CAAAA,IAAI,CAACC,IAAI,GAAKf,IAAI,GACrD,IAEIG,SAAS,EAAAM,QAAA,CAAAE,IAAA,eACN,IAAI,CAAAK,KAAK,CAAC,8CAA8C,CAAC,QAEzDZ,eAAe,CAAG,QAAlB,CAAAA,eAAeA,CAAA,QACnB,CAAAN,IAAI,GAAK,EAAE,CAAGK,SAAS,CAACc,IAAI,IAAAC,MAAA,CAAMf,SAAS,CAACc,IAAI,EAAAC,MAAA,CAAGpB,IAAI,CAAE,GAErDO,WAAW,CAAG,QAAd,CAAAA,WAAWA,CAAA,CAAiB,CAChC,GAAM,CAAAc,QAAQ,CAAGrB,IAAI,CAACsB,KAAK,CAAC,GAAG,CAAC,CAACC,KAAK,CAAC,CAAC,CAAC,CAEzC,MAAO,CAAAlB,SAAS,CAACc,IAAI,GAAK,UAAU,EAAInB,IAAI,CACxCK,SAAS,CAACmB,QAAQ,EAAIH,QAAQ,CAACI,MAAM,CAAG,CAAC,CAAC,CAC1CpB,SAAS,CAACmB,QAAQ,CACxB,CAAC,CAEKhB,WAAW,CAAG,CAClBP,KAAK,CAAEb,YAAY,CAACsC,cAAc,CAACzB,KAAK,CAAC,CACzCkB,IAAI,CAAEb,eAAe,EAAE,CACvBqB,QAAQ,CAAEvB,QAAQ,CAACwB,UAAU,EAAE,CAACC,MAAM,EAAE,CACxCL,QAAQ,CAAEjB,WAAW,EACvB,CAAC,CAAAI,QAAA,CAAAE,IAAA,UAEY,CAAAxB,gBAAgB,CAAC,CAC5ByC,YAAY,CAAE,CAACtB,WAAW,CAC5B,CAAC,CAAC,gBAAAG,QAAA,CAAAoB,MAAA,UAAApB,QAAA,CAAAqB,IAAA,2BAAArB,QAAA,CAAAsB,IAAA,MAAAnC,OAAA,GAEL,kBApCK,CAAAL,eAAeA,CAAAyC,EAAA,SAAAxC,KAAA,CAAAyC,KAAA,MAAAC,SAAA,OAoCpB,CAED,MAAO,CACL3C,eAAe,CAAfA,eACF,CAAC,CACH,CAAC,CAED,cAAe,CAAAD,cAAc"},"metadata":{},"sourceType":"module"}