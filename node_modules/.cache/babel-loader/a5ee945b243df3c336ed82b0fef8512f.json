{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/neville/Documents/Github/elrond-delegation/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/neville/Documents/Github/elrond-delegation/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EncryptedData = void 0;\nvar derivationParams_1 = require(\"./derivationParams\");\nvar EncryptedData = /*#__PURE__*/function () {\n  function EncryptedData(data) {\n    _classCallCheck(this, EncryptedData);\n    this.id = data.id;\n    this.version = data.version;\n    this.ciphertext = data.ciphertext;\n    this.iv = data.iv;\n    this.cipher = data.cipher;\n    this.kdf = data.kdf;\n    this.kdfparams = data.kdfparams;\n    this.mac = data.mac;\n    this.salt = data.salt;\n  }\n  _createClass(EncryptedData, [{\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        version: this.version,\n        id: this.id,\n        crypto: {\n          ciphertext: this.ciphertext,\n          cipherparams: {\n            iv: this.iv\n          },\n          cipher: this.cipher,\n          kdf: this.kdf,\n          kdfparams: {\n            dklen: this.kdfparams.dklen,\n            salt: this.salt,\n            n: this.kdfparams.n,\n            r: this.kdfparams.r,\n            p: this.kdfparams.p\n          },\n          mac: this.mac\n        }\n      };\n    }\n  }], [{\n    key: \"fromJSON\",\n    value: function fromJSON(data) {\n      return new EncryptedData({\n        version: data.version,\n        id: data.id,\n        ciphertext: data.crypto.ciphertext,\n        iv: data.crypto.cipherparams.iv,\n        cipher: data.crypto.cipher,\n        kdf: data.crypto.kdf,\n        kdfparams: new derivationParams_1.ScryptKeyDerivationParams(data.crypto.kdfparams.n, data.crypto.kdfparams.r, data.crypto.kdfparams.p, data.crypto.kdfparams.dklen),\n        salt: data.crypto.kdfparams.salt,\n        mac: data.crypto.mac\n      });\n    }\n  }]);\n  return EncryptedData;\n}();\nexports.EncryptedData = EncryptedData;","map":{"version":3,"sources":["../../src/crypto/encryptedData.ts"],"names":[],"mappings":";;;;;;;;AAAA,IAAA,kBAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;AAA+D,IAElD,aAAa;EAWxB,SAAA,cAAY,IAAmC,EAAA;IAAA,eAAA,OAAA,aAAA;IAC7C,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE;IACjB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO;IAC3B,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU;IACjC,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE;IACjB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM;IACzB,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG;IACnB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS;IAC/B,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG;IACnB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI;EACvB;EAAC,YAAA,CAAA,aAAA;IAAA,GAAA;IAAA,KAAA,EAED,SAAA,OAAA,EAAM;MACJ,OAAO;QACL,OAAO,EAAE,IAAI,CAAC,OAAO;QACrB,EAAE,EAAE,IAAI,CAAC,EAAE;QACX,MAAM,EAAE;UACN,UAAU,EAAE,IAAI,CAAC,UAAU;UAC3B,YAAY,EAAE;YAAE,EAAE,EAAE,IAAI,CAAC;UAAE,CAAE;UAC7B,MAAM,EAAE,IAAI,CAAC,MAAM;UACnB,GAAG,EAAE,IAAI,CAAC,GAAG;UACb,SAAS,EAAE;YACT,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK;YAC3B,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;YACnB,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;YACnB,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC;WACnB;UACD,GAAG,EAAE,IAAI,CAAC;QACX;OACF;IACH;EAAC;IAAA,GAAA;IAAA,KAAA,EAED,SAAA,SAAgB,IAAS,EAAA;MACvB,OAAO,IAAI,aAAa,CAAC;QACvB,OAAO,EAAE,IAAI,CAAC,OAAO;QACrB,EAAE,EAAE,IAAI,CAAC,EAAE;QACX,UAAU,EAAE,IAAI,CAAC,MAAM,CAAC,UAAU;QAClC,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,EAAE;QAC/B,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM;QAC1B,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG;QACpB,SAAS,EAAE,IAAI,kBAAA,CAAA,yBAAyB,CACtC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,EACvB,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,EACvB,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,EACvB,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,CAC5B;QACD,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI;QAChC,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC;OAClB,CAAC;IACJ;EAAC;EAAA,OAAA,aAAA;AAAA;AA7DH,OAAA,CAAA,aAAA,GAAA,aAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EncryptedData = void 0;\nconst derivationParams_1 = require(\"./derivationParams\");\nclass EncryptedData {\n    constructor(data) {\n        this.id = data.id;\n        this.version = data.version;\n        this.ciphertext = data.ciphertext;\n        this.iv = data.iv;\n        this.cipher = data.cipher;\n        this.kdf = data.kdf;\n        this.kdfparams = data.kdfparams;\n        this.mac = data.mac;\n        this.salt = data.salt;\n    }\n    toJSON() {\n        return {\n            version: this.version,\n            id: this.id,\n            crypto: {\n                ciphertext: this.ciphertext,\n                cipherparams: { iv: this.iv },\n                cipher: this.cipher,\n                kdf: this.kdf,\n                kdfparams: {\n                    dklen: this.kdfparams.dklen,\n                    salt: this.salt,\n                    n: this.kdfparams.n,\n                    r: this.kdfparams.r,\n                    p: this.kdfparams.p\n                },\n                mac: this.mac,\n            }\n        };\n    }\n    static fromJSON(data) {\n        return new EncryptedData({\n            version: data.version,\n            id: data.id,\n            ciphertext: data.crypto.ciphertext,\n            iv: data.crypto.cipherparams.iv,\n            cipher: data.crypto.cipher,\n            kdf: data.crypto.kdf,\n            kdfparams: new derivationParams_1.ScryptKeyDerivationParams(data.crypto.kdfparams.n, data.crypto.kdfparams.r, data.crypto.kdfparams.p, data.crypto.kdfparams.dklen),\n            salt: data.crypto.kdfparams.salt,\n            mac: data.crypto.mac,\n        });\n    }\n}\nexports.EncryptedData = EncryptedData;\n//# sourceMappingURL=encryptedData.js.map"]},"metadata":{},"sourceType":"script"}