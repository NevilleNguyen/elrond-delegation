{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/neville/Documents/Github/elrond-delegation/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _slicedToArray = require(\"/Users/neville/Documents/Github/elrond-delegation/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _classCallCheck = require(\"/Users/neville/Documents/Github/elrond-delegation/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/neville/Documents/Github/elrond-delegation/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ListBinaryCodec = void 0;\nvar typesystem_1 = require(\"../typesystem\");\nvar constants_1 = require(\"./constants\");\n/**\n * Encodes and decodes \"List\" objects.\n */\nvar ListBinaryCodec = /*#__PURE__*/function () {\n  function ListBinaryCodec(binaryCodec) {\n    _classCallCheck(this, ListBinaryCodec);\n    this.binaryCodec = binaryCodec;\n  }\n  _createClass(ListBinaryCodec, [{\n    key: \"decodeNested\",\n    value: function decodeNested(buffer, type) {\n      var typeParameter = type.getFirstTypeParameter();\n      var result = [];\n      var numItems = buffer.readUInt32BE(0);\n      this.binaryCodec.constraints.checkListLength(numItems);\n      var originalBuffer = buffer;\n      var offset = constants_1.SizeOfU32;\n      buffer = originalBuffer.slice(offset);\n      for (var i = 0; i < numItems; i++) {\n        var _this$binaryCodec$dec = this.binaryCodec.decodeNested(buffer, typeParameter),\n          _this$binaryCodec$dec2 = _slicedToArray(_this$binaryCodec$dec, 2),\n          decoded = _this$binaryCodec$dec2[0],\n          decodedLength = _this$binaryCodec$dec2[1];\n        result.push(decoded);\n        offset += decodedLength;\n        buffer = originalBuffer.slice(offset);\n      }\n      return [new typesystem_1.List(type, result), offset];\n    }\n  }, {\n    key: \"decodeTopLevel\",\n    value: function decodeTopLevel(buffer, type) {\n      var typeParameter = type.getFirstTypeParameter();\n      var result = [];\n      var originalBuffer = buffer;\n      var offset = 0;\n      while (buffer.length > 0) {\n        var _this$binaryCodec$dec3 = this.binaryCodec.decodeNested(buffer, typeParameter),\n          _this$binaryCodec$dec4 = _slicedToArray(_this$binaryCodec$dec3, 2),\n          decoded = _this$binaryCodec$dec4[0],\n          decodedLength = _this$binaryCodec$dec4[1];\n        result.push(decoded);\n        offset += decodedLength;\n        buffer = originalBuffer.slice(offset);\n        this.binaryCodec.constraints.checkListLength(result.length);\n      }\n      return new typesystem_1.List(type, result);\n    }\n  }, {\n    key: \"encodeNested\",\n    value: function encodeNested(list) {\n      this.binaryCodec.constraints.checkListLength(list.getLength());\n      var lengthBuffer = Buffer.alloc(constants_1.SizeOfU32);\n      lengthBuffer.writeUInt32BE(list.getLength());\n      var itemsBuffers = [];\n      var _iterator = _createForOfIteratorHelper(list.getItems()),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var item = _step.value;\n          var itemBuffer = this.binaryCodec.encodeNested(item);\n          itemsBuffers.push(itemBuffer);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      var buffer = Buffer.concat([lengthBuffer].concat(itemsBuffers));\n      return buffer;\n    }\n  }, {\n    key: \"encodeTopLevel\",\n    value: function encodeTopLevel(list) {\n      this.binaryCodec.constraints.checkListLength(list.getLength());\n      var itemsBuffers = [];\n      var _iterator2 = _createForOfIteratorHelper(list.getItems()),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var item = _step2.value;\n          var itemBuffer = this.binaryCodec.encodeNested(item);\n          itemsBuffers.push(itemBuffer);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      var buffer = Buffer.concat(itemsBuffers);\n      return buffer;\n    }\n  }]);\n  return ListBinaryCodec;\n}();\nexports.ListBinaryCodec = ListBinaryCodec;","map":{"version":3,"sources":["../../../src/smartcontracts/codec/list.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ListBinaryCodec = void 0;\nconst typesystem_1 = require(\"../typesystem\");\nconst constants_1 = require(\"./constants\");\n/**\n * Encodes and decodes \"List\" objects.\n */\nclass ListBinaryCodec {\n    constructor(binaryCodec) {\n        this.binaryCodec = binaryCodec;\n    }\n    decodeNested(buffer, type) {\n        let typeParameter = type.getFirstTypeParameter();\n        let result = [];\n        let numItems = buffer.readUInt32BE(0);\n        this.binaryCodec.constraints.checkListLength(numItems);\n        let originalBuffer = buffer;\n        let offset = constants_1.SizeOfU32;\n        buffer = originalBuffer.slice(offset);\n        for (let i = 0; i < numItems; i++) {\n            let [decoded, decodedLength] = this.binaryCodec.decodeNested(buffer, typeParameter);\n            result.push(decoded);\n            offset += decodedLength;\n            buffer = originalBuffer.slice(offset);\n        }\n        return [new typesystem_1.List(type, result), offset];\n    }\n    decodeTopLevel(buffer, type) {\n        let typeParameter = type.getFirstTypeParameter();\n        let result = [];\n        let originalBuffer = buffer;\n        let offset = 0;\n        while (buffer.length > 0) {\n            let [decoded, decodedLength] = this.binaryCodec.decodeNested(buffer, typeParameter);\n            result.push(decoded);\n            offset += decodedLength;\n            buffer = originalBuffer.slice(offset);\n            this.binaryCodec.constraints.checkListLength(result.length);\n        }\n        return new typesystem_1.List(type, result);\n    }\n    encodeNested(list) {\n        this.binaryCodec.constraints.checkListLength(list.getLength());\n        let lengthBuffer = Buffer.alloc(constants_1.SizeOfU32);\n        lengthBuffer.writeUInt32BE(list.getLength());\n        let itemsBuffers = [];\n        for (const item of list.getItems()) {\n            let itemBuffer = this.binaryCodec.encodeNested(item);\n            itemsBuffers.push(itemBuffer);\n        }\n        let buffer = Buffer.concat([lengthBuffer, ...itemsBuffers]);\n        return buffer;\n    }\n    encodeTopLevel(list) {\n        this.binaryCodec.constraints.checkListLength(list.getLength());\n        let itemsBuffers = [];\n        for (const item of list.getItems()) {\n            let itemBuffer = this.binaryCodec.encodeNested(item);\n            itemsBuffers.push(itemBuffer);\n        }\n        let buffer = Buffer.concat(itemsBuffers);\n        return buffer;\n    }\n}\nexports.ListBinaryCodec = ListBinaryCodec;\n//# sourceMappingURL=list.js.map"]},"metadata":{},"sourceType":"script"}