{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/neville/Documents/Github/elrond-delegation/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _classCallCheck = require(\"/Users/neville/Documents/Github/elrond-delegation/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/neville/Documents/Github/elrond-delegation/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MultiESDTNFTTransferPayloadBuilder = exports.ESDTNFTTransferPayloadBuilder = exports.ESDTTransferPayloadBuilder = void 0;\nvar address_1 = require(\"./address\");\nvar argSerializer_1 = require(\"./smartcontracts/argSerializer\");\nvar typesystem_1 = require(\"./smartcontracts/typesystem\");\nvar tokenPayment_1 = require(\"./tokenPayment\");\nvar transactionPayload_1 = require(\"./transactionPayload\");\n/**\n * @deprecated Use {@link TransfersFactory} instead.\n */\nvar ESDTTransferPayloadBuilder = /*#__PURE__*/function () {\n  function ESDTTransferPayloadBuilder() {\n    _classCallCheck(this, ESDTTransferPayloadBuilder);\n    this.payment = tokenPayment_1.TokenPayment.fungibleFromAmount(\"\", \"0\", 0);\n  }\n  _createClass(ESDTTransferPayloadBuilder, [{\n    key: \"setPayment\",\n    value: function setPayment(payment) {\n      this.payment = payment;\n      return this;\n    }\n  }, {\n    key: \"build\",\n    value: function build() {\n      var args = [\n      // The token identifier\n      typesystem_1.BytesValue.fromUTF8(this.payment.tokenIdentifier),\n      // The transfered amount\n      new typesystem_1.BigUIntValue(this.payment.valueOf())];\n      var _argSerializer_1$ArgS = new argSerializer_1.ArgSerializer().valuesToString(args),\n        argumentsString = _argSerializer_1$ArgS.argumentsString;\n      var data = \"ESDTTransfer@\".concat(argumentsString);\n      return new transactionPayload_1.TransactionPayload(data);\n    }\n  }]);\n  return ESDTTransferPayloadBuilder;\n}();\nexports.ESDTTransferPayloadBuilder = ESDTTransferPayloadBuilder;\n/**\n * @deprecated Use {@link TransfersFactory} instead.\n */\nvar ESDTNFTTransferPayloadBuilder = /*#__PURE__*/function () {\n  function ESDTNFTTransferPayloadBuilder() {\n    _classCallCheck(this, ESDTNFTTransferPayloadBuilder);\n    this.payment = tokenPayment_1.TokenPayment.nonFungible(\"\", 0);\n    this.destination = new address_1.Address(\"\");\n  }\n  _createClass(ESDTNFTTransferPayloadBuilder, [{\n    key: \"setPayment\",\n    value: function setPayment(payment) {\n      this.payment = payment;\n      return this;\n    }\n  }, {\n    key: \"setDestination\",\n    value: function setDestination(destination) {\n      this.destination = destination;\n      return this;\n    }\n  }, {\n    key: \"build\",\n    value: function build() {\n      var args = [\n      // The token identifier\n      typesystem_1.BytesValue.fromUTF8(this.payment.tokenIdentifier),\n      // The nonce of the token\n      new typesystem_1.U64Value(this.payment.nonce),\n      // The transferred quantity\n      new typesystem_1.BigUIntValue(this.payment.valueOf()),\n      // The destination address\n      new typesystem_1.AddressValue(this.destination)];\n      var _argSerializer_1$ArgS2 = new argSerializer_1.ArgSerializer().valuesToString(args),\n        argumentsString = _argSerializer_1$ArgS2.argumentsString;\n      var data = \"ESDTNFTTransfer@\".concat(argumentsString);\n      return new transactionPayload_1.TransactionPayload(data);\n    }\n  }]);\n  return ESDTNFTTransferPayloadBuilder;\n}();\nexports.ESDTNFTTransferPayloadBuilder = ESDTNFTTransferPayloadBuilder;\n/**\n * @deprecated Use {@link TransfersFactory} instead.\n */\nvar MultiESDTNFTTransferPayloadBuilder = /*#__PURE__*/function () {\n  function MultiESDTNFTTransferPayloadBuilder() {\n    _classCallCheck(this, MultiESDTNFTTransferPayloadBuilder);\n    this.payments = [];\n    this.destination = new address_1.Address(\"\");\n  }\n  _createClass(MultiESDTNFTTransferPayloadBuilder, [{\n    key: \"setPayments\",\n    value: function setPayments(payments) {\n      this.payments = payments;\n      return this;\n    }\n  }, {\n    key: \"setDestination\",\n    value: function setDestination(destination) {\n      this.destination = destination;\n      return this;\n    }\n  }, {\n    key: \"build\",\n    value: function build() {\n      var args = [\n      // The destination address\n      new typesystem_1.AddressValue(this.destination),\n      // Number of tokens\n      new typesystem_1.U16Value(this.payments.length)];\n      var _iterator = _createForOfIteratorHelper(this.payments),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var payment = _step.value;\n          args.push.apply(args, [\n          // The token identifier\n          typesystem_1.BytesValue.fromUTF8(payment.tokenIdentifier),\n          // The nonce of the token\n          new typesystem_1.U64Value(payment.nonce),\n          // The transfered quantity\n          new typesystem_1.BigUIntValue(payment.valueOf())]);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      var _argSerializer_1$ArgS3 = new argSerializer_1.ArgSerializer().valuesToString(args),\n        argumentsString = _argSerializer_1$ArgS3.argumentsString;\n      var data = \"MultiESDTNFTTransfer@\".concat(argumentsString);\n      return new transactionPayload_1.TransactionPayload(data);\n    }\n  }]);\n  return MultiESDTNFTTransferPayloadBuilder;\n}();\nexports.MultiESDTNFTTransferPayloadBuilder = MultiESDTNFTTransferPayloadBuilder;","map":{"version":3,"sources":["../src/tokenTransferBuilders.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MultiESDTNFTTransferPayloadBuilder = exports.ESDTNFTTransferPayloadBuilder = exports.ESDTTransferPayloadBuilder = void 0;\nconst address_1 = require(\"./address\");\nconst argSerializer_1 = require(\"./smartcontracts/argSerializer\");\nconst typesystem_1 = require(\"./smartcontracts/typesystem\");\nconst tokenPayment_1 = require(\"./tokenPayment\");\nconst transactionPayload_1 = require(\"./transactionPayload\");\n/**\n * @deprecated Use {@link TransfersFactory} instead.\n */\nclass ESDTTransferPayloadBuilder {\n    constructor() {\n        this.payment = tokenPayment_1.TokenPayment.fungibleFromAmount(\"\", \"0\", 0);\n    }\n    setPayment(payment) {\n        this.payment = payment;\n        return this;\n    }\n    build() {\n        let args = [\n            // The token identifier\n            typesystem_1.BytesValue.fromUTF8(this.payment.tokenIdentifier),\n            // The transfered amount\n            new typesystem_1.BigUIntValue(this.payment.valueOf()),\n        ];\n        let { argumentsString } = new argSerializer_1.ArgSerializer().valuesToString(args);\n        let data = `ESDTTransfer@${argumentsString}`;\n        return new transactionPayload_1.TransactionPayload(data);\n    }\n}\nexports.ESDTTransferPayloadBuilder = ESDTTransferPayloadBuilder;\n/**\n * @deprecated Use {@link TransfersFactory} instead.\n */\nclass ESDTNFTTransferPayloadBuilder {\n    constructor() {\n        this.payment = tokenPayment_1.TokenPayment.nonFungible(\"\", 0);\n        this.destination = new address_1.Address(\"\");\n    }\n    setPayment(payment) {\n        this.payment = payment;\n        return this;\n    }\n    setDestination(destination) {\n        this.destination = destination;\n        return this;\n    }\n    build() {\n        let args = [\n            // The token identifier\n            typesystem_1.BytesValue.fromUTF8(this.payment.tokenIdentifier),\n            // The nonce of the token\n            new typesystem_1.U64Value(this.payment.nonce),\n            // The transferred quantity\n            new typesystem_1.BigUIntValue(this.payment.valueOf()),\n            // The destination address\n            new typesystem_1.AddressValue(this.destination)\n        ];\n        let { argumentsString } = new argSerializer_1.ArgSerializer().valuesToString(args);\n        let data = `ESDTNFTTransfer@${argumentsString}`;\n        return new transactionPayload_1.TransactionPayload(data);\n    }\n}\nexports.ESDTNFTTransferPayloadBuilder = ESDTNFTTransferPayloadBuilder;\n/**\n * @deprecated Use {@link TransfersFactory} instead.\n */\nclass MultiESDTNFTTransferPayloadBuilder {\n    constructor() {\n        this.payments = [];\n        this.destination = new address_1.Address(\"\");\n    }\n    setPayments(payments) {\n        this.payments = payments;\n        return this;\n    }\n    setDestination(destination) {\n        this.destination = destination;\n        return this;\n    }\n    build() {\n        let args = [\n            // The destination address\n            new typesystem_1.AddressValue(this.destination),\n            // Number of tokens\n            new typesystem_1.U16Value(this.payments.length)\n        ];\n        for (const payment of this.payments) {\n            args.push(...[\n                // The token identifier\n                typesystem_1.BytesValue.fromUTF8(payment.tokenIdentifier),\n                // The nonce of the token\n                new typesystem_1.U64Value(payment.nonce),\n                // The transfered quantity\n                new typesystem_1.BigUIntValue(payment.valueOf())\n            ]);\n        }\n        let { argumentsString } = new argSerializer_1.ArgSerializer().valuesToString(args);\n        let data = `MultiESDTNFTTransfer@${argumentsString}`;\n        return new transactionPayload_1.TransactionPayload(data);\n    }\n}\nexports.MultiESDTNFTTransferPayloadBuilder = MultiESDTNFTTransferPayloadBuilder;\n//# sourceMappingURL=tokenTransferBuilders.js.map"]},"metadata":{},"sourceType":"script"}