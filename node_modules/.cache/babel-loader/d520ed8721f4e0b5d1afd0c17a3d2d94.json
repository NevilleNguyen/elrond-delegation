{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/neville/Documents/Github/elrond-delegation/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/neville/Documents/Github/elrond-delegation/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TokenTransferProperties = exports.TransactionMetadataTransfer = exports.TransactionMetadata = exports.TransactionToDecode = exports.TransactionDecoder = void 0;\nvar bech32_1 = require(\"bech32\");\nvar TransactionDecoder = /*#__PURE__*/function () {\n  function TransactionDecoder() {\n    _classCallCheck(this, TransactionDecoder);\n  }\n  _createClass(TransactionDecoder, [{\n    key: \"getTransactionMetadata\",\n    value: function getTransactionMetadata(transaction) {\n      var metadata = this.getNormalTransactionMetadata(transaction);\n      var esdtMetadata = this.getEsdtTransactionMetadata(metadata);\n      if (esdtMetadata) {\n        return esdtMetadata;\n      }\n      var nftMetadata = this.getNftTransferMetadata(metadata);\n      if (nftMetadata) {\n        return nftMetadata;\n      }\n      var multiMetadata = this.getMultiTransferMetadata(metadata);\n      if (multiMetadata) {\n        return multiMetadata;\n      }\n      return metadata;\n    }\n  }, {\n    key: \"getNormalTransactionMetadata\",\n    value: function getNormalTransactionMetadata(transaction) {\n      var _this = this;\n      var metadata = new TransactionMetadata();\n      metadata.sender = transaction.sender;\n      metadata.receiver = transaction.receiver;\n      metadata.value = BigInt(transaction.value);\n      if (transaction.data) {\n        var decodedData = this.base64Decode(transaction.data);\n        var dataComponents = decodedData.split('@');\n        var args = dataComponents.slice(1);\n        if (args.every(function (x) {\n          return _this.isSmartContractArgument(x);\n        })) {\n          metadata.functionName = dataComponents[0];\n          metadata.functionArgs = args;\n        }\n        if (metadata.functionName === 'relayedTx' && metadata.functionArgs && metadata.functionArgs.length === 1) {\n          try {\n            var relayedTransaction = JSON.parse(this.hexToString(metadata.functionArgs[0]));\n            relayedTransaction.value = relayedTransaction.value.toString();\n            relayedTransaction.sender = this.bech32Encode(this.base64ToHex(relayedTransaction.sender));\n            relayedTransaction.receiver = this.bech32Encode(this.base64ToHex(relayedTransaction.receiver));\n            return this.getNormalTransactionMetadata(relayedTransaction);\n          } catch (error) {\n            // nothing special\n          }\n        }\n        if (metadata.functionName === 'relayedTxV2' && metadata.functionArgs && metadata.functionArgs.length === 4) {\n          try {\n            var _relayedTransaction = new TransactionToDecode();\n            _relayedTransaction.sender = transaction.receiver;\n            _relayedTransaction.receiver = this.bech32Encode(metadata.functionArgs[0]);\n            _relayedTransaction.data = this.base64Encode(this.hexToString(metadata.functionArgs[2]));\n            _relayedTransaction.value = '0';\n            return this.getNormalTransactionMetadata(_relayedTransaction);\n          } catch (error) {\n            // nothing special\n          }\n        }\n      }\n      return metadata;\n    }\n  }, {\n    key: \"getMultiTransferMetadata\",\n    value: function getMultiTransferMetadata(metadata) {\n      if (metadata.sender !== metadata.receiver) {\n        return undefined;\n      }\n      if (metadata.functionName !== 'MultiESDTNFTTransfer') {\n        return undefined;\n      }\n      var args = metadata.functionArgs;\n      if (!args) {\n        return undefined;\n      }\n      if (args.length < 3) {\n        return undefined;\n      }\n      if (!this.isAddressValid(args[0])) {\n        return undefined;\n      }\n      var receiver = this.bech32Encode(args[0]);\n      var transferCount = this.hexToNumber(args[1]);\n      var result = new TransactionMetadata();\n      if (!result.transfers) {\n        result.transfers = [];\n      }\n      var index = 2;\n      for (var i = 0; i < transferCount; i++) {\n        var identifier = this.hexToString(args[index++]);\n        var nonce = args[index++];\n        var value = this.hexToBigInt(args[index++]);\n        if (nonce) {\n          result.transfers.push({\n            value: value,\n            properties: {\n              collection: identifier,\n              identifier: \"\".concat(identifier, \"-\").concat(nonce)\n            }\n          });\n        } else {\n          result.transfers.push({\n            value: value,\n            properties: {\n              token: identifier\n            }\n          });\n        }\n      }\n      result.sender = metadata.sender;\n      result.receiver = receiver;\n      if (args.length > index) {\n        result.functionName = this.hexToString(args[index++]);\n        result.functionArgs = args.slice(index++);\n      }\n      return result;\n    }\n  }, {\n    key: \"getNftTransferMetadata\",\n    value: function getNftTransferMetadata(metadata) {\n      if (metadata.sender !== metadata.receiver) {\n        return undefined;\n      }\n      if (metadata.functionName !== 'ESDTNFTTransfer') {\n        return undefined;\n      }\n      var args = metadata.functionArgs;\n      if (!args) {\n        return undefined;\n      }\n      if (args.length < 4) {\n        return undefined;\n      }\n      if (!this.isAddressValid(args[3])) {\n        return undefined;\n      }\n      var collectionIdentifier = this.hexToString(args[0]);\n      var nonce = args[1];\n      var value = this.hexToBigInt(args[2]);\n      var receiver = this.bech32Encode(args[3]);\n      var result = new TransactionMetadata();\n      result.sender = metadata.sender;\n      result.receiver = receiver;\n      result.value = value;\n      if (args.length > 4) {\n        result.functionName = this.hexToString(args[4]);\n        result.functionArgs = args.slice(5);\n      }\n      result.transfers = [{\n        value: value,\n        properties: {\n          collection: collectionIdentifier,\n          identifier: \"\".concat(collectionIdentifier, \"-\").concat(nonce)\n        }\n      }];\n      return result;\n    }\n  }, {\n    key: \"base64Encode\",\n    value: function base64Encode(str) {\n      return Buffer.from(str).toString('base64');\n    }\n  }, {\n    key: \"base64Decode\",\n    value: function base64Decode(str) {\n      return Buffer.from(str, 'base64').toString('binary');\n    }\n  }, {\n    key: \"hexToNumber\",\n    value: function hexToNumber(hex) {\n      return parseInt(hex, 16);\n    }\n  }, {\n    key: \"getEsdtTransactionMetadata\",\n    value: function getEsdtTransactionMetadata(metadata) {\n      if (metadata.functionName !== 'ESDTTransfer') {\n        return undefined;\n      }\n      var args = metadata.functionArgs;\n      if (!args) {\n        return undefined;\n      }\n      if (args.length < 2) {\n        return undefined;\n      }\n      var tokenIdentifier = this.hexToString(args[0]);\n      var value = this.hexToBigInt(args[1]);\n      var result = new TransactionMetadata();\n      result.sender = metadata.sender;\n      result.receiver = metadata.receiver;\n      if (args.length > 2) {\n        result.functionName = this.hexToString(args[2]);\n        result.functionArgs = args.slice(3);\n      }\n      result.transfers = [{\n        value: value,\n        properties: {\n          identifier: tokenIdentifier\n        }\n      }];\n      result.value = value;\n      return result;\n    }\n  }, {\n    key: \"bech32Encode\",\n    value: function bech32Encode(address) {\n      var pubKey = Buffer.from(address, \"hex\");\n      var words = bech32_1.bech32.toWords(pubKey);\n      return bech32_1.bech32.encode('erd', words);\n    }\n  }, {\n    key: \"isAddressValid\",\n    value: function isAddressValid(address) {\n      return Buffer.from(address, \"hex\").length == 32;\n    }\n  }, {\n    key: \"isSmartContractArgument\",\n    value: function isSmartContractArgument(arg) {\n      if (!this.isHex(arg)) {\n        return false;\n      }\n      if (arg.length % 2 !== 0) {\n        return false;\n      }\n      return true;\n    }\n  }, {\n    key: \"isHex\",\n    value: function isHex(value) {\n      return new RegExp(/[^a-f0-9]/gi).test(value) === false;\n    }\n  }, {\n    key: \"base64ToHex\",\n    value: function base64ToHex(str) {\n      return Buffer.from(str, 'base64').toString('hex');\n    }\n  }, {\n    key: \"hexToString\",\n    value: function hexToString(hex) {\n      return Buffer.from(hex, 'hex').toString('ascii');\n    }\n  }, {\n    key: \"hexToBigInt\",\n    value: function hexToBigInt(hex) {\n      if (!hex) {\n        return BigInt(0);\n      }\n      return BigInt('0x' + hex);\n    }\n  }]);\n  return TransactionDecoder;\n}();\nexports.TransactionDecoder = TransactionDecoder;\nvar TransactionToDecode = /*#__PURE__*/_createClass(function TransactionToDecode() {\n  _classCallCheck(this, TransactionToDecode);\n  this.sender = '';\n  this.receiver = '';\n  this.data = '';\n  this.value = '0';\n});\nexports.TransactionToDecode = TransactionToDecode;\nvar TransactionMetadata = /*#__PURE__*/_createClass(function TransactionMetadata() {\n  _classCallCheck(this, TransactionMetadata);\n  this.sender = '';\n  this.receiver = '';\n  this.value = BigInt(0);\n});\nexports.TransactionMetadata = TransactionMetadata;\nvar TransactionMetadataTransfer = /*#__PURE__*/_createClass(function TransactionMetadataTransfer() {\n  _classCallCheck(this, TransactionMetadataTransfer);\n  this.value = BigInt(0);\n});\nexports.TransactionMetadataTransfer = TransactionMetadataTransfer;\nvar TokenTransferProperties = /*#__PURE__*/_createClass(function TokenTransferProperties() {\n  _classCallCheck(this, TokenTransferProperties);\n});\nexports.TokenTransferProperties = TokenTransferProperties;","map":{"version":3,"names":["_classCallCheck","require","default","_createClass","Object","defineProperty","exports","value","TokenTransferProperties","TransactionMetadataTransfer","TransactionMetadata","TransactionToDecode","TransactionDecoder","bech32_1","key","getTransactionMetadata","transaction","metadata","getNormalTransactionMetadata","esdtMetadata","getEsdtTransactionMetadata","nftMetadata","getNftTransferMetadata","multiMetadata","getMultiTransferMetadata","_this","sender","receiver","BigInt","data","decodedData","base64Decode","dataComponents","split","args","slice","every","x","isSmartContractArgument","functionName","functionArgs","length","relayedTransaction","JSON","parse","hexToString","toString","bech32Encode","base64ToHex","error","base64Encode","undefined","isAddressValid","transferCount","hexToNumber","result","transfers","index","i","identifier","nonce","hexToBigInt","push","properties","collection","concat","token","collectionIdentifier","str","Buffer","from","hex","parseInt","tokenIdentifier","address","pubKey","words","bech32","toWords","encode","arg","isHex","RegExp","test"],"sources":["/Users/neville/Documents/Github/elrond-delegation/node_modules/@multiversx/sdk-transaction-decoder/lib/src/transaction.decoder.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TokenTransferProperties = exports.TransactionMetadataTransfer = exports.TransactionMetadata = exports.TransactionToDecode = exports.TransactionDecoder = void 0;\nconst bech32_1 = require(\"bech32\");\nclass TransactionDecoder {\n    getTransactionMetadata(transaction) {\n        const metadata = this.getNormalTransactionMetadata(transaction);\n        const esdtMetadata = this.getEsdtTransactionMetadata(metadata);\n        if (esdtMetadata) {\n            return esdtMetadata;\n        }\n        const nftMetadata = this.getNftTransferMetadata(metadata);\n        if (nftMetadata) {\n            return nftMetadata;\n        }\n        const multiMetadata = this.getMultiTransferMetadata(metadata);\n        if (multiMetadata) {\n            return multiMetadata;\n        }\n        return metadata;\n    }\n    getNormalTransactionMetadata(transaction) {\n        const metadata = new TransactionMetadata();\n        metadata.sender = transaction.sender;\n        metadata.receiver = transaction.receiver;\n        metadata.value = BigInt(transaction.value);\n        if (transaction.data) {\n            const decodedData = this.base64Decode(transaction.data);\n            const dataComponents = decodedData.split('@');\n            const args = dataComponents.slice(1);\n            if (args.every((x) => this.isSmartContractArgument(x))) {\n                metadata.functionName = dataComponents[0];\n                metadata.functionArgs = args;\n            }\n            if (metadata.functionName === 'relayedTx' && metadata.functionArgs && metadata.functionArgs.length === 1) {\n                try {\n                    const relayedTransaction = JSON.parse(this.hexToString(metadata.functionArgs[0]));\n                    relayedTransaction.value = relayedTransaction.value.toString();\n                    relayedTransaction.sender = this.bech32Encode(this.base64ToHex(relayedTransaction.sender));\n                    relayedTransaction.receiver = this.bech32Encode(this.base64ToHex(relayedTransaction.receiver));\n                    return this.getNormalTransactionMetadata(relayedTransaction);\n                }\n                catch (error) {\n                    // nothing special\n                }\n            }\n            if (metadata.functionName === 'relayedTxV2' && metadata.functionArgs && metadata.functionArgs.length === 4) {\n                try {\n                    const relayedTransaction = new TransactionToDecode();\n                    relayedTransaction.sender = transaction.receiver;\n                    relayedTransaction.receiver = this.bech32Encode(metadata.functionArgs[0]);\n                    relayedTransaction.data = this.base64Encode(this.hexToString(metadata.functionArgs[2]));\n                    relayedTransaction.value = '0';\n                    return this.getNormalTransactionMetadata(relayedTransaction);\n                }\n                catch (error) {\n                    // nothing special\n                }\n            }\n        }\n        return metadata;\n    }\n    getMultiTransferMetadata(metadata) {\n        if (metadata.sender !== metadata.receiver) {\n            return undefined;\n        }\n        if (metadata.functionName !== 'MultiESDTNFTTransfer') {\n            return undefined;\n        }\n        const args = metadata.functionArgs;\n        if (!args) {\n            return undefined;\n        }\n        if (args.length < 3) {\n            return undefined;\n        }\n        if (!this.isAddressValid(args[0])) {\n            return undefined;\n        }\n        const receiver = this.bech32Encode(args[0]);\n        const transferCount = this.hexToNumber(args[1]);\n        const result = new TransactionMetadata();\n        if (!result.transfers) {\n            result.transfers = [];\n        }\n        let index = 2;\n        for (let i = 0; i < transferCount; i++) {\n            const identifier = this.hexToString(args[index++]);\n            const nonce = args[index++];\n            const value = this.hexToBigInt(args[index++]);\n            if (nonce) {\n                result.transfers.push({\n                    value,\n                    properties: {\n                        collection: identifier,\n                        identifier: `${identifier}-${nonce}`,\n                    },\n                });\n            }\n            else {\n                result.transfers.push({\n                    value,\n                    properties: {\n                        token: identifier,\n                    },\n                });\n            }\n        }\n        result.sender = metadata.sender;\n        result.receiver = receiver;\n        if (args.length > index) {\n            result.functionName = this.hexToString(args[index++]);\n            result.functionArgs = args.slice(index++);\n        }\n        return result;\n    }\n    getNftTransferMetadata(metadata) {\n        if (metadata.sender !== metadata.receiver) {\n            return undefined;\n        }\n        if (metadata.functionName !== 'ESDTNFTTransfer') {\n            return undefined;\n        }\n        const args = metadata.functionArgs;\n        if (!args) {\n            return undefined;\n        }\n        if (args.length < 4) {\n            return undefined;\n        }\n        if (!this.isAddressValid(args[3])) {\n            return undefined;\n        }\n        const collectionIdentifier = this.hexToString(args[0]);\n        const nonce = args[1];\n        const value = this.hexToBigInt(args[2]);\n        const receiver = this.bech32Encode(args[3]);\n        const result = new TransactionMetadata();\n        result.sender = metadata.sender;\n        result.receiver = receiver;\n        result.value = value;\n        if (args.length > 4) {\n            result.functionName = this.hexToString(args[4]);\n            result.functionArgs = args.slice(5);\n        }\n        result.transfers = [{\n                value,\n                properties: {\n                    collection: collectionIdentifier,\n                    identifier: `${collectionIdentifier}-${nonce}`,\n                },\n            }];\n        return result;\n    }\n    base64Encode(str) {\n        return Buffer.from(str).toString('base64');\n    }\n    base64Decode(str) {\n        return Buffer.from(str, 'base64').toString('binary');\n    }\n    hexToNumber(hex) {\n        return parseInt(hex, 16);\n    }\n    getEsdtTransactionMetadata(metadata) {\n        if (metadata.functionName !== 'ESDTTransfer') {\n            return undefined;\n        }\n        const args = metadata.functionArgs;\n        if (!args) {\n            return undefined;\n        }\n        if (args.length < 2) {\n            return undefined;\n        }\n        const tokenIdentifier = this.hexToString(args[0]);\n        const value = this.hexToBigInt(args[1]);\n        const result = new TransactionMetadata();\n        result.sender = metadata.sender;\n        result.receiver = metadata.receiver;\n        if (args.length > 2) {\n            result.functionName = this.hexToString(args[2]);\n            result.functionArgs = args.slice(3);\n        }\n        result.transfers = [{\n                value,\n                properties: {\n                    identifier: tokenIdentifier,\n                },\n            }];\n        result.value = value;\n        return result;\n    }\n    bech32Encode(address) {\n        const pubKey = Buffer.from(address, \"hex\");\n        const words = bech32_1.bech32.toWords(pubKey);\n        return bech32_1.bech32.encode('erd', words);\n    }\n    isAddressValid(address) {\n        return Buffer.from(address, \"hex\").length == 32;\n    }\n    isSmartContractArgument(arg) {\n        if (!this.isHex(arg)) {\n            return false;\n        }\n        if (arg.length % 2 !== 0) {\n            return false;\n        }\n        return true;\n    }\n    isHex(value) {\n        return new RegExp(/[^a-f0-9]/gi).test(value) === false;\n    }\n    base64ToHex(str) {\n        return Buffer.from(str, 'base64').toString('hex');\n    }\n    hexToString(hex) {\n        return Buffer.from(hex, 'hex').toString('ascii');\n    }\n    hexToBigInt(hex) {\n        if (!hex) {\n            return BigInt(0);\n        }\n        return BigInt('0x' + hex);\n    }\n}\nexports.TransactionDecoder = TransactionDecoder;\nclass TransactionToDecode {\n    constructor() {\n        this.sender = '';\n        this.receiver = '';\n        this.data = '';\n        this.value = '0';\n    }\n}\nexports.TransactionToDecode = TransactionToDecode;\nclass TransactionMetadata {\n    constructor() {\n        this.sender = '';\n        this.receiver = '';\n        this.value = BigInt(0);\n    }\n}\nexports.TransactionMetadata = TransactionMetadata;\nclass TransactionMetadataTransfer {\n    constructor() {\n        this.value = BigInt(0);\n    }\n}\nexports.TransactionMetadataTransfer = TransactionMetadataTransfer;\nclass TokenTransferProperties {\n}\nexports.TokenTransferProperties = TokenTransferProperties;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}