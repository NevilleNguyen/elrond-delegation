{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/neville/Documents/Github/elrond-delegation/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/neville/Documents/Github/elrond-delegation/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Encryptor = exports.EncryptorVersion = void 0;\nvar crypto_1 = __importDefault(require(\"crypto\"));\nvar constants_1 = require(\"./constants\");\nvar derivationParams_1 = require(\"./derivationParams\");\nvar encryptedData_1 = require(\"./encryptedData\");\nvar randomness_1 = require(\"./randomness\");\nvar EncryptorVersion;\n(function (EncryptorVersion) {\n  EncryptorVersion[EncryptorVersion[\"V4\"] = 4] = \"V4\";\n})(EncryptorVersion = exports.EncryptorVersion || (exports.EncryptorVersion = {}));\nvar Encryptor = /*#__PURE__*/function () {\n  function Encryptor() {\n    _classCallCheck(this, Encryptor);\n  }\n  _createClass(Encryptor, null, [{\n    key: \"encrypt\",\n    value: function encrypt(data, password) {\n      var randomness = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new randomness_1.Randomness();\n      var kdParams = new derivationParams_1.ScryptKeyDerivationParams();\n      var derivedKey = kdParams.generateDerivedKey(Buffer.from(password), randomness.salt);\n      var derivedKeyFirstHalf = derivedKey.slice(0, 16);\n      var derivedKeySecondHalf = derivedKey.slice(16, 32);\n      var cipher = crypto_1.default.createCipheriv(constants_1.CipherAlgorithm, derivedKeyFirstHalf, randomness.iv);\n      var ciphertext = Buffer.concat([cipher.update(data), cipher.final()]);\n      var mac = crypto_1.default.createHmac(constants_1.DigestAlgorithm, derivedKeySecondHalf).update(ciphertext).digest();\n      return new encryptedData_1.EncryptedData({\n        version: EncryptorVersion.V4,\n        id: randomness.id,\n        ciphertext: ciphertext.toString('hex'),\n        iv: randomness.iv.toString('hex'),\n        cipher: constants_1.CipherAlgorithm,\n        kdf: constants_1.KeyDerivationFunction,\n        kdfparams: kdParams,\n        mac: mac.toString('hex'),\n        salt: randomness.salt.toString('hex')\n      });\n    }\n  }]);\n  return Encryptor;\n}();\nexports.Encryptor = Encryptor;","map":{"version":3,"sources":["../../src/crypto/encryptor.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,IAAA,QAAA,GAAA,eAAA,CAAA,OAAA,CAAA,QAAA,CAAA,CAAA;AACA,IAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;AACA,IAAA,kBAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;AACA,IAAA,eAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;AACA,IAAA,YAAA,GAAA,OAAA,CAAA,cAAA,CAAA;AAQA,IAAY,gBAEX;AAFD,CAAA,UAAY,gBAAgB,EAAA;EAC1B,gBAAA,CAAA,gBAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA,GAAA,IAAM;AACR,CAAC,EAFW,gBAAgB,GAAhB,OAAA,CAAA,gBAAgB,KAAhB,OAAA,CAAA,gBAAgB,GAAA,CAAA,CAAA,CAAA,CAAA;AAE3B,IAEY,SAAS;EAAA,SAAA,UAAA;IAAA,eAAA,OAAA,SAAA;EAAA;EAAA,YAAA,CAAA,SAAA;IAAA,GAAA;IAAA,KAAA,EACpB,SAAA,QAAe,IAAY,EAAE,QAAgB,EAA4C;MAAA,IAA1C,UAAA,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAA0B,IAAI,YAAA,CAAA,UAAU,EAAE;MACvF,IAAM,QAAQ,GAAG,IAAI,kBAAA,CAAA,yBAAyB,EAAE;MAChD,IAAM,UAAU,GAAG,QAAQ,CAAC,kBAAkB,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,UAAU,CAAC,IAAI,CAAC;MACtF,IAAM,mBAAmB,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;MACnD,IAAM,oBAAoB,GAAG,UAAU,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC;MACrD,IAAM,MAAM,GAAG,QAAA,CAAA,OAAM,CAAC,cAAc,CAAC,WAAA,CAAA,eAAe,EAAE,mBAAmB,EAAE,UAAU,CAAC,EAAE,CAAC;MAEzF,IAAM,UAAU,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC;MACvE,IAAM,GAAG,GAAG,QAAA,CAAA,OAAM,CAAC,UAAU,CAAC,WAAA,CAAA,eAAe,EAAE,oBAAoB,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,MAAM,EAAE;MAEhG,OAAO,IAAI,eAAA,CAAA,aAAa,CAAC;QACvB,OAAO,EAAE,gBAAgB,CAAC,EAAE;QAC5B,EAAE,EAAE,UAAU,CAAC,EAAE;QACjB,UAAU,EAAE,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC;QACtC,EAAE,EAAE,UAAU,CAAC,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC;QACjC,MAAM,EAAE,WAAA,CAAA,eAAe;QACvB,GAAG,EAAE,WAAA,CAAA,qBAAqB;QAC1B,SAAS,EAAE,QAAQ;QACnB,GAAG,EAAE,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC;QACxB,IAAI,EAAE,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK;OACrC,CAAC;IACJ;EAAC;EAAA,OAAA,SAAA;AAAA;AAtBH,OAAA,CAAA,SAAA,GAAA,SAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Encryptor = exports.EncryptorVersion = void 0;\nconst crypto_1 = __importDefault(require(\"crypto\"));\nconst constants_1 = require(\"./constants\");\nconst derivationParams_1 = require(\"./derivationParams\");\nconst encryptedData_1 = require(\"./encryptedData\");\nconst randomness_1 = require(\"./randomness\");\nvar EncryptorVersion;\n(function (EncryptorVersion) {\n    EncryptorVersion[EncryptorVersion[\"V4\"] = 4] = \"V4\";\n})(EncryptorVersion = exports.EncryptorVersion || (exports.EncryptorVersion = {}));\nclass Encryptor {\n    static encrypt(data, password, randomness = new randomness_1.Randomness()) {\n        const kdParams = new derivationParams_1.ScryptKeyDerivationParams();\n        const derivedKey = kdParams.generateDerivedKey(Buffer.from(password), randomness.salt);\n        const derivedKeyFirstHalf = derivedKey.slice(0, 16);\n        const derivedKeySecondHalf = derivedKey.slice(16, 32);\n        const cipher = crypto_1.default.createCipheriv(constants_1.CipherAlgorithm, derivedKeyFirstHalf, randomness.iv);\n        const ciphertext = Buffer.concat([cipher.update(data), cipher.final()]);\n        const mac = crypto_1.default.createHmac(constants_1.DigestAlgorithm, derivedKeySecondHalf).update(ciphertext).digest();\n        return new encryptedData_1.EncryptedData({\n            version: EncryptorVersion.V4,\n            id: randomness.id,\n            ciphertext: ciphertext.toString('hex'),\n            iv: randomness.iv.toString('hex'),\n            cipher: constants_1.CipherAlgorithm,\n            kdf: constants_1.KeyDerivationFunction,\n            kdfparams: kdParams,\n            mac: mac.toString('hex'),\n            salt: randomness.salt.toString('hex')\n        });\n    }\n}\nexports.Encryptor = Encryptor;\n//# sourceMappingURL=encryptor.js.map"]},"metadata":{},"sourceType":"script"}