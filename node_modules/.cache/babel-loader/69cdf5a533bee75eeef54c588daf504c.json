{"ast":null,"code":"import _objectSpread from \"/Users/neville/Documents/Github/elrond-delegation/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nvar reducer = function reducer(state, action) {\n  switch (action.type) {\n    case 'getUsersNumber':\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          usersNumber: action.usersNumber\n        });\n      }\n    case 'getContractDetails':\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          contractDetails: action.contractDetails\n        });\n      }\n    case 'getNodesNumber':\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          nodesNumber: action.nodesNumber\n        });\n      }\n    case 'getNodesStates':\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          nodesStates: action.nodesStates\n        });\n      }\n    case 'getTotalActiveStake':\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          totalActiveStake: action.totalActiveStake\n        });\n      }\n    case 'getUserActiveStake':\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          userActiveStake: action.userActiveStake\n        });\n      }\n    case 'getUndelegatedStakeList':\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          undelegatedStakeList: action.undelegatedStakeList\n        });\n      }\n    case 'getUserClaimableRewards':\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          userClaimableRewards: action.userClaimableRewards\n        });\n      }\n    case 'getNetworkConfig':\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          networkConfig: action.networkConfig\n        });\n      }\n    case 'getNetworkStatus':\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          networkStatus: action.networkStatus\n        });\n      }\n    case 'getTotalNetworkStake':\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          totalNetworkStake: action.totalNetworkStake\n        });\n      }\n    case 'getAgencyMetaData':\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          agencyMetaData: action.agencyMetaData\n        });\n      }\n    default:\n      {\n        throw new Error(\"Unhandled action type: \".concat(action));\n      }\n  }\n};\nexport { reducer };","map":{"version":3,"names":["reducer","state","action","type","_objectSpread","usersNumber","contractDetails","nodesNumber","nodesStates","totalActiveStake","userActiveStake","undelegatedStakeList","userClaimableRewards","networkConfig","networkStatus","totalNetworkStake","agencyMetaData","Error","concat"],"sources":["/Users/neville/Documents/Github/elrond-delegation/src/context/reducer.tsx"],"sourcesContent":["import { StateType } from './state';\n\nexport type DispatchType = (action: any) => void;\nexport type ActionType =\n  | {\n      type: 'getUsersNumber';\n      usersNumber: StateType['usersNumber'];\n    }\n  | {\n      type: 'getContractDetails';\n      contractDetails: StateType['contractDetails'];\n    }\n  | {\n      type: 'getNodesNumber';\n      nodesNumber: StateType['nodesNumber'];\n    }\n  | {\n      type: 'getNodesStates';\n      nodesStates: StateType['nodesStates'];\n    }\n  | {\n      type: 'getTotalActiveStake';\n      totalActiveStake: StateType['totalActiveStake'];\n    }\n  | {\n      type: 'getUserActiveStake';\n      userActiveStake: StateType['userActiveStake'];\n    }\n  | {\n      type: 'getUndelegatedStakeList';\n      undelegatedStakeList: StateType['undelegatedStakeList'];\n    }\n  | {\n      type: 'getUserClaimableRewards';\n      userClaimableRewards: StateType['userClaimableRewards'];\n    }\n  | {\n      type: 'getNetworkConfig';\n      networkConfig: StateType['networkConfig'];\n    }\n  | {\n      type: 'getNetworkStatus';\n      networkStatus: StateType['networkStatus'];\n    }\n  | {\n      type: 'getTotalNetworkStake';\n      totalNetworkStake: StateType['totalNetworkStake'];\n    }\n  | {\n      type: 'getAgencyMetaData';\n      agencyMetaData: StateType['agencyMetaData'];\n    };\n\nconst reducer = (state: StateType, action: any) => {\n  switch (action.type) {\n    case 'getUsersNumber': {\n      return {\n        ...state,\n        usersNumber: action.usersNumber\n      };\n    }\n    case 'getContractDetails': {\n      return {\n        ...state,\n        contractDetails: action.contractDetails\n      };\n    }\n    case 'getNodesNumber': {\n      return {\n        ...state,\n        nodesNumber: action.nodesNumber\n      };\n    }\n    case 'getNodesStates': {\n      return {\n        ...state,\n        nodesStates: action.nodesStates\n      };\n    }\n    case 'getTotalActiveStake': {\n      return {\n        ...state,\n        totalActiveStake: action.totalActiveStake\n      };\n    }\n    case 'getUserActiveStake': {\n      return {\n        ...state,\n        userActiveStake: action.userActiveStake\n      };\n    }\n    case 'getUndelegatedStakeList': {\n      return {\n        ...state,\n        undelegatedStakeList: action.undelegatedStakeList\n      };\n    }\n    case 'getUserClaimableRewards': {\n      return {\n        ...state,\n        userClaimableRewards: action.userClaimableRewards\n      };\n    }\n    case 'getNetworkConfig': {\n      return {\n        ...state,\n        networkConfig: action.networkConfig\n      };\n    }\n    case 'getNetworkStatus': {\n      return {\n        ...state,\n        networkStatus: action.networkStatus\n      };\n    }\n    case 'getTotalNetworkStake': {\n      return {\n        ...state,\n        totalNetworkStake: action.totalNetworkStake\n      };\n    }\n    case 'getAgencyMetaData': {\n      return {\n        ...state,\n        agencyMetaData: action.agencyMetaData\n      };\n    }\n    default: {\n      throw new Error(`Unhandled action type: ${action}`);\n    }\n  }\n};\n\nexport { reducer };\n"],"mappings":";AAqDA,IAAMA,OAAO,GAAG,SAAVA,OAAOA,CAAIC,KAAgB,EAAEC,MAAW,EAAK;EACjD,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,gBAAgB;MAAE;QACrB,OAAAC,aAAA,CAAAA,aAAA,KACKH,KAAK;UACRI,WAAW,EAAEH,MAAM,CAACG;QAAW;MAEnC;IACA,KAAK,oBAAoB;MAAE;QACzB,OAAAD,aAAA,CAAAA,aAAA,KACKH,KAAK;UACRK,eAAe,EAAEJ,MAAM,CAACI;QAAe;MAE3C;IACA,KAAK,gBAAgB;MAAE;QACrB,OAAAF,aAAA,CAAAA,aAAA,KACKH,KAAK;UACRM,WAAW,EAAEL,MAAM,CAACK;QAAW;MAEnC;IACA,KAAK,gBAAgB;MAAE;QACrB,OAAAH,aAAA,CAAAA,aAAA,KACKH,KAAK;UACRO,WAAW,EAAEN,MAAM,CAACM;QAAW;MAEnC;IACA,KAAK,qBAAqB;MAAE;QAC1B,OAAAJ,aAAA,CAAAA,aAAA,KACKH,KAAK;UACRQ,gBAAgB,EAAEP,MAAM,CAACO;QAAgB;MAE7C;IACA,KAAK,oBAAoB;MAAE;QACzB,OAAAL,aAAA,CAAAA,aAAA,KACKH,KAAK;UACRS,eAAe,EAAER,MAAM,CAACQ;QAAe;MAE3C;IACA,KAAK,yBAAyB;MAAE;QAC9B,OAAAN,aAAA,CAAAA,aAAA,KACKH,KAAK;UACRU,oBAAoB,EAAET,MAAM,CAACS;QAAoB;MAErD;IACA,KAAK,yBAAyB;MAAE;QAC9B,OAAAP,aAAA,CAAAA,aAAA,KACKH,KAAK;UACRW,oBAAoB,EAAEV,MAAM,CAACU;QAAoB;MAErD;IACA,KAAK,kBAAkB;MAAE;QACvB,OAAAR,aAAA,CAAAA,aAAA,KACKH,KAAK;UACRY,aAAa,EAAEX,MAAM,CAACW;QAAa;MAEvC;IACA,KAAK,kBAAkB;MAAE;QACvB,OAAAT,aAAA,CAAAA,aAAA,KACKH,KAAK;UACRa,aAAa,EAAEZ,MAAM,CAACY;QAAa;MAEvC;IACA,KAAK,sBAAsB;MAAE;QAC3B,OAAAV,aAAA,CAAAA,aAAA,KACKH,KAAK;UACRc,iBAAiB,EAAEb,MAAM,CAACa;QAAiB;MAE/C;IACA,KAAK,mBAAmB;MAAE;QACxB,OAAAX,aAAA,CAAAA,aAAA,KACKH,KAAK;UACRe,cAAc,EAAEd,MAAM,CAACc;QAAc;MAEzC;IACA;MAAS;QACP,MAAM,IAAIC,KAAK,2BAAAC,MAAA,CAA2BhB,MAAM,EAAG;MACrD;EAAC;AAEL,CAAC;AAED,SAASF,OAAO"},"metadata":{},"sourceType":"module"}