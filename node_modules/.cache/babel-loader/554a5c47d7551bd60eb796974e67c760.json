{"ast":null,"code":"import _defineProperty from \"/Users/neville/Documents/Github/elrond-delegation/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _regeneratorRuntime from \"/Users/neville/Documents/Github/elrond-delegation/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _objectSpread from \"/Users/neville/Documents/Github/elrond-delegation/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"/Users/neville/Documents/Github/elrond-delegation/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _asyncToGenerator from \"/Users/neville/Documents/Github/elrond-delegation/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _jsxFileName = \"/Users/neville/Documents/Github/elrond-delegation/src/components/Cards/Cards.tsx\",\n  _this = this,\n  _s = $RefreshSig$();\nimport React, { useCallback, useEffect } from 'react';\nimport { faUsers, faServer, faLeaf, faReceipt, faArrowUp, faCog } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { decodeUnsignedNumber, ContractFunction, Address, Query, decodeString } from '@multiversx/sdk-core';\nimport { useGetActiveTransactionsStatus } from '@multiversx/sdk-dapp/hooks/transactions/useGetActiveTransactionsStatus';\nimport { ApiNetworkProvider, ProxyNetworkProvider } from '@multiversx/sdk-network-providers';\nimport axios from 'axios';\nimport classNames from 'classnames';\nimport { useLocation } from 'react-router-dom';\nimport { MultiversX } from 'assets/MultiversX';\nimport { Action } from 'components/Action';\nimport { network, auctionContract } from 'config';\nimport { useGlobalContext, useDispatch } from 'context';\nimport { denominated } from 'helpers/denominate';\nimport getPercentage from 'helpers/getPercentage';\nimport { ChangeDelegationCap } from './components/ChangeDelegationCap';\nimport { ChangeServiceFee } from './components/ChangeServiceFee';\nimport calculateAnnualPercentage from './helpers/calculateAnnualPercentage';\nimport styles from './styles.module.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport var Cards = function Cards() {\n  _s();\n  var _useGlobalContext = useGlobalContext(),\n    totalActiveStake = _useGlobalContext.totalActiveStake,\n    totalNetworkStake = _useGlobalContext.totalNetworkStake,\n    usersNumber = _useGlobalContext.usersNumber,\n    nodesNumber = _useGlobalContext.nodesNumber,\n    networkStatus = _useGlobalContext.networkStatus,\n    contractDetails = _useGlobalContext.contractDetails,\n    networkConfig = _useGlobalContext.networkConfig;\n  var _useGetActiveTransact = useGetActiveTransactionsStatus(),\n    pending = _useGetActiveTransact.pending;\n  var dispatch = useDispatch();\n  var location = useLocation();\n  var getNetworkStatus = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var _yield$Promise$all, _yield$Promise$all2, status, balance;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            dispatch({\n              type: 'getNetworkStatus',\n              networkStatus: {\n                status: 'loading',\n                data: null,\n                error: null\n              }\n            });\n            _context.prev = 1;\n            _context.next = 4;\n            return Promise.all([new ProxyNetworkProvider(network.gatewayAddress).getNetworkStatus(), axios.get(\"\".concat(network.apiAddress, \"/accounts/\").concat(auctionContract))]);\n          case 4:\n            _yield$Promise$all = _context.sent;\n            _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);\n            status = _yield$Promise$all2[0];\n            balance = _yield$Promise$all2[1];\n            dispatch({\n              type: 'getNetworkStatus',\n              networkStatus: {\n                status: 'loaded',\n                error: null,\n                data: _objectSpread(_objectSpread({}, status), {}, {\n                  Balance: balance.data.balance\n                })\n              }\n            });\n            _context.next = 14;\n            break;\n          case 11:\n            _context.prev = 11;\n            _context.t0 = _context[\"catch\"](1);\n            dispatch({\n              type: 'getNetworkStatus',\n              networkStatus: {\n                status: 'error',\n                data: null,\n                error: _context.t0\n              }\n            });\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, null, [[1, 11]]);\n    }));\n    return function getNetworkStatus() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  var getUsersNumber = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n      var provider, query, data, _data$getReturnDataPa, _data$getReturnDataPa2, userNumber;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            dispatch({\n              type: 'getUsersNumber',\n              usersNumber: {\n                status: 'loading',\n                data: null,\n                error: null\n              }\n            });\n            _context2.prev = 1;\n            provider = new ProxyNetworkProvider(network.apiAddress);\n            query = new Query({\n              address: new Address(network.delegationContract),\n              func: new ContractFunction('getNumUsers')\n            });\n            _context2.next = 6;\n            return provider.queryContract(query);\n          case 6:\n            data = _context2.sent;\n            _data$getReturnDataPa = data.getReturnDataParts(), _data$getReturnDataPa2 = _slicedToArray(_data$getReturnDataPa, 1), userNumber = _data$getReturnDataPa2[0];\n            dispatch({\n              type: 'getUsersNumber',\n              usersNumber: {\n                status: 'loaded',\n                data: decodeUnsignedNumber(userNumber).toString(),\n                error: null\n              }\n            });\n            _context2.next = 14;\n            break;\n          case 11:\n            _context2.prev = 11;\n            _context2.t0 = _context2[\"catch\"](1);\n            dispatch({\n              type: 'getUsersNumber',\n              usersNumber: {\n                status: 'error',\n                data: null,\n                error: _context2.t0\n              }\n            });\n          case 14:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2, null, [[1, 11]]);\n    }));\n    return function getUsersNumber() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var getTotalNetworkStake = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n      var query, data;\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            dispatch({\n              type: 'getTotalNetworkStake',\n              totalNetworkStake: {\n                data: null,\n                error: null,\n                status: 'loading'\n              }\n            });\n            _context3.prev = 1;\n            query = new ApiNetworkProvider(network.apiAddress, {\n              timeout: 4000\n            });\n            _context3.next = 5;\n            return query.getNetworkStakeStatistics();\n          case 5:\n            data = _context3.sent;\n            dispatch({\n              type: 'getTotalNetworkStake',\n              totalNetworkStake: {\n                status: 'loaded',\n                error: null,\n                data: data\n              }\n            });\n            _context3.next = 12;\n            break;\n          case 9:\n            _context3.prev = 9;\n            _context3.t0 = _context3[\"catch\"](1);\n            dispatch({\n              type: 'getTotalNetworkStake',\n              totalNetworkStake: {\n                status: 'error',\n                data: null,\n                error: _context3.t0\n              }\n            });\n          case 12:\n          case \"end\":\n            return _context3.stop();\n        }\n      }, _callee3, null, [[1, 9]]);\n    }));\n    return function getTotalNetworkStake() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  var getContractStakeData = useCallback(function () {\n    if (!totalNetworkStake.data || !totalActiveStake.data) {\n      var loading = totalNetworkStake.status === 'loading' || totalActiveStake.status === 'loading';\n      return {\n        value: loading ? \"... \".concat(network.egldLabel) : 'Stake Unknown',\n        percentage: loading ? '...%' : 'Data Unavailable'\n      };\n    }\n    var formatted = {\n      stake: denominated(totalNetworkStake.data.TotalStaked.toFixed()),\n      nodes: denominated(totalActiveStake.data)\n    };\n    return {\n      value: \"\".concat(formatted.nodes, \" \").concat(network.egldLabel),\n      percentage: \"\".concat(getPercentage(formatted.nodes, formatted.stake), \"% of total stake\")\n    };\n  }, [totalNetworkStake, totalActiveStake.data]);\n  var getNodesNumber = useCallback(function () {\n    if (!totalNetworkStake.data || !nodesNumber.data) {\n      var loading = totalNetworkStake.status === 'loading' || nodesNumber.status === 'loading';\n      return {\n        value: loading ? '...' : 'Nodes Unknown',\n        percentage: loading ? '...% of total nodes' : 'Data Unavailable'\n      };\n    }\n    var formatted = {\n      stake: totalNetworkStake.data.TotalValidators.toString(),\n      nodes: nodesNumber.data.filter(function (key) {\n        return decodeString(key) === 'staked';\n      }).length.toString()\n    };\n    return {\n      value: formatted.nodes,\n      percentage: \"\".concat(getPercentage(formatted.nodes, formatted.stake), \"% of total nodes\")\n    };\n  }, [totalNetworkStake, nodesNumber]);\n  var getDelegationCap = useCallback(function () {\n    if (!contractDetails.data || !totalActiveStake.data) {\n      var loading = totalActiveStake.status === 'loading' || contractDetails.status === 'loading';\n      return {\n        value: loading ? \"... \".concat(network.egldLabel) : 'Cap Unknown',\n        percentage: loading ? '...%' : 'Data Unavailable'\n      };\n    }\n    var formatted = {\n      stake: denominated(totalActiveStake.data),\n      value: denominated(contractDetails.data.delegationCap)\n    };\n    return {\n      value: \"\".concat(formatted.value, \" \").concat(network.egldLabel),\n      percentage: \"\".concat(getPercentage(formatted.stake, formatted.value), \"% filled\")\n    };\n  }, [totalActiveStake.data, contractDetails.data]);\n  var getAnnualPercentage = function getAnnualPercentage() {\n    var dependencies = [totalActiveStake, nodesNumber, networkStatus, totalNetworkStake, networkConfig, contractDetails];\n    if (dependencies.some(function (dependency) {\n      return dependency.status === 'loading';\n    })) {\n      return '...%';\n    }\n    if (dependencies.every(function (dependency) {\n      return dependency.data;\n    })) {\n      var percentage = calculateAnnualPercentage({\n        activeStake: totalActiveStake.data,\n        blsKeys: nodesNumber.data,\n        networkStatus: networkStatus.data,\n        networkStake: totalNetworkStake.data,\n        networkConfig: networkConfig.data,\n        serviceFee: parseFloat(contractDetails.data ? contractDetails.data.serviceFee.replace('%', '') : '0')\n      });\n      return \"\".concat(percentage, \"%\");\n    }\n    return 'Unknown APR';\n  };\n  var cards = [{\n    label: 'Contract Stake',\n    data: getContractStakeData(),\n    colors: ['#2044F5', '#1B37C0'],\n    icon: /*#__PURE__*/_jsxDEV(MultiversX, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 13\n    }, _this)\n  }, {\n    label: 'Number of Users',\n    colors: ['#6CADEF', '#5B96D2'],\n    icon: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n      icon: faUsers\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 13\n    }, _this),\n    data: {\n      value: usersNumber.status !== 'loaded' ? usersNumber.error ? 'Data Unavailable' : '...' : usersNumber.data\n    }\n  }, {\n    label: 'Number of Nodes',\n    icon: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n      icon: faServer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 13\n    }, _this),\n    colors: ['#36CA8C', '#2BA572'],\n    data: getNodesNumber()\n  }, {\n    label: 'Computed APR',\n    colors: ['#FBC34C', '#D49712'],\n    icon: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n      icon: faLeaf\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 13\n    }, _this),\n    data: {\n      value: getAnnualPercentage(),\n      percentage: 'Including Service Fee'\n    }\n  }, {\n    label: 'Service Fee',\n    modal: /*#__PURE__*/_jsxDEV(ChangeServiceFee, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 14\n    }, _this),\n    icon: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n      icon: faReceipt\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 13\n    }, _this),\n    title: 'Change service fee',\n    colors: ['#F3BF89', '#B68350'],\n    data: {\n      value: contractDetails.data ? contractDetails.data.serviceFee : contractDetails.error ? 'Service Fee Unknown' : '...%'\n    }\n  }, {\n    label: 'Delegation Cap',\n    modal: /*#__PURE__*/_jsxDEV(ChangeDelegationCap, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 14\n    }, _this),\n    description: \"The delegation cap is the maximum amount of \".concat(network.egldLabel, \" your agency can stake from delegators.\"),\n    title: 'Delegation Cap',\n    icon: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n      icon: faArrowUp\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 13\n    }, _this),\n    colors: ['#E48570', '#C25C45'],\n    data: getDelegationCap()\n  }];\n  var fetchNetworkStatus = function fetchNetworkStatus() {\n    if (!networkStatus.data) {\n      getNetworkStatus();\n    }\n  };\n  var fetchUsersNumber = function fetchUsersNumber() {\n    if (!usersNumber.data) {\n      getUsersNumber();\n    }\n  };\n  var fetchTotalNetworkStake = function fetchTotalNetworkStake() {\n    if (!totalNetworkStake.data) {\n      getTotalNetworkStake();\n    }\n  };\n  useEffect(fetchUsersNumber, [usersNumber.data]);\n  useEffect(fetchNetworkStatus, [networkStatus.data]);\n  useEffect(fetchTotalNetworkStake, [totalNetworkStake.data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"\".concat(styles.cards, \" cards\"),\n    children: cards.map(function (card) {\n      var _card$colors = _slicedToArray(card.colors, 2),\n        alpha = _card$colors[0],\n        beta = _card$colors[1];\n      var background = \"linear-gradient(180deg, \".concat(alpha, \" 0%, \").concat(beta, \" 100%)\");\n      var interactive = card.modal && location.pathname === '/admin';\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.card,\n        style: {\n          background: background\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.heading,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: card.label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 388,\n            columnNumber: 15\n          }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fill: interactive && !pending ? beta : 'white'\n            },\n            className: classNames(styles.icon, _defineProperty({}, styles.fill, interactive && !pending)),\n            children: interactive && !pending ? /*#__PURE__*/_jsxDEV(Action, {\n              render: function render() {\n                return card.modal;\n              },\n              title: card.title,\n              description: card.description,\n              trigger: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: classNames(styles.trigger, _defineProperty({}, styles.disabled, true)),\n                children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                  icon: faCog,\n                  size: \"lg\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 406,\n                  columnNumber: 25\n                }, _this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 401,\n                columnNumber: 23\n              }, _this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 396,\n              columnNumber: 19\n            }, _this) : card.icon\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 389,\n            columnNumber: 15\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 13\n        }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.value,\n          children: card.data.value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 13\n        }, _this), card.data.percentage && /*#__PURE__*/_jsxDEV(\"span\", {\n          children: card.data.percentage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 38\n        }, _this)]\n      }, card.label, true, {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 11\n      }, _this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 379,\n    columnNumber: 5\n  }, _this);\n};\n_s(Cards, \"L6mFAG2RhB/KChoOQ9GMqwXY0vI=\", false, function () {\n  return [useGlobalContext, useGetActiveTransactionsStatus, useDispatch, useLocation];\n});\n_c = Cards;\nvar _c;\n$RefreshReg$(_c, \"Cards\");","map":{"version":3,"names":["React","useCallback","useEffect","faUsers","faServer","faLeaf","faReceipt","faArrowUp","faCog","FontAwesomeIcon","decodeUnsignedNumber","ContractFunction","Address","Query","decodeString","useGetActiveTransactionsStatus","ApiNetworkProvider","ProxyNetworkProvider","axios","classNames","useLocation","MultiversX","Action","network","auctionContract","useGlobalContext","useDispatch","denominated","getPercentage","ChangeDelegationCap","ChangeServiceFee","calculateAnnualPercentage","styles","jsxDEV","_jsxDEV","Cards","_s","_useGlobalContext","totalActiveStake","totalNetworkStake","usersNumber","nodesNumber","networkStatus","contractDetails","networkConfig","_useGetActiveTransact","pending","dispatch","location","getNetworkStatus","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_yield$Promise$all","_yield$Promise$all2","status","balance","wrap","_callee$","_context","prev","next","type","data","error","Promise","all","gatewayAddress","get","concat","apiAddress","sent","_slicedToArray","_objectSpread","Balance","t0","stop","apply","arguments","getUsersNumber","_ref2","_callee2","provider","query","_data$getReturnDataPa","_data$getReturnDataPa2","userNumber","_callee2$","_context2","address","delegationContract","func","queryContract","getReturnDataParts","toString","getTotalNetworkStake","_ref3","_callee3","_callee3$","_context3","timeout","getNetworkStakeStatistics","getContractStakeData","loading","value","egldLabel","percentage","formatted","stake","TotalStaked","toFixed","nodes","getNodesNumber","TotalValidators","filter","key","length","getDelegationCap","delegationCap","getAnnualPercentage","dependencies","some","dependency","every","activeStake","blsKeys","networkStake","serviceFee","parseFloat","replace","cards","label","colors","icon","fileName","_jsxFileName","lineNumber","columnNumber","_this","modal","title","description","fetchNetworkStatus","fetchUsersNumber","fetchTotalNetworkStake","className","children","map","card","_card$colors","alpha","beta","background","interactive","pathname","style","heading","fill","_defineProperty","render","trigger","disabled","size","_c","$RefreshReg$"],"sources":["/Users/neville/Documents/Github/elrond-delegation/src/components/Cards/Cards.tsx"],"sourcesContent":["import React, { useCallback, useEffect, ReactNode } from 'react';\nimport {\n  faUsers,\n  faServer,\n  faLeaf,\n  faReceipt,\n  faArrowUp,\n  faCog\n} from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  decodeUnsignedNumber,\n  ContractFunction,\n  Address,\n  Query,\n  decodeString\n} from '@multiversx/sdk-core';\nimport { useGetActiveTransactionsStatus } from '@multiversx/sdk-dapp/hooks/transactions/useGetActiveTransactionsStatus';\nimport {\n  ApiNetworkProvider,\n  ProxyNetworkProvider\n} from '@multiversx/sdk-network-providers';\nimport axios from 'axios';\nimport classNames from 'classnames';\nimport { useLocation } from 'react-router-dom';\n\nimport { MultiversX } from 'assets/MultiversX';\nimport { Action } from 'components/Action';\nimport { network, auctionContract } from 'config';\nimport { useGlobalContext, useDispatch } from 'context';\nimport { denominated } from 'helpers/denominate';\nimport getPercentage from 'helpers/getPercentage';\n\nimport { ChangeDelegationCap } from './components/ChangeDelegationCap';\nimport { ChangeServiceFee } from './components/ChangeServiceFee';\n\nimport calculateAnnualPercentage from './helpers/calculateAnnualPercentage';\n\nimport styles from './styles.module.scss';\n\ninterface CardType {\n  label: string;\n  colors: string[];\n  data: {\n    value?: string | null;\n    percentage?: string | undefined;\n  };\n  title?: string;\n  description?: string;\n  modal?: ReactNode;\n  icon: ReactNode;\n}\n\nexport const Cards = () => {\n  const {\n    totalActiveStake,\n    totalNetworkStake,\n    usersNumber,\n    nodesNumber,\n    networkStatus,\n    contractDetails,\n    networkConfig\n  } = useGlobalContext();\n  const { pending } = useGetActiveTransactionsStatus();\n\n  const dispatch = useDispatch();\n  const location = useLocation();\n\n  const getNetworkStatus = async (): Promise<void> => {\n    dispatch({\n      type: 'getNetworkStatus',\n      networkStatus: {\n        status: 'loading',\n        data: null,\n        error: null\n      }\n    });\n\n    try {\n      const [status, balance] = await Promise.all([\n        new ProxyNetworkProvider(network.gatewayAddress).getNetworkStatus(),\n        axios.get(`${network.apiAddress}/accounts/${auctionContract}`)\n      ]);\n\n      dispatch({\n        type: 'getNetworkStatus',\n        networkStatus: {\n          status: 'loaded',\n          error: null,\n          data: {\n            ...status,\n            Balance: balance.data.balance\n          }\n        }\n      });\n    } catch (error) {\n      dispatch({\n        type: 'getNetworkStatus',\n        networkStatus: {\n          status: 'error',\n          data: null,\n          error\n        }\n      });\n    }\n  };\n\n  const getUsersNumber = async (): Promise<void> => {\n    dispatch({\n      type: 'getUsersNumber',\n      usersNumber: {\n        status: 'loading',\n        data: null,\n        error: null\n      }\n    });\n\n    try {\n      const provider = new ProxyNetworkProvider(network.apiAddress);\n      const query = new Query({\n        address: new Address(network.delegationContract),\n        func: new ContractFunction('getNumUsers')\n      });\n\n      const data = await provider.queryContract(query);\n      const [userNumber] = data.getReturnDataParts();\n\n      dispatch({\n        type: 'getUsersNumber',\n        usersNumber: {\n          status: 'loaded',\n          data: decodeUnsignedNumber(userNumber).toString(),\n          error: null\n        }\n      });\n    } catch (error) {\n      dispatch({\n        type: 'getUsersNumber',\n        usersNumber: {\n          status: 'error',\n          data: null,\n          error\n        }\n      });\n    }\n  };\n\n  const getTotalNetworkStake = async (): Promise<void> => {\n    dispatch({\n      type: 'getTotalNetworkStake',\n      totalNetworkStake: {\n        data: null,\n        error: null,\n        status: 'loading'\n      }\n    });\n\n    try {\n      const query = new ApiNetworkProvider(network.apiAddress, {\n        timeout: 4000\n      });\n\n      const data = await query.getNetworkStakeStatistics();\n\n      dispatch({\n        type: 'getTotalNetworkStake',\n        totalNetworkStake: {\n          status: 'loaded',\n          error: null,\n          data\n        }\n      });\n    } catch (error) {\n      dispatch({\n        type: 'getTotalNetworkStake',\n        totalNetworkStake: {\n          status: 'error',\n          data: null,\n          error\n        }\n      });\n    }\n  };\n\n  const getContractStakeData = useCallback(() => {\n    if (!totalNetworkStake.data || !totalActiveStake.data) {\n      const loading =\n        totalNetworkStake.status === 'loading' ||\n        totalActiveStake.status === 'loading';\n\n      return {\n        value: loading ? `... ${network.egldLabel}` : 'Stake Unknown',\n        percentage: loading ? '...%' : 'Data Unavailable'\n      };\n    }\n\n    const formatted = {\n      stake: denominated(totalNetworkStake.data.TotalStaked.toFixed()),\n      nodes: denominated(totalActiveStake.data)\n    };\n\n    return {\n      value: `${formatted.nodes} ${network.egldLabel}`,\n      percentage: `${getPercentage(\n        formatted.nodes,\n        formatted.stake\n      )}% of total stake`\n    };\n  }, [totalNetworkStake, totalActiveStake.data]);\n\n  const getNodesNumber = useCallback(() => {\n    if (!totalNetworkStake.data || !nodesNumber.data) {\n      const loading =\n        totalNetworkStake.status === 'loading' ||\n        nodesNumber.status === 'loading';\n\n      return {\n        value: loading ? '...' : 'Nodes Unknown',\n        percentage: loading ? '...% of total nodes' : 'Data Unavailable'\n      };\n    }\n\n    const formatted = {\n      stake: totalNetworkStake.data.TotalValidators.toString(),\n      nodes: nodesNumber.data\n        .filter((key: any) => decodeString(key) === 'staked')\n        .length.toString()\n    };\n\n    return {\n      value: formatted.nodes,\n      percentage: `${getPercentage(\n        formatted.nodes,\n        formatted.stake\n      )}% of total nodes`\n    };\n  }, [totalNetworkStake, nodesNumber]);\n\n  const getDelegationCap = useCallback(() => {\n    if (!contractDetails.data || !totalActiveStake.data) {\n      const loading =\n        totalActiveStake.status === 'loading' ||\n        contractDetails.status === 'loading';\n\n      return {\n        value: loading ? `... ${network.egldLabel}` : 'Cap Unknown',\n        percentage: loading ? '...%' : 'Data Unavailable'\n      };\n    }\n\n    const formatted = {\n      stake: denominated(totalActiveStake.data),\n      value: denominated(contractDetails.data.delegationCap)\n    };\n\n    return {\n      value: `${formatted.value} ${network.egldLabel}`,\n      percentage: `${getPercentage(formatted.stake, formatted.value)}% filled`\n    };\n  }, [totalActiveStake.data, contractDetails.data]);\n\n  const getAnnualPercentage = () => {\n    const dependencies = [\n      totalActiveStake,\n      nodesNumber,\n      networkStatus,\n      totalNetworkStake,\n      networkConfig,\n      contractDetails\n    ];\n\n    if (dependencies.some((dependency) => dependency.status === 'loading')) {\n      return '...%';\n    }\n\n    if (dependencies.every((dependency) => dependency.data)) {\n      const percentage = calculateAnnualPercentage({\n        activeStake: totalActiveStake.data,\n        blsKeys: nodesNumber.data,\n        networkStatus: networkStatus.data,\n        networkStake: totalNetworkStake.data,\n        networkConfig: networkConfig.data,\n        serviceFee: parseFloat(\n          contractDetails.data\n            ? contractDetails.data.serviceFee.replace('%', '')\n            : '0'\n        )\n      });\n\n      return `${percentage}%`;\n    }\n\n    return 'Unknown APR';\n  };\n\n  const cards: CardType[] = [\n    {\n      label: 'Contract Stake',\n      data: getContractStakeData(),\n      colors: ['#2044F5', '#1B37C0'],\n      icon: <MultiversX />\n    },\n    {\n      label: 'Number of Users',\n      colors: ['#6CADEF', '#5B96D2'],\n      icon: <FontAwesomeIcon icon={faUsers} />,\n      data: {\n        value:\n          usersNumber.status !== 'loaded'\n            ? usersNumber.error\n              ? 'Data Unavailable'\n              : '...'\n            : usersNumber.data\n      }\n    },\n    {\n      label: 'Number of Nodes',\n      icon: <FontAwesomeIcon icon={faServer} />,\n      colors: ['#36CA8C', '#2BA572'],\n      data: getNodesNumber()\n    },\n    {\n      label: 'Computed APR',\n      colors: ['#FBC34C', '#D49712'],\n      icon: <FontAwesomeIcon icon={faLeaf} />,\n      data: {\n        value: getAnnualPercentage(),\n        percentage: 'Including Service Fee'\n      }\n    },\n    {\n      label: 'Service Fee',\n      modal: <ChangeServiceFee />,\n      icon: <FontAwesomeIcon icon={faReceipt} />,\n      title: 'Change service fee',\n      colors: ['#F3BF89', '#B68350'],\n      data: {\n        value: contractDetails.data\n          ? contractDetails.data.serviceFee\n          : contractDetails.error\n          ? 'Service Fee Unknown'\n          : '...%'\n      }\n    },\n    {\n      label: 'Delegation Cap',\n      modal: <ChangeDelegationCap />,\n      description: `The delegation cap is the maximum amount of ${network.egldLabel} your agency can stake from delegators.`,\n      title: 'Delegation Cap',\n      icon: <FontAwesomeIcon icon={faArrowUp} />,\n      colors: ['#E48570', '#C25C45'],\n      data: getDelegationCap()\n    }\n  ];\n\n  const fetchNetworkStatus = () => {\n    if (!networkStatus.data) {\n      getNetworkStatus();\n    }\n  };\n\n  const fetchUsersNumber = () => {\n    if (!usersNumber.data) {\n      getUsersNumber();\n    }\n  };\n\n  const fetchTotalNetworkStake = () => {\n    if (!totalNetworkStake.data) {\n      getTotalNetworkStake();\n    }\n  };\n\n  useEffect(fetchUsersNumber, [usersNumber.data]);\n  useEffect(fetchNetworkStatus, [networkStatus.data]);\n  useEffect(fetchTotalNetworkStake, [totalNetworkStake.data]);\n\n  return (\n    <div className={`${styles.cards} cards`}>\n      {cards.map((card) => {\n        const [alpha, beta] = card.colors;\n        const background = `linear-gradient(180deg, ${alpha} 0%, ${beta} 100%)`;\n        const interactive = card.modal && location.pathname === '/admin';\n\n        return (\n          <div key={card.label} className={styles.card} style={{ background }}>\n            <div className={styles.heading}>\n              <span>{card.label}</span>\n              <div\n                style={{ fill: interactive && !pending ? beta : 'white' }}\n                className={classNames(styles.icon, {\n                  [styles.fill]: interactive && !pending\n                })}\n              >\n                {interactive && !pending ? (\n                  <Action\n                    render={() => card.modal}\n                    title={card.title}\n                    description={card.description}\n                    trigger={\n                      <span\n                        className={classNames(styles.trigger, {\n                          [styles.disabled]: true\n                        })}\n                      >\n                        <FontAwesomeIcon icon={faCog} size='lg' />\n                      </span>\n                    }\n                  />\n                ) : (\n                  card.icon\n                )}\n              </div>\n            </div>\n\n            <div className={styles.value}>{card.data.value}</div>\n\n            {card.data.percentage && <span>{card.data.percentage}</span>}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}