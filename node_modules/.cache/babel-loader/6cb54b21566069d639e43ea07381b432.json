{"ast":null,"code":"import{parseAmount}from'@multiversx/sdk-dapp/utils/operations/parseAmount';import BigNumber from'bignumber.js';import{string}from'yup';import{network,denomination}from'config';import{denominated}from'helpers/denominate';var undelegateValidator=function undelegateValidator(input){return string().required('Required').test('minimum','Value must be greater than zero.',function(){var value=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'0';return new BigNumber(parseAmount(value,denomination)).isGreaterThanOrEqualTo(1);}).test('remaining',\"Either undelegate the total amount or leave at least 1 \".concat(network.egldLabel,\" staked.\"),function(){var value=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'0';var requested=new BigNumber(parseAmount(value,denomination));var minimum=new BigNumber(parseAmount('1',denomination));var total=new BigNumber(input);var oneLeft=total.minus(requested).isGreaterThanOrEqualTo(minimum);var clearance=total.isEqualTo(value)||total.isEqualTo(requested);return oneLeft||clearance;}).test('maximum',\"You need to set a value under \".concat(denominated(input),\" \").concat(network.egldLabel,\".\"),function(){var value=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'0';var requested=new BigNumber(parseAmount(value,denomination));var total=new BigNumber(input);var maxed=total.isEqualTo(value);var below=requested.isLessThanOrEqualTo(input);return maxed||below;});};var delegateValidator=function delegateValidator(input,limit){return string().required('Required').test('minimum','Value must be greater than zero.',function(){var value=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'0';return new BigNumber(parseAmount(value,denomination)).isGreaterThanOrEqualTo(1);}).test('maximum',\"You need to set a value under \".concat(denominated(input),\" \").concat(network.egldLabel,\".\"),function(){var value=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'0';return new BigNumber(parseAmount(value,denomination)).isLessThanOrEqualTo(input);}).test('uncapable',\"Max delegation cap reached. That is the maximum amount you can delegate: \".concat(denominated(limit),\" \").concat(network.egldLabel),function(){var value=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'0';return new BigNumber(parseAmount(value,denomination)).isLessThanOrEqualTo(limit);});};export{delegateValidator,undelegateValidator};","map":{"version":3,"names":["parseAmount","BigNumber","string","network","denomination","denominated","undelegateValidator","input","required","test","value","arguments","length","undefined","isGreaterThanOrEqualTo","concat","egldLabel","requested","minimum","total","oneLeft","minus","clearance","isEqualTo","maxed","below","isLessThanOrEqualTo","delegateValidator","limit"],"sources":["/Users/neville/Documents/Github/elrond-delegation/src/components/Stake/helpers/delegationValidators.ts"],"sourcesContent":["import { parseAmount } from '@multiversx/sdk-dapp/utils/operations/parseAmount';\n\nimport BigNumber from 'bignumber.js';\nimport { string } from 'yup';\nimport { network, denomination } from 'config';\nimport { denominated } from 'helpers/denominate';\n\nconst undelegateValidator = (input: string) =>\n  string()\n    .required('Required')\n    .test('minimum', 'Value must be greater than zero.', (value = '0') =>\n      new BigNumber(parseAmount(value, denomination)).isGreaterThanOrEqualTo(1)\n    )\n    .test(\n      'remaining',\n      `Either undelegate the total amount or leave at least 1 ${network.egldLabel} staked.`,\n      (value = '0') => {\n        const requested = new BigNumber(parseAmount(value, denomination));\n        const minimum = new BigNumber(parseAmount('1', denomination));\n        const total = new BigNumber(input);\n\n        const oneLeft = total.minus(requested).isGreaterThanOrEqualTo(minimum);\n        const clearance = total.isEqualTo(value) || total.isEqualTo(requested);\n\n        return oneLeft || clearance;\n      }\n    )\n    .test(\n      'maximum',\n      `You need to set a value under ${denominated(input)} ${\n        network.egldLabel\n      }.`,\n      (value = '0') => {\n        const requested = new BigNumber(parseAmount(value, denomination));\n        const total = new BigNumber(input);\n        const maxed = total.isEqualTo(value);\n        const below = requested.isLessThanOrEqualTo(input);\n\n        return maxed || below;\n      }\n    );\n\nconst delegateValidator = (input: string, limit: string) =>\n  string()\n    .required('Required')\n    .test('minimum', 'Value must be greater than zero.', (value = '0') =>\n      new BigNumber(parseAmount(value, denomination)).isGreaterThanOrEqualTo(1)\n    )\n    .test(\n      'maximum',\n      `You need to set a value under ${denominated(input)} ${\n        network.egldLabel\n      }.`,\n      (value = '0') =>\n        new BigNumber(parseAmount(value, denomination)).isLessThanOrEqualTo(\n          input\n        )\n    )\n    .test(\n      'uncapable',\n      `Max delegation cap reached. That is the maximum amount you can delegate: ${denominated(\n        limit\n      )} ${network.egldLabel}`,\n      (value = '0') =>\n        new BigNumber(parseAmount(value, denomination)).isLessThanOrEqualTo(\n          limit\n        )\n    );\n\nexport { delegateValidator, undelegateValidator };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}