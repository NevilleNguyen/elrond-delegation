{"ast":null,"code":"import { decodeString } from '@multiversx/sdk-core';\nimport { denomination, decimals, feesInEpoch, stakePerNode, protocolSustainabilityRewards, yearSettings, genesisTokenSupply } from 'config';\nimport denominate from 'helpers/denominate';\nvar denominateValue = function denominateValue(value) {\n  var denominatedValueString = denominate({\n    input: value,\n    denomination: denomination,\n    decimals: decimals\n  });\n  var valueWithoutComma = denominatedValueString.replace(/,/g, '');\n  return valueWithoutComma;\n};\nvar calculateAnnualPercentage = function calculateAnnualPercentage(_ref) {\n  var _yearSettings$find;\n  var activeStake = _ref.activeStake,\n    blsKeys = _ref.blsKeys,\n    networkStatus = _ref.networkStatus,\n    networkStake = _ref.networkStake,\n    networkConfig = _ref.networkConfig,\n    serviceFee = _ref.serviceFee;\n  var allNodes = blsKeys.filter(function (key) {\n    return decodeString(key) === 'staked' || decodeString(key) === 'jailed' || decodeString(key) === 'queued';\n  }).length;\n  var allActiveNodes = blsKeys.filter(function (key) {\n    return decodeString(key) === 'staked';\n  }).length;\n  if (allActiveNodes <= 0) {\n    return '0.00';\n  }\n  var epochDurationInSeconds = networkConfig.RoundDuration / 1000 * networkConfig.RoundsPerEpoch;\n  var secondsInYear = 365 * 24 * 3600;\n  var epochsInYear = secondsInYear / epochDurationInSeconds;\n  var inflationRate = ((_yearSettings$find = yearSettings.find(function (x) {\n    return x.year === Math.floor(networkStatus.EpochNumber / epochsInYear) + 1;\n  })) === null || _yearSettings$find === void 0 ? void 0 : _yearSettings$find.maximumInflation) || 0;\n  var rewardsPerEpoch = Math.max(inflationRate * genesisTokenSupply / epochsInYear, feesInEpoch);\n  var rewardsPerEpochWithoutProtocolSustainability = (1 - protocolSustainabilityRewards) * rewardsPerEpoch;\n  var topUpRewardsLimit = networkConfig.TopUpFactor * rewardsPerEpochWithoutProtocolSustainability;\n  var networkBaseStake = networkStake.ActiveValidators * stakePerNode;\n  var networkTotalStake = parseInt(denominateValue(networkStatus.Balance));\n  var networkTopUpStake = networkTotalStake - networkStake.TotalValidators * stakePerNode - networkStake.QueueSize * stakePerNode;\n  var topUpReward = 2 * topUpRewardsLimit / Math.PI * Math.atan(networkTopUpStake / (2 * parseInt(denominateValue(networkConfig.TopUpRewardsGradientPoint.toFixed()))));\n  var baseReward = rewardsPerEpochWithoutProtocolSustainability - topUpReward;\n  var validatorTotalStake = parseInt(denominateValue(activeStake));\n  var actualNumberOfNodes = Math.min(Math.floor(validatorTotalStake / stakePerNode), allActiveNodes);\n  var validatorBaseStake = actualNumberOfNodes * stakePerNode;\n  var validatorTopUpStake = (validatorTotalStake - allNodes * stakePerNode) / allNodes * allActiveNodes;\n  var validatorTopUpReward = networkTopUpStake > 0 ? validatorTopUpStake / networkTopUpStake * topUpReward : 0;\n  var validatorBaseReward = validatorBaseStake / networkBaseStake * baseReward;\n  var anualPercentageRate = epochsInYear * (validatorTopUpReward + validatorBaseReward) / validatorTotalStake;\n  var annuallPercentageRateTotal = anualPercentageRate * 100 - anualPercentageRate * 100 * (serviceFee / 100);\n  return annuallPercentageRateTotal.toFixed(2).toString();\n};\nexport default calculateAnnualPercentage;","map":{"version":3,"names":["decodeString","denomination","decimals","feesInEpoch","stakePerNode","protocolSustainabilityRewards","yearSettings","genesisTokenSupply","denominate","denominateValue","value","denominatedValueString","input","valueWithoutComma","replace","calculateAnnualPercentage","_ref","_yearSettings$find","activeStake","blsKeys","networkStatus","networkStake","networkConfig","serviceFee","allNodes","filter","key","length","allActiveNodes","epochDurationInSeconds","RoundDuration","RoundsPerEpoch","secondsInYear","epochsInYear","inflationRate","find","x","year","Math","floor","EpochNumber","maximumInflation","rewardsPerEpoch","max","rewardsPerEpochWithoutProtocolSustainability","topUpRewardsLimit","TopUpFactor","networkBaseStake","ActiveValidators","networkTotalStake","parseInt","Balance","networkTopUpStake","TotalValidators","QueueSize","topUpReward","PI","atan","TopUpRewardsGradientPoint","toFixed","baseReward","validatorTotalStake","actualNumberOfNodes","min","validatorBaseStake","validatorTopUpStake","validatorTopUpReward","validatorBaseReward","anualPercentageRate","annuallPercentageRateTotal","toString"],"sources":["/Users/neville/Documents/Github/elrond-delegation/src/components/Cards/helpers/calculateAnnualPercentage.ts"],"sourcesContent":["import { decodeString } from '@multiversx/sdk-core';\nimport {\n  denomination,\n  decimals,\n  feesInEpoch,\n  stakePerNode,\n  protocolSustainabilityRewards,\n  yearSettings,\n  genesisTokenSupply\n} from 'config';\nimport denominate from 'helpers/denominate';\n\nconst denominateValue = (value: string) => {\n  const denominatedValueString = denominate({\n    input: value,\n    denomination,\n    decimals\n  });\n  const valueWithoutComma = denominatedValueString.replace(/,/g, '');\n  return valueWithoutComma;\n};\n\nconst calculateAnnualPercentage = ({\n  activeStake,\n  blsKeys,\n  networkStatus,\n  networkStake,\n  networkConfig,\n  serviceFee\n}: any) => {\n  const allNodes = blsKeys.filter(\n    (key: any) =>\n      decodeString(key) === 'staked' ||\n      decodeString(key) === 'jailed' ||\n      decodeString(key) === 'queued'\n  ).length;\n  const allActiveNodes = blsKeys.filter(\n    (key: any) => decodeString(key) === 'staked'\n  ).length;\n  if (allActiveNodes <= 0) {\n    return '0.00';\n  }\n\n  const epochDurationInSeconds =\n    (networkConfig.RoundDuration / 1000) * networkConfig.RoundsPerEpoch;\n  const secondsInYear = 365 * 24 * 3600;\n  const epochsInYear = secondsInYear / epochDurationInSeconds;\n  const inflationRate =\n    yearSettings.find(\n      (x) => x.year === Math.floor(networkStatus.EpochNumber / epochsInYear) + 1\n    )?.maximumInflation || 0;\n  const rewardsPerEpoch = Math.max(\n    (inflationRate * genesisTokenSupply) / epochsInYear,\n    feesInEpoch\n  );\n  const rewardsPerEpochWithoutProtocolSustainability =\n    (1 - protocolSustainabilityRewards) * rewardsPerEpoch;\n  const topUpRewardsLimit =\n    networkConfig.TopUpFactor * rewardsPerEpochWithoutProtocolSustainability;\n\n  const networkBaseStake = networkStake.ActiveValidators * stakePerNode;\n  const networkTotalStake = parseInt(denominateValue(networkStatus.Balance));\n  const networkTopUpStake =\n    networkTotalStake -\n    networkStake.TotalValidators * stakePerNode -\n    networkStake.QueueSize * stakePerNode;\n  const topUpReward =\n    ((2 * topUpRewardsLimit) / Math.PI) *\n    Math.atan(\n      networkTopUpStake /\n        (2 *\n          parseInt(\n            denominateValue(networkConfig.TopUpRewardsGradientPoint.toFixed())\n          ))\n    );\n\n  const baseReward = rewardsPerEpochWithoutProtocolSustainability - topUpReward;\n  const validatorTotalStake = parseInt(denominateValue(activeStake));\n  const actualNumberOfNodes = Math.min(\n    Math.floor(validatorTotalStake / stakePerNode),\n    allActiveNodes\n  );\n  const validatorBaseStake = actualNumberOfNodes * stakePerNode;\n\n  const validatorTopUpStake =\n    ((validatorTotalStake - allNodes * stakePerNode) / allNodes) *\n    allActiveNodes;\n  const validatorTopUpReward =\n    networkTopUpStake > 0\n      ? (validatorTopUpStake / networkTopUpStake) * topUpReward\n      : 0;\n  const validatorBaseReward =\n    (validatorBaseStake / networkBaseStake) * baseReward;\n  const anualPercentageRate =\n    (epochsInYear * (validatorTopUpReward + validatorBaseReward)) /\n    validatorTotalStake;\n  const annuallPercentageRateTotal =\n    anualPercentageRate * 100 - anualPercentageRate * 100 * (serviceFee / 100);\n\n  return annuallPercentageRateTotal.toFixed(2).toString();\n};\n\nexport default calculateAnnualPercentage;\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,sBAAsB;AACnD,SACEC,YAAY,EACZC,QAAQ,EACRC,WAAW,EACXC,YAAY,EACZC,6BAA6B,EAC7BC,YAAY,EACZC,kBAAkB,QACb,QAAQ;AACf,OAAOC,UAAU,MAAM,oBAAoB;AAE3C,IAAMC,eAAe,GAAG,SAAlBA,eAAeA,CAAIC,KAAa,EAAK;EACzC,IAAMC,sBAAsB,GAAGH,UAAU,CAAC;IACxCI,KAAK,EAAEF,KAAK;IACZT,YAAY,EAAZA,YAAY;IACZC,QAAQ,EAARA;EACF,CAAC,CAAC;EACF,IAAMW,iBAAiB,GAAGF,sBAAsB,CAACG,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC;EAClE,OAAOD,iBAAiB;AAC1B,CAAC;AAED,IAAME,yBAAyB,GAAG,SAA5BA,yBAAyBA,CAAAC,IAAA,EAOpB;EAAA,IAAAC,kBAAA;EAAA,IANTC,WAAW,GAAAF,IAAA,CAAXE,WAAW;IACXC,OAAO,GAAAH,IAAA,CAAPG,OAAO;IACPC,aAAa,GAAAJ,IAAA,CAAbI,aAAa;IACbC,YAAY,GAAAL,IAAA,CAAZK,YAAY;IACZC,aAAa,GAAAN,IAAA,CAAbM,aAAa;IACbC,UAAU,GAAAP,IAAA,CAAVO,UAAU;EAEV,IAAMC,QAAQ,GAAGL,OAAO,CAACM,MAAM,CAC7B,UAACC,GAAQ;IAAA,OACP1B,YAAY,CAAC0B,GAAG,CAAC,KAAK,QAAQ,IAC9B1B,YAAY,CAAC0B,GAAG,CAAC,KAAK,QAAQ,IAC9B1B,YAAY,CAAC0B,GAAG,CAAC,KAAK,QAAQ;EAAA,EACjC,CAACC,MAAM;EACR,IAAMC,cAAc,GAAGT,OAAO,CAACM,MAAM,CACnC,UAACC,GAAQ;IAAA,OAAK1B,YAAY,CAAC0B,GAAG,CAAC,KAAK,QAAQ;EAAA,EAC7C,CAACC,MAAM;EACR,IAAIC,cAAc,IAAI,CAAC,EAAE;IACvB,OAAO,MAAM;EACf;EAEA,IAAMC,sBAAsB,GACzBP,aAAa,CAACQ,aAAa,GAAG,IAAI,GAAIR,aAAa,CAACS,cAAc;EACrE,IAAMC,aAAa,GAAG,GAAG,GAAG,EAAE,GAAG,IAAI;EACrC,IAAMC,YAAY,GAAGD,aAAa,GAAGH,sBAAsB;EAC3D,IAAMK,aAAa,GACjB,EAAAjB,kBAAA,GAAAX,YAAY,CAAC6B,IAAI,CACf,UAACC,CAAC;IAAA,OAAKA,CAAC,CAACC,IAAI,KAAKC,IAAI,CAACC,KAAK,CAACnB,aAAa,CAACoB,WAAW,GAAGP,YAAY,CAAC,GAAG,CAAC;EAAA,EAC3E,cAAAhB,kBAAA,uBAFDA,kBAAA,CAEGwB,gBAAgB,KAAI,CAAC;EAC1B,IAAMC,eAAe,GAAGJ,IAAI,CAACK,GAAG,CAC7BT,aAAa,GAAG3B,kBAAkB,GAAI0B,YAAY,EACnD9B,WAAW,CACZ;EACD,IAAMyC,4CAA4C,GAChD,CAAC,CAAC,GAAGvC,6BAA6B,IAAIqC,eAAe;EACvD,IAAMG,iBAAiB,GACrBvB,aAAa,CAACwB,WAAW,GAAGF,4CAA4C;EAE1E,IAAMG,gBAAgB,GAAG1B,YAAY,CAAC2B,gBAAgB,GAAG5C,YAAY;EACrE,IAAM6C,iBAAiB,GAAGC,QAAQ,CAACzC,eAAe,CAACW,aAAa,CAAC+B,OAAO,CAAC,CAAC;EAC1E,IAAMC,iBAAiB,GACrBH,iBAAiB,GACjB5B,YAAY,CAACgC,eAAe,GAAGjD,YAAY,GAC3CiB,YAAY,CAACiC,SAAS,GAAGlD,YAAY;EACvC,IAAMmD,WAAW,GACb,CAAC,GAAGV,iBAAiB,GAAIP,IAAI,CAACkB,EAAE,GAClClB,IAAI,CAACmB,IAAI,CACPL,iBAAiB,IACd,CAAC,GACAF,QAAQ,CACNzC,eAAe,CAACa,aAAa,CAACoC,yBAAyB,CAACC,OAAO,EAAE,CAAC,CACnE,CAAC,CACP;EAEH,IAAMC,UAAU,GAAGhB,4CAA4C,GAAGW,WAAW;EAC7E,IAAMM,mBAAmB,GAAGX,QAAQ,CAACzC,eAAe,CAACS,WAAW,CAAC,CAAC;EAClE,IAAM4C,mBAAmB,GAAGxB,IAAI,CAACyB,GAAG,CAClCzB,IAAI,CAACC,KAAK,CAACsB,mBAAmB,GAAGzD,YAAY,CAAC,EAC9CwB,cAAc,CACf;EACD,IAAMoC,kBAAkB,GAAGF,mBAAmB,GAAG1D,YAAY;EAE7D,IAAM6D,mBAAmB,GACtB,CAACJ,mBAAmB,GAAGrC,QAAQ,GAAGpB,YAAY,IAAIoB,QAAQ,GAC3DI,cAAc;EAChB,IAAMsC,oBAAoB,GACxBd,iBAAiB,GAAG,CAAC,GAChBa,mBAAmB,GAAGb,iBAAiB,GAAIG,WAAW,GACvD,CAAC;EACP,IAAMY,mBAAmB,GACtBH,kBAAkB,GAAGjB,gBAAgB,GAAIa,UAAU;EACtD,IAAMQ,mBAAmB,GACtBnC,YAAY,IAAIiC,oBAAoB,GAAGC,mBAAmB,CAAC,GAC5DN,mBAAmB;EACrB,IAAMQ,0BAA0B,GAC9BD,mBAAmB,GAAG,GAAG,GAAGA,mBAAmB,GAAG,GAAG,IAAI7C,UAAU,GAAG,GAAG,CAAC;EAE5E,OAAO8C,0BAA0B,CAACV,OAAO,CAAC,CAAC,CAAC,CAACW,QAAQ,EAAE;AACzD,CAAC;AAED,eAAevD,yBAAyB"},"metadata":{},"sourceType":"module"}