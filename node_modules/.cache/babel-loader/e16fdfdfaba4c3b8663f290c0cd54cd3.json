{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/Users/neville/Documents/Github/elrond-delegation/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\nvar _createForOfIteratorHelper = require(\"/Users/neville/Documents/Github/elrond-delegation/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _classCallCheck = require(\"/Users/neville/Documents/Github/elrond-delegation/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/neville/Documents/Github/elrond-delegation/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TokenOperationsOutcomeParser = void 0;\nvar address_1 = require(\"../address\");\nvar errors_1 = require(\"../errors\");\nvar codec_1 = require(\"./codec\");\nvar TokenOperationsOutcomeParser = /*#__PURE__*/function () {\n  function TokenOperationsOutcomeParser() {\n    _classCallCheck(this, TokenOperationsOutcomeParser);\n  }\n  _createClass(TokenOperationsOutcomeParser, [{\n    key: \"parseIssueFungible\",\n    value: function parseIssueFungible(transaction) {\n      this.ensureNoError(transaction);\n      var event = this.findSingleEventByIdentifier(transaction, \"issue\");\n      var tokenIdentifier = this.extractTokenIdentifier(event);\n      return {\n        tokenIdentifier: tokenIdentifier\n      };\n    }\n  }, {\n    key: \"parseIssueNonFungible\",\n    value: function parseIssueNonFungible(transaction) {\n      this.ensureNoError(transaction);\n      var event = this.findSingleEventByIdentifier(transaction, \"issueNonFungible\");\n      var tokenIdentifier = this.extractTokenIdentifier(event);\n      return {\n        tokenIdentifier: tokenIdentifier\n      };\n    }\n  }, {\n    key: \"parseIssueSemiFungible\",\n    value: function parseIssueSemiFungible(transaction) {\n      this.ensureNoError(transaction);\n      var event = this.findSingleEventByIdentifier(transaction, \"issueSemiFungible\");\n      var tokenIdentifier = this.extractTokenIdentifier(event);\n      return {\n        tokenIdentifier: tokenIdentifier\n      };\n    }\n  }, {\n    key: \"parseRegisterMetaESDT\",\n    value: function parseRegisterMetaESDT(transaction) {\n      this.ensureNoError(transaction);\n      var event = this.findSingleEventByIdentifier(transaction, \"registerMetaESDT\");\n      var tokenIdentifier = this.extractTokenIdentifier(event);\n      return {\n        tokenIdentifier: tokenIdentifier\n      };\n    }\n  }, {\n    key: \"parseSetSpecialRole\",\n    value: function parseSetSpecialRole(transaction) {\n      this.ensureNoError(transaction);\n      var event = this.findSingleEventByIdentifier(transaction, \"ESDTSetRole\");\n      var userAddress = event.address.toString();\n      var tokenIdentifier = this.extractTokenIdentifier(event);\n      var roles = event.topics.slice(3).map(function (topic) {\n        return topic.valueOf().toString();\n      });\n      return {\n        userAddress: userAddress,\n        tokenIdentifier: tokenIdentifier,\n        roles: roles\n      };\n    }\n  }, {\n    key: \"parseNFTCreate\",\n    value: function parseNFTCreate(transaction) {\n      this.ensureNoError(transaction);\n      var event = this.findSingleEventByIdentifier(transaction, \"ESDTNFTCreate\");\n      var tokenIdentifier = this.extractTokenIdentifier(event);\n      var nonce = this.extractNonce(event);\n      var initialQuantity = this.extractAmount(event);\n      return {\n        tokenIdentifier: tokenIdentifier,\n        nonce: nonce,\n        initialQuantity: initialQuantity\n      };\n    }\n  }, {\n    key: \"parseLocalMint\",\n    value: function parseLocalMint(transaction) {\n      this.ensureNoError(transaction);\n      var event = this.findSingleEventByIdentifier(transaction, \"ESDTLocalMint\");\n      var userAddress = event.address.toString();\n      var tokenIdentifier = this.extractTokenIdentifier(event);\n      var nonce = this.extractNonce(event);\n      var mintedSupply = this.extractAmount(event);\n      return {\n        userAddress: userAddress,\n        tokenIdentifier: tokenIdentifier,\n        nonce: nonce,\n        mintedSupply: mintedSupply\n      };\n    }\n  }, {\n    key: \"parseLocalBurn\",\n    value: function parseLocalBurn(transaction) {\n      this.ensureNoError(transaction);\n      var event = this.findSingleEventByIdentifier(transaction, \"ESDTLocalBurn\");\n      var userAddress = event.address.toString();\n      var tokenIdentifier = this.extractTokenIdentifier(event);\n      var nonce = this.extractNonce(event);\n      var burntSupply = this.extractAmount(event);\n      return {\n        userAddress: userAddress,\n        tokenIdentifier: tokenIdentifier,\n        nonce: nonce,\n        burntSupply: burntSupply\n      };\n    }\n  }, {\n    key: \"parsePause\",\n    value: function parsePause(transaction) {\n      this.ensureNoError(transaction);\n      var _ = this.findSingleEventByIdentifier(transaction, \"ESDTPause\");\n      return {};\n    }\n  }, {\n    key: \"parseUnpause\",\n    value: function parseUnpause(transaction) {\n      this.ensureNoError(transaction);\n      var _ = this.findSingleEventByIdentifier(transaction, \"ESDTUnPause\");\n      return {};\n    }\n  }, {\n    key: \"parseFreeze\",\n    value: function parseFreeze(transaction) {\n      this.ensureNoError(transaction);\n      var event = this.findSingleEventByIdentifier(transaction, \"ESDTFreeze\");\n      var tokenIdentifier = this.extractTokenIdentifier(event);\n      var nonce = this.extractNonce(event);\n      var balance = this.extractAmount(event);\n      var userAddress = this.extractAddress(event);\n      return {\n        userAddress: userAddress,\n        tokenIdentifier: tokenIdentifier,\n        nonce: nonce,\n        balance: balance\n      };\n    }\n  }, {\n    key: \"parseUnfreeze\",\n    value: function parseUnfreeze(transaction) {\n      this.ensureNoError(transaction);\n      var event = this.findSingleEventByIdentifier(transaction, \"ESDTUnFreeze\");\n      var tokenIdentifier = this.extractTokenIdentifier(event);\n      var nonce = this.extractNonce(event);\n      var balance = this.extractAmount(event);\n      var userAddress = this.extractAddress(event);\n      return {\n        userAddress: userAddress,\n        tokenIdentifier: tokenIdentifier,\n        nonce: nonce,\n        balance: balance\n      };\n    }\n  }, {\n    key: \"parseWipe\",\n    value: function parseWipe(transaction) {\n      this.ensureNoError(transaction);\n      var event = this.findSingleEventByIdentifier(transaction, \"ESDTWipe\");\n      var tokenIdentifier = this.extractTokenIdentifier(event);\n      var nonce = this.extractNonce(event);\n      var balance = this.extractAmount(event);\n      var userAddress = this.extractAddress(event);\n      return {\n        userAddress: userAddress,\n        tokenIdentifier: tokenIdentifier,\n        nonce: nonce,\n        balance: balance\n      };\n    }\n  }, {\n    key: \"parseUpdateAttributes\",\n    value: function parseUpdateAttributes(transaction) {\n      var _a;\n      this.ensureNoError(transaction);\n      var event = this.findSingleEventByIdentifier(transaction, \"ESDTNFTUpdateAttributes\");\n      var tokenIdentifier = this.extractTokenIdentifier(event);\n      var nonce = this.extractNonce(event);\n      var attributes = (_a = event.topics[3]) === null || _a === void 0 ? void 0 : _a.valueOf();\n      return {\n        tokenIdentifier: tokenIdentifier,\n        nonce: nonce,\n        attributes: attributes\n      };\n    }\n  }, {\n    key: \"parseAddQuantity\",\n    value: function parseAddQuantity(transaction) {\n      this.ensureNoError(transaction);\n      var event = this.findSingleEventByIdentifier(transaction, \"ESDTNFTAddQuantity\");\n      var tokenIdentifier = this.extractTokenIdentifier(event);\n      var nonce = this.extractNonce(event);\n      var addedQuantity = this.extractAmount(event);\n      return {\n        tokenIdentifier: tokenIdentifier,\n        nonce: nonce,\n        addedQuantity: addedQuantity\n      };\n    }\n  }, {\n    key: \"parseBurnQuantity\",\n    value: function parseBurnQuantity(transaction) {\n      this.ensureNoError(transaction);\n      var event = this.findSingleEventByIdentifier(transaction, \"ESDTNFTBurn\");\n      var tokenIdentifier = this.extractTokenIdentifier(event);\n      var nonce = this.extractNonce(event);\n      var burntQuantity = this.extractAmount(event);\n      return {\n        tokenIdentifier: tokenIdentifier,\n        nonce: nonce,\n        burntQuantity: burntQuantity\n      };\n    }\n  }, {\n    key: \"ensureNoError\",\n    value: function ensureNoError(transaction) {\n      var _a;\n      var _iterator = _createForOfIteratorHelper(transaction.logs.events),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var event = _step.value;\n          if (event.identifier == \"signalError\") {\n            var data = Buffer.from(event.data.substring(1), \"hex\").toString();\n            var message = (_a = event.topics[1]) === null || _a === void 0 ? void 0 : _a.valueOf().toString();\n            throw new errors_1.ErrCannotParseTransactionOutcome(transaction.hash, \"encountered signalError: \".concat(message, \" (\").concat(data, \")\"));\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"findSingleEventByIdentifier\",\n    value: function findSingleEventByIdentifier(transaction, identifier) {\n      var events = this.gatherAllEvents(transaction).filter(function (event) {\n        return event.identifier == identifier;\n      });\n      if (events.length == 0) {\n        throw new errors_1.ErrCannotParseTransactionOutcome(transaction.hash, \"cannot find event of type \".concat(identifier));\n      }\n      if (events.length > 1) {\n        throw new errors_1.ErrCannotParseTransactionOutcome(transaction.hash, \"more than one event of type \".concat(identifier));\n      }\n      return events[0];\n    }\n  }, {\n    key: \"gatherAllEvents\",\n    value: function gatherAllEvents(transaction) {\n      var allEvents = [];\n      allEvents.push.apply(allEvents, _toConsumableArray(transaction.logs.events));\n      var _iterator2 = _createForOfIteratorHelper(transaction.contractResults.items),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var item = _step2.value;\n          allEvents.push.apply(allEvents, _toConsumableArray(item.logs.events));\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      return allEvents;\n    }\n  }, {\n    key: \"extractTokenIdentifier\",\n    value: function extractTokenIdentifier(event) {\n      var _a;\n      return (_a = event.topics[0]) === null || _a === void 0 ? void 0 : _a.valueOf().toString();\n    }\n  }, {\n    key: \"extractNonce\",\n    value: function extractNonce(event) {\n      var _a;\n      return codec_1.bufferToBigInt((_a = event.topics[1]) === null || _a === void 0 ? void 0 : _a.valueOf()).toFixed(0);\n    }\n  }, {\n    key: \"extractAmount\",\n    value: function extractAmount(event) {\n      var _a;\n      return codec_1.bufferToBigInt((_a = event.topics[2]) === null || _a === void 0 ? void 0 : _a.valueOf()).toFixed(0);\n    }\n  }, {\n    key: \"extractAddress\",\n    value: function extractAddress(event) {\n      var _a;\n      return address_1.Address.fromBuffer((_a = event.topics[3]) === null || _a === void 0 ? void 0 : _a.valueOf()).toString();\n    }\n  }]);\n  return TokenOperationsOutcomeParser;\n}();\nexports.TokenOperationsOutcomeParser = TokenOperationsOutcomeParser;","map":{"version":3,"sources":["../../src/tokenOperations/tokenOperationsOutcomeParser.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TokenOperationsOutcomeParser = void 0;\nconst address_1 = require(\"../address\");\nconst errors_1 = require(\"../errors\");\nconst codec_1 = require(\"./codec\");\nclass TokenOperationsOutcomeParser {\n    parseIssueFungible(transaction) {\n        this.ensureNoError(transaction);\n        const event = this.findSingleEventByIdentifier(transaction, \"issue\");\n        const tokenIdentifier = this.extractTokenIdentifier(event);\n        return { tokenIdentifier: tokenIdentifier };\n    }\n    parseIssueNonFungible(transaction) {\n        this.ensureNoError(transaction);\n        const event = this.findSingleEventByIdentifier(transaction, \"issueNonFungible\");\n        const tokenIdentifier = this.extractTokenIdentifier(event);\n        return { tokenIdentifier: tokenIdentifier };\n    }\n    parseIssueSemiFungible(transaction) {\n        this.ensureNoError(transaction);\n        const event = this.findSingleEventByIdentifier(transaction, \"issueSemiFungible\");\n        const tokenIdentifier = this.extractTokenIdentifier(event);\n        return { tokenIdentifier: tokenIdentifier };\n    }\n    parseRegisterMetaESDT(transaction) {\n        this.ensureNoError(transaction);\n        const event = this.findSingleEventByIdentifier(transaction, \"registerMetaESDT\");\n        const tokenIdentifier = this.extractTokenIdentifier(event);\n        return { tokenIdentifier: tokenIdentifier };\n    }\n    parseSetSpecialRole(transaction) {\n        this.ensureNoError(transaction);\n        const event = this.findSingleEventByIdentifier(transaction, \"ESDTSetRole\");\n        const userAddress = event.address.toString();\n        const tokenIdentifier = this.extractTokenIdentifier(event);\n        const roles = event.topics.slice(3).map(topic => topic.valueOf().toString());\n        return { userAddress, tokenIdentifier, roles };\n    }\n    parseNFTCreate(transaction) {\n        this.ensureNoError(transaction);\n        const event = this.findSingleEventByIdentifier(transaction, \"ESDTNFTCreate\");\n        const tokenIdentifier = this.extractTokenIdentifier(event);\n        const nonce = this.extractNonce(event);\n        const initialQuantity = this.extractAmount(event);\n        return { tokenIdentifier, nonce, initialQuantity };\n    }\n    parseLocalMint(transaction) {\n        this.ensureNoError(transaction);\n        const event = this.findSingleEventByIdentifier(transaction, \"ESDTLocalMint\");\n        const userAddress = event.address.toString();\n        const tokenIdentifier = this.extractTokenIdentifier(event);\n        const nonce = this.extractNonce(event);\n        const mintedSupply = this.extractAmount(event);\n        return { userAddress, tokenIdentifier, nonce, mintedSupply };\n    }\n    parseLocalBurn(transaction) {\n        this.ensureNoError(transaction);\n        const event = this.findSingleEventByIdentifier(transaction, \"ESDTLocalBurn\");\n        const userAddress = event.address.toString();\n        const tokenIdentifier = this.extractTokenIdentifier(event);\n        const nonce = this.extractNonce(event);\n        const burntSupply = this.extractAmount(event);\n        return { userAddress, tokenIdentifier, nonce, burntSupply };\n    }\n    parsePause(transaction) {\n        this.ensureNoError(transaction);\n        const _ = this.findSingleEventByIdentifier(transaction, \"ESDTPause\");\n        return {};\n    }\n    parseUnpause(transaction) {\n        this.ensureNoError(transaction);\n        const _ = this.findSingleEventByIdentifier(transaction, \"ESDTUnPause\");\n        return {};\n    }\n    parseFreeze(transaction) {\n        this.ensureNoError(transaction);\n        const event = this.findSingleEventByIdentifier(transaction, \"ESDTFreeze\");\n        const tokenIdentifier = this.extractTokenIdentifier(event);\n        const nonce = this.extractNonce(event);\n        const balance = this.extractAmount(event);\n        const userAddress = this.extractAddress(event);\n        return { userAddress, tokenIdentifier, nonce, balance };\n    }\n    parseUnfreeze(transaction) {\n        this.ensureNoError(transaction);\n        const event = this.findSingleEventByIdentifier(transaction, \"ESDTUnFreeze\");\n        const tokenIdentifier = this.extractTokenIdentifier(event);\n        const nonce = this.extractNonce(event);\n        const balance = this.extractAmount(event);\n        const userAddress = this.extractAddress(event);\n        return { userAddress, tokenIdentifier, nonce, balance };\n    }\n    parseWipe(transaction) {\n        this.ensureNoError(transaction);\n        const event = this.findSingleEventByIdentifier(transaction, \"ESDTWipe\");\n        const tokenIdentifier = this.extractTokenIdentifier(event);\n        const nonce = this.extractNonce(event);\n        const balance = this.extractAmount(event);\n        const userAddress = this.extractAddress(event);\n        return { userAddress, tokenIdentifier, nonce, balance };\n    }\n    parseUpdateAttributes(transaction) {\n        var _a;\n        this.ensureNoError(transaction);\n        const event = this.findSingleEventByIdentifier(transaction, \"ESDTNFTUpdateAttributes\");\n        const tokenIdentifier = this.extractTokenIdentifier(event);\n        const nonce = this.extractNonce(event);\n        const attributes = (_a = event.topics[3]) === null || _a === void 0 ? void 0 : _a.valueOf();\n        return { tokenIdentifier, nonce, attributes };\n    }\n    parseAddQuantity(transaction) {\n        this.ensureNoError(transaction);\n        const event = this.findSingleEventByIdentifier(transaction, \"ESDTNFTAddQuantity\");\n        const tokenIdentifier = this.extractTokenIdentifier(event);\n        const nonce = this.extractNonce(event);\n        const addedQuantity = this.extractAmount(event);\n        return { tokenIdentifier, nonce, addedQuantity };\n    }\n    parseBurnQuantity(transaction) {\n        this.ensureNoError(transaction);\n        const event = this.findSingleEventByIdentifier(transaction, \"ESDTNFTBurn\");\n        const tokenIdentifier = this.extractTokenIdentifier(event);\n        const nonce = this.extractNonce(event);\n        const burntQuantity = this.extractAmount(event);\n        return { tokenIdentifier, nonce, burntQuantity };\n    }\n    ensureNoError(transaction) {\n        var _a;\n        for (const event of transaction.logs.events) {\n            if (event.identifier == \"signalError\") {\n                const data = Buffer.from(event.data.substring(1), \"hex\").toString();\n                const message = (_a = event.topics[1]) === null || _a === void 0 ? void 0 : _a.valueOf().toString();\n                throw new errors_1.ErrCannotParseTransactionOutcome(transaction.hash, `encountered signalError: ${message} (${data})`);\n            }\n        }\n    }\n    findSingleEventByIdentifier(transaction, identifier) {\n        const events = this.gatherAllEvents(transaction).filter(event => event.identifier == identifier);\n        if (events.length == 0) {\n            throw new errors_1.ErrCannotParseTransactionOutcome(transaction.hash, `cannot find event of type ${identifier}`);\n        }\n        if (events.length > 1) {\n            throw new errors_1.ErrCannotParseTransactionOutcome(transaction.hash, `more than one event of type ${identifier}`);\n        }\n        return events[0];\n    }\n    gatherAllEvents(transaction) {\n        const allEvents = [];\n        allEvents.push(...transaction.logs.events);\n        for (const item of transaction.contractResults.items) {\n            allEvents.push(...item.logs.events);\n        }\n        return allEvents;\n    }\n    extractTokenIdentifier(event) {\n        var _a;\n        return (_a = event.topics[0]) === null || _a === void 0 ? void 0 : _a.valueOf().toString();\n    }\n    extractNonce(event) {\n        var _a;\n        return codec_1.bufferToBigInt((_a = event.topics[1]) === null || _a === void 0 ? void 0 : _a.valueOf()).toFixed(0);\n    }\n    extractAmount(event) {\n        var _a;\n        return codec_1.bufferToBigInt((_a = event.topics[2]) === null || _a === void 0 ? void 0 : _a.valueOf()).toFixed(0);\n    }\n    extractAddress(event) {\n        var _a;\n        return address_1.Address.fromBuffer((_a = event.topics[3]) === null || _a === void 0 ? void 0 : _a.valueOf()).toString();\n    }\n}\nexports.TokenOperationsOutcomeParser = TokenOperationsOutcomeParser;\n//# sourceMappingURL=tokenOperationsOutcomeParser.js.map"]},"metadata":{},"sourceType":"script"}