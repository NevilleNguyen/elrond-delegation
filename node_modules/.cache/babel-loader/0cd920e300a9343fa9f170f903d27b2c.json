{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/neville/Documents/Github/elrond-delegation/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/neville/Documents/Github/elrond-delegation/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UserAddress = void 0;\nvar _bech = __importStar(require(\"bech32\"));\nvar errors_1 = require(\"./errors\");\n/**\n * The human-readable-part of the bech32 addresses.\n */\nvar HRP = \"erd\";\n/**\n * A user Address, as an immutable object.\n */\nvar UserAddress = /*#__PURE__*/function () {\n  function UserAddress(buffer) {\n    _classCallCheck(this, UserAddress);\n    this.buffer = buffer;\n  }\n  _createClass(UserAddress, [{\n    key: \"hex\",\n    value:\n    /**\n     * Returns the hex representation of the address (pubkey)\n     */\n    function hex() {\n      return this.buffer.toString(\"hex\");\n    }\n    /**\n     * Returns the bech32 representation of the address\n     */\n  }, {\n    key: \"bech32\",\n    value: function bech32() {\n      var words = _bech.toWords(this.pubkey());\n      var address = _bech.encode(HRP, words);\n      return address;\n    }\n    /**\n     * Returns the pubkey as raw bytes (buffer)\n     */\n  }, {\n    key: \"pubkey\",\n    value: function pubkey() {\n      return this.buffer;\n    }\n    /**\n     * Returns the bech32 representation of the address\n     */\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.bech32();\n    }\n    /**\n     * Converts the address to a pretty, plain JavaScript object.\n     */\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        bech32: this.bech32(),\n        pubkey: this.hex()\n      };\n    }\n  }], [{\n    key: \"fromBech32\",\n    value: function fromBech32(value) {\n      var decoded;\n      try {\n        decoded = _bech.decode(value);\n      } catch (err) {\n        throw new errors_1.ErrBadAddress(value, err);\n      }\n      if (decoded.prefix != HRP) {\n        throw new errors_1.ErrBadAddress(value);\n      }\n      var pubkey = Buffer.from(_bech.fromWords(decoded.words));\n      return new UserAddress(pubkey);\n    }\n  }]);\n  return UserAddress;\n}();\nexports.UserAddress = UserAddress;","map":{"version":3,"sources":["../src/userAddress.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,KAAA,GAAA,YAAA,CAAA,OAAA,CAAA,QAAA,CAAA,CAAA;AACA,IAAA,QAAA,GAAA,OAAA,CAAA,UAAA,CAAA;AAEA;;AAEG;AACH,IAAM,GAAG,GAAG,KAAK;AAEjB;;AAEG;AAFH,IAGa,WAAW;EAGpB,SAAA,YAAmB,MAAc,EAAA;IAAA,eAAA,OAAA,WAAA;IAC7B,IAAI,CAAC,MAAM,GAAG,MAAM;EACxB;EAAC,YAAA,CAAA,WAAA;IAAA,GAAA;IAAA,KAAA;IAmBD;;AAEG;IACH,SAAA,IAAA,EAAG;MACC,OAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC;IACtC;IAEA;;AAEG;EAFH;IAAA,GAAA;IAAA,KAAA,EAGA,SAAA,OAAA,EAAM;MACF,IAAI,KAAK,GAAG,KAAM,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;MACzC,IAAI,OAAO,GAAG,KAAM,CAAC,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC;MACvC,OAAO,OAAO;IAClB;IAEA;;AAEG;EAFH;IAAA,GAAA;IAAA,KAAA,EAGA,SAAA,OAAA,EAAM;MACF,OAAO,IAAI,CAAC,MAAM;IACtB;IAEA;;AAEG;EAFH;IAAA,GAAA;IAAA,KAAA,EAGA,SAAA,SAAA,EAAQ;MACJ,OAAO,IAAI,CAAC,MAAM,EAAE;IACxB;IAEA;;AAEG;EAFH;IAAA,GAAA;IAAA,KAAA,EAGA,SAAA,OAAA,EAAM;MACF,OAAO;QACH,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE;QACrB,MAAM,EAAE,IAAI,CAAC,GAAG;OACnB;IACL;EAAC;IAAA,GAAA;IAAA,KAAA,EAvDD,SAAA,WAAkB,KAAa,EAAA;MAC3B,IAAI,OAAO;MAEX,IAAI;QACA,OAAO,GAAG,KAAM,CAAC,MAAM,CAAC,KAAK,CAAC;OACjC,CAAC,OAAO,GAAQ,EAAE;QACf,MAAM,IAAI,QAAA,CAAA,aAAa,CAAC,KAAK,EAAE,GAAG,CAAC;MACtC;MAED,IAAI,OAAO,CAAC,MAAM,IAAI,GAAG,EAAE;QACvB,MAAM,IAAI,QAAA,CAAA,aAAa,CAAC,KAAK,CAAC;MACjC;MAED,IAAI,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,KAAM,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;MACzD,OAAO,IAAI,WAAW,CAAC,MAAM,CAAC;IAClC;EAAC;EAAA,OAAA,WAAA;AAAA;AAtBL,OAAA,CAAA,WAAA,GAAA,WAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UserAddress = void 0;\nconst bech32 = __importStar(require(\"bech32\"));\nconst errors_1 = require(\"./errors\");\n/**\n * The human-readable-part of the bech32 addresses.\n */\nconst HRP = \"erd\";\n/**\n * A user Address, as an immutable object.\n */\nclass UserAddress {\n    constructor(buffer) {\n        this.buffer = buffer;\n    }\n    static fromBech32(value) {\n        let decoded;\n        try {\n            decoded = bech32.decode(value);\n        }\n        catch (err) {\n            throw new errors_1.ErrBadAddress(value, err);\n        }\n        if (decoded.prefix != HRP) {\n            throw new errors_1.ErrBadAddress(value);\n        }\n        let pubkey = Buffer.from(bech32.fromWords(decoded.words));\n        return new UserAddress(pubkey);\n    }\n    /**\n     * Returns the hex representation of the address (pubkey)\n     */\n    hex() {\n        return this.buffer.toString(\"hex\");\n    }\n    /**\n     * Returns the bech32 representation of the address\n     */\n    bech32() {\n        let words = bech32.toWords(this.pubkey());\n        let address = bech32.encode(HRP, words);\n        return address;\n    }\n    /**\n     * Returns the pubkey as raw bytes (buffer)\n     */\n    pubkey() {\n        return this.buffer;\n    }\n    /**\n     * Returns the bech32 representation of the address\n     */\n    toString() {\n        return this.bech32();\n    }\n    /**\n     * Converts the address to a pretty, plain JavaScript object.\n     */\n    toJSON() {\n        return {\n            bech32: this.bech32(),\n            pubkey: this.hex()\n        };\n    }\n}\nexports.UserAddress = UserAddress;\n//# sourceMappingURL=userAddress.js.map"]},"metadata":{},"sourceType":"script"}